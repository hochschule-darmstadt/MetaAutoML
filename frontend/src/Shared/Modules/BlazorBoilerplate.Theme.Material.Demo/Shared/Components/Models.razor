@inject IStringLocalizer<Global> L
@using System
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inject BlazorBoilerplate.Shared.Services.SessionState SessionState


<div class="row">
    <MatTable Items="@sortedData" PageSize="10" class="mat-elevation-z5" ShowPaging="true" UseSortHeaderRow="true">
        <MatTableHeader>
            <MatSortHeaderRow SortChanged="@SortData">
                <MatSortHeader SortId="training">Training</MatSortHeader>
                <MatSortHeader SortId="name">AutoML</MatSortHeader>
                <MatSortHeader SortId="library"><span style="width:220px">ML library</span></MatSortHeader>
                <MatSortHeader SortId="model"><span style="width:162px">Model</span></MatSortHeader>
                <MatSortHeader SortId="testscore">Score</MatSortHeader>
                <MatSortHeader SortId="predictiontime">Prediction time[ms]</MatSortHeader>
                <MatSortHeader SortId="status">Status</MatSortHeader>
                <th></th>
            </MatSortHeaderRow>
        </MatTableHeader>
        <MatTableRow>
            <td>
                <a href="@NavManager.ToAbsoluteUri("datasets/" + DatasetId + "/training/" + context.Id).AbsoluteUri" Style="cursor: pointer;">@context.Id</a>
            </td>
            <td>@context.Name</td>
            <td>@context.Library</td>
            <td>
                <a href="@NavManager.ToAbsoluteUri("datasets/" + DatasetId + "/training/" + context.Id + "/model/" + @context.Name).AbsoluteUri"
                    @onclick="@(() => HandleModelChanged(context))" Style="cursor: pointer;">@context.Model</a>
            </td>
            <td>@string.Format("{0:f3}", @context.TestScore)</td>
            <td>@string.Format("{0:f3}", @context.Predictiontime)</td>
            <td>@context.Status</td>
            <td>
                <ModelMenu OpenModel="OpenModel" HandleClick="@(() => HandleModelChanged(context))"></ModelMenu>
            </td>
        </MatTableRow>
    </MatTable>
</div>

@code {
    [Parameter]
    public string DatasetId { get; set; }

    public string SessionId;
    private String ModelName;
    private GetSessionsResponseDto _sessions;

    MatButton Button;
    BaseMatMenu Menu;

    public class AutoML{
        public string Id { get; set; }
        public string Name { get; set; }
        public string Library { get; set; }
        public string Model { get; set; }
        public double TestScore { get; set; }
        public double Predictiontime { get; set; }
        public string Status { get; set; }

        public AutoML(string id, string name, string library, string model, double testScore, double predictiontime, string status){
            Id = id;
            Name = name;
            Library = library;
            Model = model;
            TestScore = testScore;
            Predictiontime = predictiontime;
            Status = status;
        }
    }
    List<AutoML> automls = new List<AutoML>();
    AutoML[] sortedData = null;

    Dictionary<string, GetSessionResponseDto> loadedSessions = new Dictionary<string, GetSessionResponseDto>();

    protected override void OnInitialized(){
        LoadSessions();
    }

    protected async Task LoadSessions()
    {
        //Load sessionIds
        try
        {
            ApiResponseDto apiResponse = await apiClient.GetSessions(new GetSessionsRequestDto { User = "" });

            if (apiResponse.IsSuccessStatusCode)
            {
                _sessions = Newtonsoft.Json.JsonConvert.DeserializeObject<GetSessionsResponseDto>(apiResponse.Result.ToString());
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }

        //Load every session from sessions
        foreach(string _sessionId in _sessions.SessionIds){
            LoadSession(_sessionId);
        }
    }

    protected void OpenModel(){
        NavManager.NavigateTo(NavManager.ToAbsoluteUri("datasets/" + DatasetId + "/training/" + SessionId + "/Model/" + ModelName).AbsoluteUri);
    }

    private async void HandleModelChanged(AutoML obj)
    {
        SessionId = obj.Id;
        ModelName = obj.Name;
        SessionState.session = loadedSessions[SessionId];
    }

    private void PopulateTable(GetSessionResponseDto session, string _sessionId){
        if(session.DatasetId == DatasetId){
            foreach (AutoMLStatusDto automl in session.AutoMls){
                string status = "";
                switch(automl.Status){
                    case "unknown": status = "Unknown";
                            break;
                    case "busy": status = "Running";
                            break;
                    case "completed": status = "Completed";
                            break;
                    case "failed": status = "Failed";
                            break;
                }
                automls.Add(new AutoML(_sessionId, automl.Name, automl.Library, automl.Model, automl.TestScore, automl.Predictiontime, status));
            }
        }
        automls = automls.OrderByDescending(x => x.TestScore).ToList();
    }

    void SortData(MatSortChangedEvent sort)
    {
        sortedData = automls.OrderByDescending(x => x.TestScore).ToArray();
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)))
        {
            Comparison<AutoML> comparison = null;
            switch (sort.SortId)
            {
                case "training":
                    comparison = (s1, s2) => string.Compare(s1.Id, s2.Id, StringComparison.InvariantCultureIgnoreCase);
                    break;
                case "name":
                    comparison = (s1, s2) => string.Compare(s1.Name, s2.Name, StringComparison.InvariantCultureIgnoreCase);
                    break;
                case "library":
                    comparison = (s1, s2) => string.Compare(s1.Library, s2.Library, StringComparison.InvariantCultureIgnoreCase);
                    break;
                case "model":
                    comparison = (s1, s2) => string.Compare(s1.Model, s2.Model, StringComparison.InvariantCultureIgnoreCase);
                    break;
                case "testscore":
                    comparison = (s1, s2) => s1.TestScore.CompareTo(s2.TestScore);
                    break;
                case "predictiontime":
                    comparison = (s1, s2) => s1.Predictiontime.CompareTo(s2.Predictiontime);
                    break;
                case "status":
                    comparison = (s1, s2) => string.Compare(s1.Status, s2.Status, StringComparison.InvariantCultureIgnoreCase);
                    break;
            }
            if (comparison != null)
            {
                if (sort.Direction == MatSortDirection.Desc)
                {
                    Array.Sort(sortedData, (s1, s2) => -1 * comparison(s1, s2));
                }
                else
                {
                    Array.Sort(sortedData, comparison);
                }
            }
        }
    }

    private async void LoadSession(string _sessionId)
    {
        await InvokeAsync(async () =>
        {
            try
            {
                ApiResponseDto apiResponse = await apiClient.GetSession(new GetSessionRequestDto { SessionId = _sessionId });

                if (apiResponse.IsSuccessStatusCode)
                {
                    GetSessionResponseDto session = Newtonsoft.Json.JsonConvert.DeserializeObject<GetSessionResponseDto>(apiResponse.Result.ToString());
                    PopulateTable(session, _sessionId);
                    loadedSessions.Add(_sessionId, session);
                    SortData(null);
                    StateHasChanged();
                }
                else
                {
                    viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
                }
            }
            catch (Exception ex)
            {
                viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
            }
        });
    }
}
