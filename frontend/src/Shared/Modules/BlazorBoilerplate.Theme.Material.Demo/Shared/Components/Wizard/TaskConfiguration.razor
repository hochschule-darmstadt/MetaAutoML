@inject IStringLocalizer<Global> L
@using System
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject BlazorBoilerplate.Shared.Services.WizardState WizardState


<div id="required" style="display:flex; flex-direction:column; gap: 10px">
    <div style="display:flex; flex-direction:row; justify-content:left">
        <div style="display: flex; align-items: center; padding-right: 1%">Machine Learning Task:</div>
        <MatSelect Label="Pick a task" TValue="string" ValueChanged="@OnTaskValueChanged">
            @if (_tasks != null)
            {
                @if (_tasks.Tasks != null)
                {
                    @foreach (var task in _tasks.Tasks)
                   {
                    <MatOptionString Value="@task.ID">@task.Properties["skos:prefLabel"]</MatOptionString>
                    }
                }

            }
        </MatSelect>
    </div>
    @* only show advanced option if a task was selected *@
    @if (lastCheckedChip != "testLabel")
    {
        <div style="display:flex; flex-direction:row; justify-content:left">
            <div style="display: flex; align-items: center; padding-right: 1%">Compatible Libraries:</div>
            <MatChipSet Filter="true">
                @if (_supportedMlLibraries != null && _supportedMlLibraries.MlLibraries.Count != 0)
                {
                    @foreach (var item in _supportedMlLibraries.MlLibraries)
                    {
                        <MatChip Label="@item" IsCheckable="true"></MatChip>
                    }
                }
                @* <MatChip label="test1" IsCheckable="true">test1</MatChip>
                <MatChip label="test2" IsCheckable="true">test2</MatChip>
                <MatChip label="test3" IsCheckable="true">test3</MatChip> *@
            </MatChipSet>
        </div>

        <div style="display:flex; flex-direction:row; justify-content:left">
            <div style="display: flex; align-items: center; padding-right: 1%">AutoML Solution:</div>
            <MatChipSet Filter="true" SelectedChipsChanged="OnChipAutoMLSolutionChanged">
                @if (_compatibleAutoMl != null && _compatibleAutoMl.AutoMlSolutions.Count != 0)
                {
                    @foreach (var item in _compatibleAutoMl.AutoMlSolutions)
                    {
                        <MatChip Label="@item" IsCheckable="true"></MatChip>
                    }
                }
            </MatChipSet>
        </div>

        <div style="display:flex; flex-direction:row; justify-content:left">
            <div style="display: flex; align-items: center; padding-right: 1% ">Target Column:</div>
            @if (_columnNames != null)
            {
                <MatSelectItem Items="@_columnNames" TValue="string" ValueChanged="@OnTargetChanged"></MatSelectItem>
            }
        </div>

        <MatAccordion>
            <MatExpansionPanel @bind-Expanded="@advancedOptionsSelected">
                <MatExpansionPanelSummary>
                    <MatExpansionPanelHeader>Advanced Settings</MatExpansionPanelHeader>
                </MatExpansionPanelSummary>
                <MatExpansionPanelDetails>
                    <div style="display:flex; flex-direction:row; justify-content:left">
                        <div style="display: flex; align-items: center; padding-right: 1% ">Time limit [minutes]:</div>
                        @if (WizardState.automlRequest.RuntimeConstraints != null)
                        {
                            <MatNumericUpDownField Value="@WizardState.automlRequest.RuntimeConstraints["runtime_limit"]" TValue="int" ValueChanged="OnRuntimeValueChanged"
                                                   DecimalPlaces=0>
                            </MatNumericUpDownField>
                        }
                    </div>
                </MatExpansionPanelDetails>
            </MatExpansionPanel>

        </MatAccordion>
    }
</div>

@code {
    private GetDatasetCompatibleTasksResponseDto _tasks;
    private GetCompatibleAutoMlSolutionsResponseDto _compatibleAutoMl;
    private GetSupportedMlLibrariesResponseDto _supportedMlLibraries;
    private List<String> _columnNames;
    private MatChip[] selectedChips = null;
    private string lastCheckedChip = "testLabel";
    private bool advancedOptionsSelected = false;

    /// <summary>
    /// Trigger to start examination for IsNextStepApproved in Parent
    /// </summary>
    [Parameter]
    public EventCallback CheckForNextStepCallback { get; set; }

    protected override async void OnInitialized()
    {
        await LoadData();
        _columnNames = new List<string>();
        foreach (KeyValuePair<string, dynamic> pair in WizardState.automlRequest.DatasetConfiguration["features"])
        {
            if((int)pair.Value != 7)
            {
                _columnNames.Add(pair.Key);
            }
        }
        if (WizardState.automlRequest.RuntimeConstraints.Count == 0)
        {
            WizardState.automlRequest.RuntimeConstraints.Add("runtime_limit", 3);
            WizardState.automlRequest.RuntimeConstraints.Add("max_iter", 0);
        }
        if (WizardState.automlRequest.TestConfig.Count == 0)
        {
            WizardState.automlRequest.TestConfig.Add("method", 0);
        }
    }

    private void OnRuntimeValueChanged(int time)
    {
        WizardState.automlRequest.RuntimeConstraints["runtime_limit"] = time;
    }

    private async void OnChipAutoMLSolutionChanged(MatChip[] newChips)
    {
        WizardState.automlRequest.RequiredAutoMLs = new List<string>();
        foreach (var chip in newChips)
        {
            WizardState.automlRequest.RequiredAutoMLs.Add(chip.Value.ToString());
        }
    }
    private async void OnTaskValueChanged(string newChip)
    {
        // TODO fix 2 times called bug (it effects perfomance)
        if (string.IsNullOrEmpty(newChip))
        {
            return;
        }
        lastCheckedChip = newChip;
        WizardState.automlRequest.Task = newChip;
        try
        {
            Dictionary<string, string> dictionary = new Dictionary<string, string>();
            dictionary.Add("task", WizardState.automlRequest.Task);
            /** Configuration = dictionary is currently dummy */
            GetCompatibleAutoMlSolutionsRequestDto compatibleAutoMlRequest = new GetCompatibleAutoMlSolutionsRequestDto { Configuration = dictionary };
            ApiResponseDto apiResponse = await apiClient.GetCompatibleAutoMlSolutions(compatibleAutoMlRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                _compatibleAutoMl = Newtonsoft.Json.JsonConvert.DeserializeObject<GetCompatibleAutoMlSolutionsResponseDto>(apiResponse.Result.ToString());
                StateHasChanged();
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    private async void OnTargetChanged(string value)
    {
        if (!WizardState.automlRequest.Configuration.ContainsKey("target"))
        {
            var target = new Dictionary<string, dynamic>();
            target.Add("target", "");
            WizardState.automlRequest.Configuration.Add("target", target);
        }
        WizardState.automlRequest.Configuration["target"]["target"] = value;
        foreach (var kvp in WizardState.automlRequest.DatasetConfiguration["features"])
        {
            if (kvp.Key == value)
            {
                WizardState.automlRequest.Configuration["target"]["type"] = kvp.Value;
                break;
            }
        }
    }

    private async Task LoadData()
    {
        try
        {
            _tasks = new GetDatasetCompatibleTasksResponseDto();
            GetDatasetCompatibleTasksRequestDto taskRequest = new GetDatasetCompatibleTasksRequestDto { DatasetName = WizardState.automlRequest.DatasetIdentifier };
            ApiResponseDto apiResponse = await apiClient.GetDatasetCompatibleTasks(taskRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                _tasks = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetCompatibleTasksResponseDto>(apiResponse.Result.ToString());
                StateHasChanged();
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
