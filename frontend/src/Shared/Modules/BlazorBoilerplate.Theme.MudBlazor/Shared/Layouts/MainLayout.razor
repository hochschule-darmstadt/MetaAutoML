@inherits RootLayout
@inject NavigationManager navigationManager
@inject AppState appState
@inject IStringLocalizer<Global> L
@using Radzen
@using Radzen.Blazor
@using System.ComponentModel.DataAnnotations

<CascadingValue Value="this">
    <MudLayout>
        <MudAppBar Elevation="1">
			<MudIconButton Icon="@navMenuIcon" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudSpacer />
            <MudText Color="Color.Dark" Typo="Typo.h6" Style="font-size: clamp(0.9rem, -0.425rem + 3.4vw, 1.5rem);">OMA-ML: Effective Machine Learning made easy!</MudText>
            <MudSpacer />
			<EditForm EditContext="editContext1">
				<DataAnnotationsValidator />
				<MudAutocomplete Label="Help search ..." @bind-Value="choice.State" Required="true"
								 SearchFunc="@SearchAsync" Immediate="true" CoerceValue="@coerceValue" ResetValueOnEmptyText="true"
								 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
								 For="@(() => choice1.State)" />
			</EditForm>

			<MudText Class="mb-n3" Typo="Typo.body2">
				<MudChip>@(choice1.State ?? "Not selected")</MudChip>
				</MudText>
			<MudSpacer />
            <TopRightBarSection />
        </MudAppBar>
        <MudDrawer @bind-Open="@_navMenuOpened" Elevation="2">
            <MudDrawerHeader >
                    <a href="/" title="@appState.AppName Home">
						<div class="drawer-logo">
							<img alt="@appState.AppName" class="logo-img" src=@($"{Module.ContentPath}/images/oma-logo.svg") title="@appState.AppName">
							<MudText Typo="Typo.h4" Color="Color.Primary" Class="docs-brand-text">@appState.AppName</MudText>
						</div>
                    </a>
            </MudDrawerHeader>
            <NavMenu />
            <DrawerFooter />
        </MudDrawer>
        <MudMainContent Style="min-height: 100vh; display: flex; flex-direction: column">
            <MudContainer MaxWidth="MaxWidth.False" Style="flex: 1">
                @TopSection
                <MudPaper Class="py-4" Elevation="0">
                    @Body
                </MudPaper>
            </MudContainer>
            <Footer />
        </MudMainContent>
        <MudScrollToTop TopOffset="400" Style="z-index:2000;">
            <MudFab StartIcon="@Icons.Material.Filled.KeyboardArrowUp" Color="Color.Primary" />
        </MudScrollToTop>
    </MudLayout>
</CascadingValue>
<RadzenTooltip />

@code {
    bool _navMenuOpened = true;
	string navMenuIcon = Icons.Material.Filled.Menu;

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            var profile = await appState.GetUserProfile();

            _navMenuOpened = profile.IsNavOpen;
		}
    }

    private void DrawerToggle()
    {
        _navMenuOpened = !_navMenuOpened;
    }

	// TODO Replace with the actual content
	private MudForm form;
	private bool coerceValue;
	private bool success1;
	private bool success2;
	private Choice choice1 = new();
	private Choice choice2 = new();
	private Choice choice3 = new();
	private EditContext editContext1;
	private EditContext editContext2;

	protected override void OnInitialized()
	{
		editContext1 = new EditContext(choice1);
		editContext2 = new EditContext(choice2);
	}

	private static string[] states =
	{
		"Alabama", "Alaska", "American Samoa", "Arizona",
		"Arkansas", "California", "Colorado", "Connecticut",
		"Delaware", "District of Columbia", "Federated States of Micronesia",
		"Florida", "Georgia", "Guam", "Hawaii", "Idaho",
		"Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
		"Louisiana", "Maine", "Marshall Islands", "Maryland",
		"Massachusetts", "Michigan", "Minnesota", "Mississippi",
		"Missouri", "Montana", "Nebraska", "Nevada",
		"New Hampshire", "New Jersey", "New Mexico", "New York",
		"North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
		"Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
		"Rhode Island", "South Carolina", "South Dakota", "Tennessee",
		"Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
		"Washington", "West Virginia", "Wisconsin", "Wyoming",
	};

	private async Task<IEnumerable<string>> SearchAsync(string value)
	{
		// In real life use an asynchronous function for fetching data from an api.
		await Task.Delay(5);

		// if text is null or empty, show complete list
		if (string.IsNullOrEmpty(value))
		{
			return states;
		}

		return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
	}

	private IEnumerable<string> Validate(string value)
	{
		if (string.IsNullOrWhiteSpace(value))
		{
			yield return "The State field is required";
			yield break;
		}

		if (!states.Contains(value))
		{
			yield return "This is an incorrect value";
		}
	}

	public class Choice
	{
		[Required]
		[State]
		public string State { get; set; }
	}

	[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter)]
	public sealed class StateAttribute : ValidationAttribute
	{
		protected override ValidationResult IsValid(object value, ValidationContext validationContext)
		{
			if (!states.Contains(value))
			{
				return new ValidationResult("This is an incorrect value", new[] { validationContext.MemberName });
			}

			return null;
		}
	}
}
