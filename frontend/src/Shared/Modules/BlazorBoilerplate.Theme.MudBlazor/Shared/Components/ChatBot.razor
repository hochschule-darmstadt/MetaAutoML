@using BlazorBoilerplate.Shared.Dto.Chat
@using System.Text.Json
@inherits DynamicComponentContainer
@inject IApiClient apiClient
@inject IJSRuntime JSRuntime

<MudFab 
Icon="@(isChatOpen ? Icons.Material.Filled.Close : Icons.Material.Filled.Chat)" 
Color="Color.Secondary" 
@onclick="ToggleChat"
Style="position:fixed; bottom: 20px; right: 20px; z-index: 100;" 
/>


<MudPopover Open="@isChatOpen" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.BottomRight">
    <MudPaper Class="chat-box">
        <!-- Chat Header -->
        <MudCard Class="chat-header" @onclick="CloseChat">
            <div class="chat-header-content">
                <MudText Typo="Typo.h5" Class="header-title">OMA-ML Assistant</MudText>
                <MudSpacer/>
                <MudIcon Icon="@Icons.Material.Filled.Minimize"
                Style="cursor: pointer; margin-left: auto;"/>
            </div>
        </MudCard>

        <!-- Chat Content Area -->
        <MudCardContent Class="chat-content" style="overflow: hidden">
            <MudList style="overflow: hidden">
                <div @ref="chatContentRef" style="overflow-y: auto; max-height: 392px;">
                    @foreach (var message in messages)
                    {
                        <MudListItem Class="@(message.IsUser ? "user-message" : "assistant-message")">
                            <MudText Class="@(message.IsUser ? "user-bubble" : "assistant-bubble")">
                                @message.Text
                            </MudText>
                        </MudListItem>
                    }
                    <MudListItem Class="assistant-message" style="@(isTyping ? "" : "display: none;")">
                        <MudText Class="assistant-bubble typing-indicator">
                            <span>.</span><span>.</span><span>.</span>
                        </MudText>
                    </MudListItem>
                </div>
            </MudList>

        </MudCardContent>

        <!-- Chat Input Area -->
        <MudCardActions Class="chat-input">
            <MudTextField @bind-Value="currentMessage" @ref="inputField" Placeholder="Message" FullWidth="true" Class="input-field" Disabled="isInputDisabled"
            OnKeyUp="HandleEnterKey" />
            <MudIconButton Icon="@Icons.Material.Filled.Send" @onclick="SendMessage" />
        </MudCardActions>
    </MudPaper>
</MudPopover>

@code {
    private bool isChatOpen = false;
    private MudTextField<string> inputField;
    private string currentMessage = string.Empty;
    private bool isInputDisabled = false;
    private bool isTyping = false;

    private ElementReference chatContentRef;

    private List<Message> messages = new List<Message>
    {
        new Message { Text = "Hello, I'm your digital assistant. I'm glad you're using our service! How can I assist you today?", IsUser = false }
    };

    private void ToggleChat() {
        isChatOpen = !isChatOpen;
    }

    private void HandleEnterKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SendMessage();
        }
    }

    // Method to handle sending messages
    private async void SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(currentMessage))
        {
            isInputDisabled = true;
            string history = getChatHistory();
            string newMessage = currentMessage;

            //Add message to Chat
            messages.Add(new Message { Text = currentMessage, IsUser = true });

            // Scroll to bottom after new messages are added
            await JSRuntime.InvokeVoidAsync("scrollChatToBottom", chatContentRef);

            await inputField.Clear();

            isTyping = true;

            // Scroll to bottom after new messages are added
            await JSRuntime.InvokeVoidAsync("scrollChatToBottom", chatContentRef);

            StateHasChanged();
            try{
                //Send request
                ApiResponseDto apiResponse = await apiClient.SendChatMessage(
                    new BlazorBoilerplate.Shared.Dto.Chat.SendChatMessageRequestDto {
                        ChatMessage = newMessage,
                        ChatHistory = history
                    }
                );
                SendChatMessageResponseDto responseDto = Newtonsoft.Json.JsonConvert.DeserializeObject<SendChatMessageResponseDto>(apiResponse.Result.ToString());

                //Add ChatbotMessage to Chat
                messages.Add(new Message { Text = responseDto.ResponseMessage , IsUser = false });
            }catch(OperationCanceledException){
                messages.Add(new Message { Text = "The server is taking too long to respond. Please try again later.", IsUser = false });
            }
            




            // Scroll to bottom after new messages are added
            await JSRuntime.InvokeVoidAsync("scrollChatToBottom", chatContentRef);

            isTyping = false;
            isInputDisabled = false;

            //Update UI after receiving Messages
            StateHasChanged();


            //Reset variable and inputField
            currentMessage = string.Empty;

            //Focus the inputfield to keep typing
            await inputField.FocusAsync();

        }
    }

    private void OpenChat()
    {
        isChatOpen = true;

        inputField.FocusAsync();
    }

    private void CloseChat()
    {
        isChatOpen = false;
    }

    private string getChatHistory()
    {
        //List<Message> history_messages = messages.Skip(1).ToList();
        //string history = Newtonsoft.Json.JsonConvert.SerializeObject(history_messages);
        string history = "";
        foreach (var message in messages){
            if (message.IsUser){
                history += "User: " + message.Text + "\n";
            }
            else{
                history += "Chatbot: " + message.Text + "\n";
            }
        }
        

        return history;
    }

    public class Message
    {
        public string Text { get; set; }
        public bool IsUser { get; set; }

    }
}

