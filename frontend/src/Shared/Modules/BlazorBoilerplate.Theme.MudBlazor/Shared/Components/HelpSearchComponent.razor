@using System.ComponentModel.DataAnnotations
@using BlazorBoilerplate.Shared.Models
@namespace BlazorBoilerplate.Theme.Material.Demo.Shared.Components
@inject NavigationManager navigationManager
@inject IHelpSearch helpSearch
@using MudBlazor

<MudAutocomplete Margin="Margin.Dense" Dense="true" Label="Help search ..." @bind-Value="State" Required="false" @bind-Text="@searchInputText"
				 SearchFunc="@SearchAsync" Immediate="true" ResetValueOnEmptyText="true"
				 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" T="HelpSearchEntry"
				 MaxLength=50 ListClass="SearchBarList" PopoverClass="SearchBarOverlay">
	<ItemTemplate Context="e">
		<MudIcon Style="font-size:15px;" Class="d-inline" Icon="@GetIconOfOrigin(e.Type)" Title="Favorite" />
		<MudText Style="font-size:15px;" Class="d-inline">
			<MudHighlighter Text="@e.OptionText" HighlightedText="@searchInputText?.Trim()" />
		</MudText>
	</ItemTemplate>
</MudAutocomplete>

@code {

	[Parameter]
	public EventCallback<string> OnStatesChanged { get; set; }

	[CascadingParameter]
	Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
	public string query { set; get; }

    private string _query;

	private string searchInputText;

	protected override async Task OnInitializedAsync()
	{
		var user = (await authenticationStateTask).User;

		if (user.Identity.IsAuthenticated)
		{
			await helpSearch.LoadSearchCache();
		}
	}

    private HelpSearchEntry State
    {
        set
        {
            if(value == null)
            {
                return;
            }

            OnStatesChanged.InvokeAsync(value.Title);

            query = value.Title;
            navigationManager.NavigateTo($"search/{query}");
        }
        get
        {
            return new HelpSearchEntry(query);
        }
    }

    private async Task<IEnumerable<HelpSearchEntry>> SearchAsync(string value)
    {
        HelpSearchEntry[] searchEntry;
        value = value?.Trim();

        if(string.IsNullOrWhiteSpace(value))
        {
            searchEntry = new HelpSearchEntry[]{};
        }
        else
        {
            searchEntry = new HelpSearchEntry[]{new HelpSearchEntry(value)};
        }

        return searchEntry.Concat(helpSearch.SearchTop10(value)).ToList();
	}

    private string GetIconOfOrigin(HelpSearchResultType origin)
    {
        switch (origin)
        {
            case HelpSearchResultType.ONTOLOGY:
            {
                return Icons.Material.Filled.Web;
            }
            case HelpSearchResultType.HELP_ARTICLE:
            {
                return Icons.Material.Filled.Article;
            }
            default:
            {
                return null;
            }
        }
    }
}
