@using System.ComponentModel.DataAnnotations
@using BlazorBoilerplate.Shared.Models
@namespace BlazorBoilerplate.Theme.Material.Demo.Shared.Components
@inject NavigationManager navigationManager
@inject IHelpSearch helpSearch
@using MudBlazor

	<MudAutocomplete Label="Help search ..." @bind-Value="State" Required="false" @bind-Text="@searchInputText"
					 SearchFunc="@SearchAsync" Immediate="true" CoerceValue="@coerceValue" ResetValueOnEmptyText="true"
					 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" T="HelpSearchEntry"
					 For="@(() => State)">
		<ItemTemplate Context="e">
			<MudIcon Class="d-inline" Icon="@GetIconOfOrigin(e.Type)" Title="Favorite" />
			<MudText Class="d-inline">
				<MudHighlighter Text="@e.OptionText" HighlightedText="@searchInputText.Trim()" />
			</MudText>
		</ItemTemplate>
	</MudAutocomplete>


@if (State != null && !string.IsNullOrWhiteSpace(State.Title))
{
	redirectOnSearch();
}

@code {
	private string searchInputText;
    [Parameter]
    public string query { get; set; }

    [Parameter]
    public bool HelpSite { get; set; }

	[Parameter]
	public EventCallback OnStatesChanged { get; set; }

	private void UpdateStates()
	{
		OnStatesChanged.InvokeAsync();
	}

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    private bool coerceValue;
    private bool success;
    private HelpSearchEntry State = new HelpSearchEntry("");

    protected override void OnInitialized()
    {
        State = new HelpSearchEntry(query);
    }

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            await helpSearch.LoadSearchCache();
        }
    }

    private void redirectOnSearch()
    {
        if (!navigationManager.Uri.Contains("search") & !HelpSite)
        {
            query = State.Title;
            navigationManager.NavigateTo($"search/{query}");
            State = new HelpSearchEntry(null);
        }
    }

    private async Task<IEnumerable<HelpSearchEntry>> SearchAsync(string value)
    {
        HelpSearchEntry[] searchEntry;
        value = value.Trim();

        if(string.IsNullOrWhiteSpace(value))
        {
            searchEntry = new HelpSearchEntry[]{};
        }
        else
        {
            searchEntry = new HelpSearchEntry[]{new HelpSearchEntry(value)};
        }

        return searchEntry.Concat(helpSearch.SearchTop10(value)).ToList();
	}

    private string GetIconOfOrigin(HelpSearchResultType origin)
    {
        switch (origin)
        {
            case HelpSearchResultType.ONTOLOGY:
            {
                return Icons.Material.Filled.Web;
            }
            case HelpSearchResultType.HELP_ARTICLE:
            {
                return Icons.Material.Filled.Article;
            }
            default:
            {
                return null;
            }
        }
    }
}
