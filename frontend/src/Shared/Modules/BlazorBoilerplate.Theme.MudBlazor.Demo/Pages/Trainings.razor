@page "/trainings"
@inject IStringLocalizer<Global> L
@inject ISnackbar Snackbar
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@attribute [Authorize]
@implements IDisposable
@using Radzen.Blazor
@using Radzen
@inject TooltipService tooltipService

<TopSection>
    <MudBreadcrumbs Items="_breadcrumbs" Class="mudbreadcrumbs"></MudBreadcrumbs>
</TopSection>

<MudStack AlignItems="MudBlazor.AlignItems.Center" Row="true" Class="mb-2" style="padding-top:50px">
    <MudIcon Size="Size.Large" Icon="@Icons.Filled.ModelTraining" />
    <LabelTooltip FontSize="TextStyle.H4" Label="Trainings" Text="@L["Trainings.Sidebar.tooltip"]" Position="Radzen.TooltipPosition.Bottom" URL="/help#trainings" ></LabelTooltip>
</MudStack>


<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <AllTrainings Trainings="_trainings" OnDeleteTrainingCompleted="@(async () => await LoadTrainings())" />
    </MudItem>
</MudGrid>

@code{
    private GetTrainingsResponseDto _trainings;
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>();
    private int _pageNumber = 1; //Pagination is 1 based
    private bool _stopTask = false;
    private int _pageSize = 10; // Default page size

    protected override async Task OnInitializedAsync()
    {
        await LoadTrainings();
        _breadcrumbs.Add(new BreadcrumbItem(L["Home"], "/", false, Icons.Material.Filled.Home));
        _breadcrumbs.Add(new BreadcrumbItem(L["Trainings"], null, true, Icons.Filled.ModelTraining));
        StateHasChanged();

    }

    public void Dispose()
    {
        _stopTask = true;
    }
    private async Task OnPageChanged(int pageNumber, int pageSize)
    {
        _pageNumber = pageNumber;
        _pageSize = pageSize;
        await LoadTrainings(_pageNumber, _pageSize);
    }

    private async Task LoadTrainings(int pageNumber = 1, int pageSize = 10)
    {
        try
        {
            var apiResponse = await apiClient.GetTrainings(new GetTrainingsRequestDto() { Short = true, Pagination = true, PageNumber = pageNumber, PageSize = pageSize });
            if (apiResponse.IsSuccessStatusCode)
            {
                _trainings = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTrainingsResponseDto>(apiResponse.Result.ToString());
                StateHasChanged();
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
