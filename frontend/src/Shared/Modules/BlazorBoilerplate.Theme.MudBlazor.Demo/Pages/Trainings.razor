@page "/trainings"
@inject IStringLocalizer<Global> L
@inject ISnackbar Snackbar
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@attribute [Authorize]

<TopSection>
    <MudBreadcrumbs Items="_breadcrumbs" Class="mudbreadcrumbs"></MudBreadcrumbs>
</TopSection>

<MudStack AlignItems="AlignItems.Center" Row="true" Class="mb-2" style="padding-top:30px">
    <MudIcon Size="Size.Large" Icon="@Icons.Filled.ModelTraining" />
    <LabelTooltip FontSize="Typo.h4" Label="Trainings" Text="Machine learning consists of two phases: training and prediction. During the training phase, a ML model is generated from a dataset. This page lists all trainings you have performed so far. You can open a past training, select an ML model and use it for predicting new cases." Position="Placement.Bottom"></LabelTooltip>
</MudStack>

<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <AllTrainings Trainings="_trainings" OnDeleteTrainingCompleted="@LoadTrainings"/>
    </MudItem>
</MudGrid>

@code{
    private GetTrainingsResponseDto _trainings;
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>();

    protected override async Task OnInitializedAsync()
    {
        await LoadTrainings();
        _breadcrumbs.Add(new BreadcrumbItem(L["Home"], null, false, Icons.Filled.Home));
        _breadcrumbs.Add(new BreadcrumbItem(L["Trainings"], null, true, Icons.Filled.ModelTraining));
        StateHasChanged();

    }
    private async Task LoadTrainings()
    {
        try
        {
            ApiResponseDto apiResponse = await apiClient.GetTrainings();

            if (apiResponse.IsSuccessStatusCode)
            {
                _trainings = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTrainingsResponseDto>(apiResponse.Result.ToString());
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
