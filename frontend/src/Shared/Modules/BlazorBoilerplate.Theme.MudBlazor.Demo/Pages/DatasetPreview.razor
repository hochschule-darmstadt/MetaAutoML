@page "/datasets/{id}/preview"
@inject IStringLocalizer<Global> L
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject NavigationManager NavManager
@attribute [Authorize]
@using Radzen
@using Radzen.Blazor

<TopSection>
    <MudBreadcrumbs Items="_breadcrumbs" Class="mudbreadcrumbs"></MudBreadcrumbs>
</TopSection>

<MudStack AlignItems="MudBlazor.AlignItems.Center" Row="true" Class="mb-2" style="padding-top:50px">
    <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.ListAlt" />
    <LabelTooltip FontSize="TextStyle.H4" Label=@_pageTitle
        Text="Here various adjustments can be made to the dataset. For example, the use of a header row can be activated or deactivated. Rows can be ignored by changing the 'Start row' field. The separator can be defined, the encoding can be changed (default UTF-8), the datetime format can be changed and so on."
        Position="Radzen.TooltipPosition.Bottom" URL="/help#datasetconfigure" />
</MudStack>

<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <DatasetPreviewFull Dataset="_dataset" />
    </MudItem>
</MudGrid>


@code {
    [Parameter]
    public string Id { get; set; }

    private string _pageTitle;
    private GetDatasetResponseDto _dataset;
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>();

    protected async override void OnInitialized()
    {
        await LoadDataset();
        _breadcrumbs.Add(new BreadcrumbItem(L["Home"], "/", false, Icons.Material.Filled.Home));
        _breadcrumbs.Add(new BreadcrumbItem(L["Datasets"], "/datasets", false, Icons.Material.Filled.ListAlt));
        _breadcrumbs.Add(new BreadcrumbItem(_pageTitle, "/datasets/" + Id, false, Icons.Material.Filled.ListAlt));
        _breadcrumbs.Add(new BreadcrumbItem(L["Preview"], null, true, Icons.Material.Filled.ListAlt));
        StateHasChanged();
    }
    private async Task LoadDataset()
    {
        try
        {
            GetDatasetRequestDto datasetRequest = new GetDatasetRequestDto()
                {
                    DatasetId = Id
                };
            ApiResponseDto apiResponse = await apiClient.GetDataset(datasetRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                _dataset = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetResponseDto>(apiResponse.Result.ToString());
                _pageTitle = L["Dataset: {0}", _dataset.Dataset.Name];
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

}
