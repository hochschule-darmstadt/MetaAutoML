@page "/datasets/{id}/preview"
@inject IStringLocalizer<Global> L
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject NavigationManager NavManager
@attribute [Authorize]

@if (!string.IsNullOrEmpty(_pageTitle))
{
    <TopSection>
        <Breadcrumbs>
            <Breadcrumb Title="Datasets" Link="/datasets" Icon="@Icons.Filled.ListAlt" />
            <Breadcrumb Title="@_pageTitle" Link="@("/datasets/" + Id)" Icon="@Icons.Filled.ListAlt" />
            <Breadcrumb Title="Preview" Icon="@Icons.Filled.ListAlt" />
        </Breadcrumbs>
    </TopSection>
}

<MudStack AlignItems="AlignItems.Center" Row="true" Class="mb-2">
    <MudIcon Size="Size.Large" Icon="@Icons.Filled.ListAlt" />
    <MudText Typo="Typo.h4">@_pageTitle</MudText>
</MudStack>

<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <DatasetPreviewFull Dataset="_dataset"/>
    </MudItem>
</MudGrid>


@code {
    [Parameter]
    public string Id { get; set; }

    private string _pageTitle;
    private GetDatasetResponseDto _dataset;

    protected async override void OnInitialized()
    {
        await LoadDataset();
    }
    private async Task LoadDataset()
    {
        try
        {
            GetDatasetRequestDto datasetRequest = new GetDatasetRequestDto()
                {
                    Identifier = Id
                };
            ApiResponseDto apiResponse = await apiClient.GetDataset(datasetRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                _dataset = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetResponseDto>(apiResponse.Result.ToString());
                _pageTitle = "Dataset " + _dataset.Name;
                StateHasChanged();
                StateHasChanged();
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

}
