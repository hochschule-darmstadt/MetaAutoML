@page "/trainings/{id}"
@inject IStringLocalizer<Global> L
@inject ISnackbar Snackbar
@inject IViewNotifier viewNotifier
@inject IApiClient apiClient
@attribute [Authorize]

<TopSection>
    <MudBreadcrumbs Items="_breadcrumbs" style="
    position: fixed!important;
    top: 65px;
    z-index: 999!important;
    width: 100%;">
    </MudBreadcrumbs>
</TopSection>

<MudStack AlignItems="AlignItems.Center" Row="true" Class="mb-2" style="padding-top:30px">
    <MudIcon Size="Size.Large" Icon="@Icons.Filled.ModelTraining"/>
    <MudText Typo="Typo.h4">@_pageTitle</MudText>
</MudStack>

<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <TrainingDetails Training="_training" />
    </MudItem>
</MudGrid>


@code {
    [Parameter]
    public string Id { get; set; }
    private string _pageTitle = "";
    private GetTrainingResponseDto _training;
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>();

    protected async override void OnInitialized()
    {
        await GetTraining();
        _breadcrumbs.Add(new BreadcrumbItem(L["Home"], "/", false, Icons.Filled.Home));
        _breadcrumbs.Add(new BreadcrumbItem(L["Trainings"], "/trainings", false, Icons.Filled.ModelTraining));
        _breadcrumbs.Add(new BreadcrumbItem(_pageTitle, null, true, Icons.Filled.ModelTraining));
        StateHasChanged();

    }

    private async Task GetTraining()
    {
        try
        {
            ApiResponseDto apiResponse = await apiClient.GetTraining(new GetTrainingRequestDto() { TrainingId = Id});

            if (apiResponse.IsSuccessStatusCode)
            {
                _training = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTrainingResponseDto>(apiResponse.Result.ToString());
                _pageTitle = L["Training {0}", _training.Training.RuntimeProfile.StartTime.ToString("dd/MM/yy HH:mm")];
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
