@page "/trainings/{id}"
@inject IStringLocalizer<Global> L
@inject ISnackbar Snackbar
@inject IViewNotifier viewNotifier
@inject IApiClient apiClient
@attribute [Authorize]

@if (!string.IsNullOrEmpty(_pageTitle))
{
    <TopSection>
        <Breadcrumbs>
            <Breadcrumb Title="Trainings" Link="/trainings"/>
            <Breadcrumb Title="@_pageTitle"/>
        </Breadcrumbs>
    </TopSection>
}

<MudStack AlignItems="AlignItems.Center" Row="true" Class="mb-2">
    <MudIcon Size="Size.Large" Icon="@Icons.Filled.ModelTraining"/>
    <MudText Typo="Typo.h4">@_pageTitle</MudText>
</MudStack>

<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <TrainingDetails Training="_training" />
    </MudItem>
</MudGrid>


@code {
    [Parameter]
    public string Id { get; set; }
    private string _pageTitle = "";
    private GetTrainingResponseDto _training;

    protected async override void OnInitialized()
    {
        await GetTraining();
    }

    private async Task GetTraining()
    {
        try
        {
            ApiResponseDto apiResponse = await apiClient.GetTraining(new GetTrainingRequestDto() { TrainingId = Id});

            if (apiResponse.IsSuccessStatusCode)
            {
                _training = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTrainingResponseDto>(apiResponse.Result.ToString());
                _pageTitle = "Training " + _training.StartTime.ToString("dd/MM/yy HH:mm");
                StateHasChanged();
                StateHasChanged();
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
