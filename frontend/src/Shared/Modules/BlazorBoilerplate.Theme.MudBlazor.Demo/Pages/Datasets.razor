@page "/datasets"
@inject IStringLocalizer<Global> L
@inject ISnackbar Snackbar
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IFileUploader fileUploader
@attribute [Authorize]
@implements IDisposable
@using Radzen
@using Radzen.Blazor

<TopSection>
    <MudBreadcrumbs Items="_breadcrumbs" Class="mudbreadcrumbs"></MudBreadcrumbs>
</TopSection>

<MudStack AlignItems="MudBlazor.AlignItems.Center" Row="true" Class="mb-2" style="padding-top:50px">
    <MudIcon Size="Size.Large" Icon="@Icons.Filled.ListAlt" />
    <LabelTooltip FontSize="TextStyle.H4" Label=@L["Datasets"] Text="A dataset contains data that can be used for machine learning. Different dataset types are distinguished, e.g., tabular data, texts or images.
This page lists all datasets you have uploaded so far to the OMA-ML platform. By clicking on a dataset, the respective dataset page is opened to inspect the dataset and start new trainings." Position="Radzen.TooltipPosition.Bottom"></LabelTooltip>

</MudStack>

<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <AllDatasets Datasets="_datasets" OnUploadCompletedCallback="@LoadDatasets" OnDeleteDatasetCompleted="@LoadDatasets"/>
    </MudItem>
</MudGrid>

@code{
    private GetDatasetsResponseDto _datasets;
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>();
    private int _pageNumber = 1; //Pagination is 1 based
    private bool _stopTask = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDatasets();
        fileUploader.OnUploadCompletedCallback = LoadDatasetsWithReRendering;
        _breadcrumbs.Add(new BreadcrumbItem(L["Home"], "/", false, Icons.Filled.Home));
        _breadcrumbs.Add(new BreadcrumbItem(L["Datasets"], null, true, Icons.Filled.ListAlt));
        StateHasChanged();
    }

    public void Dispose()
    {
        _stopTask = true;
    }

    private async Task LoadDatasetsWithReRendering()
    {
        await LoadDatasets();
        StateHasChanged();
    }
    private async Task LoadDatasets()
    {
        try
        {
            ApiResponseDto apiResponse;
            while (_stopTask == false)
            {
                apiResponse = await apiClient.GetDatasets(new GetDatasetsRequestDto() { Pagination = true, PageNumber = _pageNumber });

                if (apiResponse.IsSuccessStatusCode)
                {
                    var tmp = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetsResponseDto>(apiResponse.Result.ToString());
                    if (_datasets == null)
                    {
                        _datasets = new GetDatasetsResponseDto();
                    }
                    _datasets.Datasets.AddRange(tmp.Datasets);
                    StateHasChanged();
                    _pageNumber++;
                    //Check if we reached end of page
                    if (tmp.Datasets.Count < 20)
                    {
                        break;
                    }
                }
                else
                {
                    viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
                    break;
                }
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
