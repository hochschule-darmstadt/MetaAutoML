@page "/datasets/{datasetId}/models/{id}/explanation"
@page "/trainings/{trainingId}/models/{id}/explanation"
@page "/datasets/{datasetId}/modelsview/{listId}/explanation"
@inject IStringLocalizer<Global> L
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject NavigationManager NavManager
@attribute [Authorize]


<TopSection>
    <MudBreadcrumbs Items="_breadcrumbs">
    </MudBreadcrumbs>
</TopSection>

<MudStack AlignItems="AlignItems.Center" Row="true" Class="mb-2">
    <MudIcon Size="Size.Large" Icon="@Icons.Filled.Lightbulb" />
    <MudText Typo="Typo.h4">Analysis</MudText>
</MudStack>

<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <ModelExplanationFull Model="_model" />
    </MudItem>
</MudGrid>


@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string DatasetId { get; set; }
    [Parameter]
    public string TrainingId { get; set; }
    [Parameter]
    public string ListId { get; set; }
    private GetModelResponseDto _model;
    private GetTrainingResponseDto _training;
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>();

    protected async override void OnInitialized()
    {
        await LoadModel();
        _breadcrumbs.Add(new BreadcrumbItem("Home", "/", false, Icons.Filled.Home));
        if (ListId != null)
        {
            _breadcrumbs.Add(new BreadcrumbItem("Datasets", "/datasets", false, Icons.Filled.ListAlt));
            _breadcrumbs.Add(new BreadcrumbItem("Dataset " + _training.DatasetName, "/datasets/" + _model.Model.DatasetId, false, Icons.Filled.ListAlt));
            _breadcrumbs.Add(new BreadcrumbItem("Models", "/datasets/" + _model.Model.DatasetId + "/models", false, Icons.Filled.Lightbulb));
            _breadcrumbs.Add(new BreadcrumbItem("Model " + _model.Model.Model, "/datasets/" + _model.Model.DatasetId + "/models/" + _model.Model.Model, false, Icons.Filled.Lightbulb));
        }
        else if (TrainingId != null)
        {
            _breadcrumbs.Add(new BreadcrumbItem("Trainings", "/trainings", false, Icons.Filled.ModelTraining));
            _breadcrumbs.Add(new BreadcrumbItem(_training.StartTime.ToString("dd/MM/yy HH:mm"), "/trainings/" + _training.ID, false, Icons.Filled.ModelTraining));
            _breadcrumbs.Add(new BreadcrumbItem("Model " + _model.Model.Model, "/trainings/" + _training.ID + "/models/" + _model.Model.Model, false, Icons.Filled.Lightbulb));
        }
        else if (DatasetId != null)
        {
            _breadcrumbs.Add(new BreadcrumbItem("Datasets", "/datasets", false, Icons.Filled.ListAlt));
            _breadcrumbs.Add(new BreadcrumbItem("Dataset " + _training.DatasetName, "/datasets/" + _model.Model.DatasetId, false, Icons.Filled.ListAlt));
            _breadcrumbs.Add(new BreadcrumbItem("Model " + _model.Model.Model, "/datasets/" + _model.Model.DatasetId + "/modelsview/" + ListId, false, Icons.Filled.Lightbulb));
        }
        _breadcrumbs.Add(new BreadcrumbItem("Explanation", null, true, Icons.Filled.Lightbulb));
        StateHasChanged();
    }
    private async Task LoadModel()
    {
        try
        {
            ApiResponseDto apiResponse;
            //Get Model infos
            if (Id == null)
            {
                apiResponse = await apiClient.GetModel(new GetModelRequestDto() { ModelId = ListId });
            }
            else
            {
                apiResponse = await apiClient.GetModel(new GetModelRequestDto() { ModelId = Id });
            }

            if (apiResponse.IsSuccessStatusCode)
            {
                _model = Newtonsoft.Json.JsonConvert.DeserializeObject<GetModelResponseDto>(apiResponse.Result.ToString());

                //Get Training infos
                apiResponse = await apiClient.GetTraining(new GetTrainingRequestDto() { TrainingId = _model.Model.TrainingId });

                if (apiResponse.IsSuccessStatusCode)
                {
                    _training = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTrainingResponseDto>(apiResponse.Result.ToString());
                    viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
                }
                else
                {
                    viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
                }
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
