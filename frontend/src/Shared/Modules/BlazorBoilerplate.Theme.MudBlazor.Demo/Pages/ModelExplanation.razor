@page "/datasets/{datasetId}/models/{id}/explanation"
@page "/trainings/{trainingId}/models/{id}/explanation"
@page "/datasets/{datasetId}/modelsview/{listId}/explanation"
@inject IStringLocalizer<Global> L
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject NavigationManager NavManager
@attribute [Authorize]
@implements IDisposable
@inject IJSRuntime JSRuntime

<TopSection>
    <MudBreadcrumbs Items="_breadcrumbs" Class="mudbreadcrumbs"></MudBreadcrumbs>
</TopSection>

<MudStack AlignItems="AlignItems.Center" Row="true" Class="mb-2" style="padding-top:50px">
    <MudIcon Size="Size.Large" Icon="@Icons.Filled.Lightbulb" />
    <MudText Typo="Typo.h4">@L["Analysis"]</MudText>
</MudStack>

@if (string.IsNullOrEmpty(dashboardUrl))
{
   <MudGrid>
      <MudItem Class="d-flex align-center justify-center mud-width-full" xs="12">
      <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
      </MudItem>
   </MudGrid>
}
else{
    <MudGrid AlignItems="AlignItems.Stretch">
        <MudItem Class="d-flex align-center justify-center mud-width-full" xs="12">
            <MudButton OnClick="@RefreshDashboard">Refresh Dashboard</MudButton>
        </MudItem>
        <MudItem Class="d-flex align-center justify-center mud-width-full" Style="height: 100vh;" xs="12">
            <iframe id="dashboard_iframe" style="height:100%; width:100%" frameborder="0" src=@dashboardUrl> </iframe>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string DatasetId { get; set; }
    [Parameter]
    public string TrainingId { get; set; }
    [Parameter]
    public string ListId { get; set; }
    private string dashboardUrl = "";
    private string dashboardSessionId = "";
    private GetModelResponseDto dashboardAddress;
    private GetModelResponseDto _model;
    private GetDatasetResponseDto _dataset;
    private GetTrainingResponseDto _training;
    private ElementReference iframeRef;
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>();
    private bool wasIFrameErrorHandleAdded = false;

    private async void RefreshDashboard()
    {
        await JSRuntime.InvokeVoidAsync("reloadIframe", "dashboard_iframe");
    }

    protected async override void OnInitialized()
    {
        await LoadModel();
        await StartExplainerDashboard();
        Thread.Sleep(3500);
        _breadcrumbs.Add(new BreadcrumbItem("Home", "/", false, Icons.Filled.Home));
        if (ListId != null)
        {
            _breadcrumbs.Add(new BreadcrumbItem(L["Datasets"], "/datasets", false, Icons.Filled.ListAlt));
            _breadcrumbs.Add(new BreadcrumbItem(L["Dataset {0}", _dataset.Dataset.Name], "/datasets/" + _dataset.Dataset.Id, false, Icons.Filled.ListAlt));
            _breadcrumbs.Add(new BreadcrumbItem(L["Models"], "/datasets/" + _dataset.Dataset.Id + "/models", false, Icons.Filled.Lightbulb));
            _breadcrumbs.Add(new BreadcrumbItem(L["Explanation"], "/datasets/" + DatasetId + "/modelsview/" + ListId + "/explanation", false, Icons.Filled.Lightbulb));
        }
        else if (TrainingId != null)
        {
            _breadcrumbs.Add(new BreadcrumbItem(L["Trainings"], "/trainings", false, Icons.Filled.ModelTraining));
            _breadcrumbs.Add(new BreadcrumbItem(L["Training {0}", _training.Training.RuntimeProfile.StartTime.ToString("dd/MM/yy HH:mm")], "/trainings/" + _training.Training.Id, false, Icons.Filled.ModelTraining));
            _breadcrumbs.Add(new BreadcrumbItem(L["Explanation"], "/trainings/" + TrainingId + "/models/" + Id + "/explanation", false, Icons.Filled.Lightbulb));
        }
        else if (DatasetId != null)
        {
            _breadcrumbs.Add(new BreadcrumbItem(L["Datasets"], "/datasets", false, Icons.Filled.ListAlt));
            _breadcrumbs.Add(new BreadcrumbItem(L["Dataset {0}", _dataset.Dataset.Name], "/datasets/" + _dataset.Dataset.Id, false, Icons.Filled.ListAlt));
            _breadcrumbs.Add(new BreadcrumbItem(L["Explanation"], "/datasets/" + DatasetId + "/models/" + Id + "/explanation", false, Icons.Filled.Lightbulb));
        }
        _breadcrumbs.Add(new BreadcrumbItem(L["Model {0}", _model.Model.GetMlModelString()], null, true, Icons.Filled.Lightbulb));
        await StartExplainerDashboard();


        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        StopExplainerDashboard();
    }

    private async Task LoadModel()
    {
        try
        {
            ApiResponseDto apiResponse;
            //Get Model infos
            if (Id == null)
            {
                apiResponse = await apiClient.GetModel(new GetModelRequestDto() { ModelId = ListId });
            }
            else
            {
                apiResponse = await apiClient.GetModel(new GetModelRequestDto() { ModelId = Id });
            }

            if (apiResponse.IsSuccessStatusCode)
            {
                _model = Newtonsoft.Json.JsonConvert.DeserializeObject<GetModelResponseDto>(apiResponse.Result.ToString());

                //Get Training infos
                apiResponse = await apiClient.GetTraining(new GetTrainingRequestDto() { TrainingId = _model.Model.TrainingId });

                if (apiResponse.IsSuccessStatusCode)
                {
                    _training = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTrainingResponseDto>(apiResponse.Result.ToString());

                    apiResponse = await apiClient.GetDataset(new GetDatasetRequestDto() { DatasetId = _training.Training.DatasetId });

                    if (apiResponse.IsSuccessStatusCode)
                    {
                        _dataset = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetResponseDto>(apiResponse.Result.ToString());
                        viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
                        StateHasChanged();
                    }
                    else
                    {
                        viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
                    }
                }
                else
                {
                    viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
                }
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    private async Task StartExplainerDashboard()
    {
        try
        {
            ApiResponseDto apiResponse = await apiClient.StartExplainerDashboard(new StartDashboardRequestDto { ModelId = _model.Model.Id });
            var resppose = Newtonsoft.Json.JsonConvert.DeserializeObject<StartDashboardResponseDto>(apiResponse.Result.ToString());
            dashboardUrl = resppose.Url;
            dashboardSessionId = resppose.SessionId;
            //if (wasIFrameErrorHandleAdded == false)
            //{
            //    wasIFrameErrorHandleAdded = true;
            //    StateHasChanged();
            //    //await JSRuntime.InvokeVoidAsync("setTimeout", $"iframeInterop.addErrorEventListener('dashboard_iframe')", 0);
            //    await JSRuntime.InvokeVoidAsync("setupErrorHandling", "dashboard_iframe");
            //}

            if (apiResponse.IsSuccessStatusCode)
            {
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    private async Task StopExplainerDashboard()
    {
        try
        {
            ApiResponseDto apiResponse = await apiClient.StopExplainerDashboard(new StopDashboardRequestDto { SessionId = dashboardSessionId });

            if (apiResponse.IsSuccessStatusCode)
            {
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
