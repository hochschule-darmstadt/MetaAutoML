@page "/datasets/{datasetId}/models/{id}/explanation"
@page "/trainings/{trainingId}/models/{id}/explanation"
@page "/datasets/{datasetId}/modelsview/{listId}/explanation"
@inject IStringLocalizer<Global> L
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject NavigationManager NavManager
@attribute [Authorize]
@implements IDisposable

<TopSection>
    <MudBreadcrumbs Items="_breadcrumbs" Class="mudbreadcrumbs"></MudBreadcrumbs>
</TopSection>

<MudStack AlignItems="AlignItems.Center" Row="true" Class="mb-2" style="padding-top:50px">
    <MudIcon Size="Size.Large" Icon="@Icons.Filled.Lightbulb" />
    <MudText Typo="Typo.h4">@L["Analysis"]</MudText>
</MudStack>

@if (dashboard_address == null)
{
   <MudGrid>
      <MudItem Class="d-flex align-center justify-center mud-width-full" xs="12">
      <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
      </MudItem>
   </MudGrid>
}
else{ 
    <MudGrid AlignItems="AlignItems.Stretch" style="height:700px">
        <MudItem Class="d-flex align-center justify-center mud-width-full mud-height-full" xs="12">
            <iframe style="height:100%; width:100%" src=@dashboard_address> </iframe>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string DatasetId { get; set; }
    [Parameter]
    public string TrainingId { get; set; }
    [Parameter]
    public string ListId { get; set; }
    private string dashboard_address;
    private GetModelResponseDto dashboardAddress;
    private GetModelResponseDto _model;
    private GetTrainingResponseDto _training;
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>();

    protected async override void OnInitialized()
    {
        await LoadModel();
        await StartExplainerDashboard();

        Thread.Sleep(3500);

        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        StopExplainerDashboard();
    }

    private async Task LoadModel()
    {
        try
        {
            ApiResponseDto apiResponse;
            //Get Model infos
            if (Id == null)
            {
                apiResponse = await apiClient.GetModel(new GetModelRequestDto() { ModelId = ListId });
            }
            else
            {
                apiResponse = await apiClient.GetModel(new GetModelRequestDto() { ModelId = Id });
            }

            if (apiResponse.IsSuccessStatusCode)
            {
                _model = Newtonsoft.Json.JsonConvert.DeserializeObject<GetModelResponseDto>(apiResponse.Result.ToString());

                //Get Training infos
                apiResponse = await apiClient.GetTraining(new GetTrainingRequestDto() { TrainingId = _model.Model.TrainingId });

                if (apiResponse.IsSuccessStatusCode)
                {
                    _training = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTrainingResponseDto>(apiResponse.Result.ToString());
                    dashboard_address = "//192.168.0.227:" + (new String(Id.Where(Char.IsDigit).ToArray())).Substring(0,5);
                    viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
                    StateHasChanged();
                }
                else
                {
                    viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
                }
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    private async Task StartExplainerDashboard()
    {
        try
        {
            ApiResponseDto apiResponse = await apiClient.StartExplainerDashboard(new StartDashboardRequestDto { ModelId = _model.Model.Id });

            if (apiResponse.IsSuccessStatusCode)
            {
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    private async Task StopExplainerDashboard()
    {
        try
        {
            ApiResponseDto apiResponse = await apiClient.StopExplainerDashboard(new StopDashboardRequestDto { ModelId = _model.Model.Id });

            if (apiResponse.IsSuccessStatusCode)
            {
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
