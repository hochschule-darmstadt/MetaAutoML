@page "/"
@inject IStringLocalizer<Global> L
@inject ISnackbar Snackbar
@inject IViewNotifier viewNotifier
@inject IApiClient apiClient
@inject IFileUploader fileUploader
@attribute [Authorize]
@using Radzen
@using Radzen.Blazor
@inject NavigationManager navigationManager
@inject IDialogService dialogService
@using BlazorBoilerplate.Shared.Models.Account


<div data-form-zeroStep style="border: solid none; z-index: 999; position: relative; background-color: none; border-width: 0px;"></div>
<TopSection>
    <MudBreadcrumbs Style="z-index:1!important;" Items="_breadcrumbs" Class="mudbreadcrumbs"></MudBreadcrumbs>
</TopSection>

<MudStack AlignItems="MudBlazor.AlignItems.Center" Row="true" Class="mb-2" style="padding-top:50px">
    <MudIcon Size="Size.Large" Icon="@Icons.Filled.Home" />
    <LabelTooltip FontSize="TextStyle.H4" Label=@_pageTitle Text="A dataset contains data that can be used for machine learning. Different dataset types are distinguished, e.g., tabular data, texts or images. This page lists all datasets you have uploaded so far to the OMA-ML platform. By clicking on a dataset, the respective dataset page is opened to inspect the dataset and start new trainings." Position="Radzen.TooltipPosition.Bottom"></LabelTooltip>

</MudStack>

<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <MudCard Elevation="5">
            <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@L["Overview"]</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudPaper Height="100px" Elevation="0">
                    @if (_overviewInfos == null)
                    {
                        <DataLoaderSpinner />
                    }
                    else
                    {
                        <MudGrid>
                            <MudItem xs="3" sm="3" md="3">
                                <MudText Typo="Typo.body2">@L["My datasets {0}", _overviewInfos.TotalDatasetAmount]</MudText>
                            </MudItem>
                            <MudItem xs="3" sm="3" md="3">
                                <MudText Typo="Typo.body2">@L["My trainings {0}", _overviewInfos.TotalTrainingAmount]</MudText>
                            </MudItem>
                            <MudItem xs="3" sm="3" md="3">
                                <MudText Typo="Typo.body2">@L["My models {0}", _overviewInfos.TotalModelAmount]</MudText>
                            </MudItem>
                            <MudItem xs="3" sm="3" md="3">
                                <MudText Typo="Typo.body2">@L["Executing trainings {0}", _overviewInfos.RunningTrainingAmount]</MudText>
                            </MudItem>
                        </MudGrid>
                    }
                </MudPaper>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="6">
        <RecentDatasets Datasets="@_datasets" OnUploadCompletedCallback="@LoadRecentDataset" />
    </MudItem>
    <MudItem xs="12" sm="6" md="6">
        <RecentTrainings Trainings="@_trainings" />
    </MudItem>
</MudGrid>

<UserTour></UserTour>

@code {
    [Inject]
    private ITourService TourService { get; set; }


    [Inject]
    AuthenticationStateProvider authStateProvider { get; set; }

    protected UserViewModel userViewModel;
    IdentityAuthenticationStateProvider identityAuthenticationStateProvider;

    private GetTrainingsResponseDto _trainings;
    private GetDatasetsResponseDto _datasets;
    private GetHomeOverviewInformationResponseDto _overviewInfos;
    private string _pageTitle;
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>();

    protected override async Task OnInitializedAsync()
    {
        await LoadRecentTrainings();
        _pageTitle = L["Home"];
        _breadcrumbs.Add(new BreadcrumbItem(L["Home"], null, true, Icons.Filled.Home));
        fileUploader.OnUploadCompletedCallback = LoadDatasetWithReRendering;
        identityAuthenticationStateProvider = (IdentityAuthenticationStateProvider)authStateProvider;

        userViewModel = await identityAuthenticationStateProvider.GetUserViewModel();

        if (userViewModel.IsTutorialEnabled == true)
        {
            userViewModel.IsTutorialEnabled = false;
            await UpdateUser();
            // await GTourService.StartTour("FormGuidedTour", "zeroStep");
            TourService.navigateToNextPage("zeroStep", navigationManager.ToAbsoluteUri(" ").AbsoluteUri);
        }
        else
        {
            await TourService.checkIfUserTourIsActivatedAndStartTour(navigationManager.Uri);
        }
        StateHasChanged();
    }


    protected async Task UpdateUser()
    {
        try
        {
            var apiResponse = await identityAuthenticationStateProvider.UpdateUser(userViewModel);

            if (apiResponse.IsSuccessStatusCode)
                viewNotifier.Show(L["Operation Successful"], ViewNotifierType.Success);
            else
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    private async Task LoadRecentTrainings()
    {
        try
        {
            ApiResponseDto apiResponse = await apiClient.GetTrainings(new GetTrainingsRequestDto() { Short = true, OnlyLastDay = true });

            if (apiResponse.IsSuccessStatusCode)
            {
                _trainings = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTrainingsResponseDto>(apiResponse.Result.ToString());

                await LoadRecentDataset();
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    private async Task LoadDatasetWithReRendering()
    {
        await LoadRecentDataset();
        StateHasChanged();
    }

    private async Task LoadRecentDataset()
    {
        try
        {
            GetDatasetsRequestDto request = new GetDatasetsRequestDto();
            ApiResponseDto apiResponse = await apiClient.GetDatasets(new GetDatasetsRequestDto() { OnlyFiveRecent = true });

            if (apiResponse.IsSuccessStatusCode)
            {
                _datasets = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetsResponseDto>(apiResponse.Result.ToString());
                await LoadOverviewInformation();
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
    private async Task LoadOverviewInformation()
    {
        try
        {
            ApiResponseDto
            apiResponse = await apiClient.GetHomeOverviewInformation();

            if (apiResponse.IsSuccessStatusCode)
            {
                _overviewInfos = Newtonsoft.Json.JsonConvert.DeserializeObject<GetHomeOverviewInformationResponseDto>(apiResponse.Result.ToString());
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
