@page "/datasets/{id}/train"
@inject IStringLocalizer<Global> L
@inject ISnackbar Snackbar
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject NavigationManager NavManager
@attribute [Authorize]

<TopSection>
    <MudBreadcrumbs Items="_breadcrumbs">
    </MudBreadcrumbs>
</TopSection>



<MudStack AlignItems="AlignItems.Center" Row="true" Class="mb-2">
    <MudIcon Size="Size.Large" Icon="@Icons.Filled.ModelTraining"/>
    <MudText Typo="Typo.h4">@L["Train"]</MudText>
</MudStack>

@if (_dataset == null)
{
    <DataLoaderSpinner />
}
else
{
    @switch (_dataset.Dataset.Type.ID)
    {
        case ":time_series":
        case ":text":
        case ":tabular":
        case ":time_series_longitudinal":
            <MuddyWizard WizardFinished="@OnWizardFinished">
                <MuddyWizardPanel Title="@L["Dataset preparation"]">
                    <PrepareTabularDataset Dataset="@_dataset" @bind-StartAutoMlRequest="@_automlRequest" />
                </MuddyWizardPanel>
                <MuddyWizardPanel Title="@L["Configuration"]">
                    <TaskConfiguration Dataset="@_dataset" @bind-StartAutoMlRequest="@_automlRequest" />
                </MuddyWizardPanel>
            </MuddyWizard>
            break;
        case ":image":
            <MuddyWizard WizardFinished="@OnWizardFinished">
                <MuddyWizardPanel Title="@L["Configuration"]">
                    <TaskConfiguration Dataset="@_dataset" @bind-StartAutoMlRequest="@_automlRequest" />
                </MuddyWizardPanel>
            </MuddyWizard>
            break;
    }
}

@code {
    [Parameter]
    public string Id { get; set; }

    private GetDatasetResponseDto _dataset;
    private string _datasetTitle = "";
    private CreateTrainingRequestDto _automlRequest;
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>();

    protected async override void OnInitialized()
    {
        _automlRequest = new CreateTrainingRequestDto();
        _automlRequest.DatasetId = Id;
        await LoadDataset();
        _breadcrumbs.Add(new BreadcrumbItem(L["Home"], "/", false, Icons.Filled.Home));
        _breadcrumbs.Add(new BreadcrumbItem(L["Datasets"], "/datasets", false, Icons.Filled.ListAlt));
        _breadcrumbs.Add(new BreadcrumbItem(_datasetTitle, "/datasets/" + _dataset.Dataset.Id, false, Icons.Filled.ListAlt));
        _breadcrumbs.Add(new BreadcrumbItem(L["Train"], null, true, Icons.Filled.ModelTraining));
        StateHasChanged();

    }
    private async Task LoadDataset()
    {
        try
        {
            GetDatasetRequestDto datasetRequest = new GetDatasetRequestDto()
                {
                    DatasetId = Id
                };
            ApiResponseDto apiResponse = await apiClient.GetDataset(datasetRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                _dataset = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetResponseDto>(apiResponse.Result.ToString());
                _datasetTitle = L["Dataset {0}", _dataset.Dataset.Name];
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
    private async void OnWizardFinished()
    {
        try
        {
            if (string.IsNullOrEmpty(_automlRequest.Configuration.Task))
            {
                viewNotifier.Show("No task selected", ViewNotifierType.Error, L["Operation Failed"]);
                return;
            }
            if (((_dataset.Dataset.Type.ID == ":tabular") || (_dataset.Dataset.Type.ID == ":test") || (_dataset.Dataset.Type.ID == ":time_series") || (_dataset.Dataset.Type.ID == ":time_series_longitudinal")) && string.IsNullOrEmpty(_automlRequest.Configuration.Target))
            {
                viewNotifier.Show("No target selected", ViewNotifierType.Error, L["Operation Failed"]);
                return;
            }
            CreateTrainingResponseDto automlResponse;
            ApiResponseDto apiResponse = await apiClient.CreateTraining(_automlRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                automlResponse = Newtonsoft.Json.JsonConvert.DeserializeObject<CreateTrainingResponseDto>(apiResponse.Result.ToString());
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
                NavManager.NavigateTo("/trainings/" + automlResponse.TrainingIdentifier);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
