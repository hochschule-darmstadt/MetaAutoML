@page "/datasets/{datasetId}/models/{id}"
@page "/trainings/{trainingId}/models/{id}"
@page "/datasets/{datasetId}/modelsview/{listId}"
@inject IStringLocalizer<Global> L
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject NavigationManager NavManager
@attribute [Authorize]

@if (_model != null && _training != null)
{
    <TopSection>
        <Breadcrumbs>
            @if (ListId != null)
            {
                <Breadcrumb Title="Datasets" Link="/datasets" Icon="@Icons.Filled.ListAlt" />
                <Breadcrumb Title="@("Dataset " + _training.DatasetName)" Link="@("/datasets/" + _model.Model.DatasetId)" Icon="@Icons.Filled.ListAlt"/>
                <Breadcrumb Title="Models" Link="@("/datasets/" + _model.Model.DatasetId + "/models")" Icon="@Icons.Filled.Lightbulb" />
            }
            else if (TrainingId != null)
            {
                <Breadcrumb Title="Trainings" Link="/trainings" Icon="@Icons.Filled.ModelTraining" />
                <Breadcrumb Title="@(_training.StartTime.ToString("dd/MM/yy HH:mm"))" Link="@("/trainings/" + _training.ID)" Icon="@Icons.Filled.ModelTraining"/>
            }
            else if (DatasetId != null)
            {
                <Breadcrumb Title="Datasets" Link="/datasets" Icon="@Icons.Filled.ListAlt"/>
                <Breadcrumb Title="@("Dataset " + _training.DatasetName)" Link="@("/datasets/" + _model.Model.DatasetId)" Icon="@Icons.Filled.ListAlt"/>
            }
            <Breadcrumb Title="@("Model " + _model.Model.Model)" Icon="@Icons.Filled.Lightbulb" />
        </Breadcrumbs>
    </TopSection>
}

<MudStack AlignItems="AlignItems.Center" Row="true" Class="mb-2">
    <MudIcon Size="Size.Large" Icon="@Icons.Filled.Lightbulb" />
    @if (_model != null)
    {
        <MudText Typo="Typo.h4">@("Model " + _model.Model.Model)</MudText>
    }
</MudStack>

<MudGrid Elevation="5">
    <MudItem xs="12" sm="12" md="12">
        <MudCard Elevation="5">
            <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
                <CardHeaderContent >
                    <MudText Typo="Typo.h6">Overview</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudPaper Height="100px" Elevation="0">
                    @if ((_model == null) && (_training == null))
                    {
                        <MudGrid>
                            <MudItem Class="d-flex align-center justify-center mud-width-full" xs="12">
                                <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                            </MudItem>
                        </MudGrid>
                    }
                    else
                    {
                        <MudGrid>
                            <MudItem xs="3" sm="3" md="3">
                                <MudText Typo="Typo.body1">Dataset: <a href="@NavManager.ToAbsoluteUri("datasets/" + @_training.DatasetId).AbsoluteUri" Style="cursor: pointer;">@_training.DatasetName</a></MudText>
                                <MudText Typo="Typo.body1">Start: @_training.StartTime.ToString("dd/MM/yyy HH:mm")</MudText>
                                <MudText Typo="Typo.body1">Status: @_model.Model.Status</MudText>
                                <MudText Typo="Typo.body1">Total training time: @_model.Model.Runtime s</MudText>
                            </MudItem>
                            <MudItem xs="3" sm="3" md="3">
                                <MudText Typo="Typo.body1">AutoML solution: @_model.Model.Name</MudText>
                                <MudText Typo="Typo.body1">ML library: @_model.Model.Library</MudText>
                                <MudText Typo="Typo.body1">Model: @_model.Model.Model</MudText>
                                <MudText Typo="Typo.body1">Training: <a href="@NavManager.ToAbsoluteUri("trainings/" + @_training.ID).AbsoluteUri" Style="cursor: pointer;">@_training.StartTime.ToString("dd/MM/yyy")</a></MudText>
                            </MudItem>
                            <MudItem xs="3" sm="3" md="3">
                                <MudText Typo="Typo.body1">Metric test: @String.Format("{0:0.00}", _model.Model.TestScore)</MudText>
                                <MudText Typo="Typo.body1">Prediction time per sample: @String.Format("{0:0}", _model.Model.Predictiontime) ms</MudText>
                            </MudItem>
                            <MudItem xs="3" sm="3" md="3">
                            </MudItem>
                        </MudGrid>
                    }
                </MudPaper>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="6" sm="6" md="6">
        <OnlinePrediction Model="_model"/>
    </MudItem>
    <MudItem xs="6" sm="6" md="6">
        <DownloadMlPipeline Model="_model"/>
    </MudItem>
    <MudItem xs="6" sm="6" md="6">
        <ModelExplanation Model="_model" />
    </MudItem>
    <MudItem xs="3" sm="3" md="3">
        <ModelConfiguration Training="_training" Model="_model"/>
    </MudItem>
    <MudItem xs="3" sm="3" md="3">
        <ModelDetail Model="_model"/>
    </MudItem>
</MudGrid>


@code{
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string DatasetId { get; set; }
    [Parameter]
    public string TrainingId { get; set; }
    [Parameter]
    public string ListId { get; set; }

    private string _pageTitle = "Model";
    private GetAutoMlModelResponseDto _downloadModel;
    private GetModelResponseDto _model;
    private GetTrainingResponseDto _training;

    protected async override void OnInitialized()
    {
        await LoadModel();
    }
    private async Task LoadModel()
    {
        try
        {
            ApiResponseDto apiResponse;
            //Get Model infos
            if (Id == null)
            {
                apiResponse = await apiClient.GetModel(new GetModelRequestDto() { ModelId = ListId });
            }
            else
            {
                apiResponse = await apiClient.GetModel(new GetModelRequestDto() { ModelId = Id });
            }

            if (apiResponse.IsSuccessStatusCode)
            {
                _model = Newtonsoft.Json.JsonConvert.DeserializeObject<GetModelResponseDto>(apiResponse.Result.ToString());

                //Get Training infos
                apiResponse = await apiClient.GetTraining(new GetTrainingRequestDto() { TrainingId = _model.Model.TrainingId });

                if (apiResponse.IsSuccessStatusCode)
                {
                    _training = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTrainingResponseDto>(apiResponse.Result.ToString());
                    StateHasChanged();
                    StateHasChanged();
                    viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
                }
                else
                {
                    viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
                }
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}

