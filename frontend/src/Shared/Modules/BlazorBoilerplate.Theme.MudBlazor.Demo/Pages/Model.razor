@page "/datasets/{datasetId}/models/{id}"
@page "/trainings/{trainingId}/models/{id}"
@page "/datasets/{datasetId}/modelsview/{listId}"
@inject IStringLocalizer<Global> L
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IFileUploader fileUploader
@inject NavigationManager NavManager
@attribute [Authorize]

<TopSection>
    <MudBreadcrumbs Items="_breadcrumbs" Class="mudbreadcrumbs"></MudBreadcrumbs>
</TopSection>

<MudStack AlignItems="AlignItems.Center" Row="true" Class="mb-2" style="padding-top:50px">
    <MudIcon Size="Size.Large" Icon="@Icons.Filled.Lightbulb" />
    @if (_model != null)
    {
        <LabelTooltip FontSize="Typo.h4" Label=@L["Model {0}", _model.Model.GetMlModelString()] Text="An ML model is the result of ML training and condenses information inherent in the training dataset. It can be used for making predictions on new cases. On this page, you can inspect and use the trained ML model. You may use the model for predicting new cases within the OMA-ML platform without having to install anything (panel center left). Alternatively, you may download the ML model within a pipeline and include it into a custom Python application (panel center right).  There are various ways of getting additional information about the model: an overview (top panel), detailed graphical analyses using Explainable AI (panel bottom left), the configuration that lead to the model (panel bottom center), and detail output of the AutoML solution (panel bottom right)." Position="Placement.Bottom"></LabelTooltip>
    }
</MudStack>

<MudGrid Elevation="5">
    <MudItem xs="12" sm="12" md="12">
        <MudCard Elevation="5">
            <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
                <CardHeaderContent >
                    <MudText Typo="Typo.h6">@L["Overview"]</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudPaper Elevation="0" Class="text-card-content mud-full-height">
                    @if ((_model == null) && (_training == null) && (_dataset == null))
                    {
                        <MudGrid>
                            <MudItem Class="d-flex align-center justify-center mud-width-full" xs="12">
                                <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                            </MudItem>
                        </MudGrid>
                    }
                    else
                    {
                        <MudGrid Class="mud-full-height mud-full-width" Style="height:100%">
                            <MudItem xs="3" sm="3" md="3">
                                <MudText Typo="Typo.body1" Style=" display: flex;">@L["Dataset: "] <MudLink Href="@NavManager.ToAbsoluteUri("datasets/" + @_training.Training.DatasetId).AbsoluteUri" Style="cursor: pointer; display: flex;"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ListAlt" Style="margin-right: 4px;" />@_dataset.Dataset.Name</MudLink></MudText>
                                <MudText Typo="Typo.body1">@L["Start: {0}", _training.Training.RuntimeProfile.StartTime.ToString("dd/MM/yyyy HH:mm")]</MudText>
                                <MudText Typo="Typo.body1">@L["Status: {0}", _model.Model.Status]</MudText>
                                <MudText Typo="Typo.body1">@L["Training time: {0}", _model.Model.Status == "busy" ? DateTime.UtcNow.Subtract(_model.Model.RuntimeProfile.StartTime).TotalMinutes.ToString("0") : _model.Model.RuntimeProfile.EndTime.Subtract(_model.Model.RuntimeProfile.StartTime).TotalSeconds.ToString("0")]</MudText>
                            </MudItem>
                            <MudItem xs="3" sm="3" md="3">
                                <MudText Typo="Typo.body1" Class="text-card-content">@L["AutoML solution: {0}", _model.Model.AutoMlSolution.Properties.ContainsKey("skos:prefLabel") ? _model.Model.AutoMlSolution.Properties["skos:prefLabel"] : ""]</MudText>
                                <MudText Typo="Typo.body1" Class="text-card-content">@L["ML library: {0}", _model.Model.GetMlLibraryString()]</MudText>
                                <MudText Typo="Typo.body1" Class="text-card-content">@L["Model: {0}", _model.Model.GetMlModelString()]</MudText>
                                <MudText Typo="Typo.body1" Class="text-card-content" Style=" display: flex;">@L["Training: "]<MudLink Href="@NavManager.ToAbsoluteUri("trainings/" + @_training.Training.Id).AbsoluteUri" Class="text-card-content" Style="cursor: pointer; display: flex;"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ModelTraining" Style="margin-right: 4px;" />@_training.Training.RuntimeProfile.StartTime.ToString("dd/MM/yyy")</MudLink></MudText>
                            </MudItem>
                            <MudItem xs="3" sm="3" md="3">
                                <MudText Typo="Typo.body1">@L["Prediction time: {0}", String.Format("{0:0}", _model.Model.PredictionTime)]</MudText>
                                <MudText Typo="Typo.body1">@L["Training emissions: {0} kg CO2-eq", String.Format("{0:0.00000}", _model.Model.Emissions)]</MudText>
                            </MudItem>
                            <MudItem xs="3" sm="3" md="3">
                                <MudSelect Label="@L["Metric"]" T="string" @bind-Value=SelectedMetric>
                                        @foreach (var metric in _model.Model.Metrics)
                                        {
                                            <MudSelectItem Value="@metric.Name.ID">
                                                <MudText Typo="Typo.body2">@metric.Name.Properties["skos:prefLabel"]</MudText>
                                            </MudSelectItem>
                                        }
                                </MudSelect>
                                <MudText Typo="Typo.body1">
                                    @if (!String.IsNullOrEmpty(SelectedMetric))
                                    {
                                        @if (_model.Model.Metrics.Where(x => x.Name.ID == SelectedMetric).Count() == 1)
                                        {
                                            @(String.Format("{0:0.00}", _model.Model.Metrics.Where(x => x.Name.ID == SelectedMetric).First().Score))
                                        }
                                    }
                                </MudText>
                            </MudItem>
                        </MudGrid>
                    }
                </MudPaper>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="8">
        @if (_model != null)
        {
            <OnlinePrediction Model="_model" />
        }
    </MudItem>
    <MudItem xs="4">
        <DownloadMlPipeline Model="_model"/>
    </MudItem>
    <MudItem xs="12" sm="12" md="4">
        <ModelExplanationShort Model="_model" ExplanationPagePath="@_explanationPagePath" />
    </MudItem>
    <MudItem xs="12" sm="12" md="4">
        <ModelConfiguration Training="_training" Model="_model" Dataset="_dataset"/>
    </MudItem>
    <MudItem xs="12" sm="12" md="4">
        <ModelDetail Model="_model"/>
    </MudItem>
</MudGrid>


@code{
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string DatasetId { get; set; }
    [Parameter]
    public string TrainingId { get; set; }
    [Parameter]
    public string ListId { get; set; }

    private string SelectedMetric { get; set; } = "";
    private string _explanationPagePath = "";
    private string _pageTitle = "Model";
    private DownloadModelResponseDto _downloadModel;
    private GetModelResponseDto _model;
    private GetTrainingResponseDto _training;
    private GetDatasetResponseDto _dataset;
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>();

    protected async override void OnInitialized()
    {
        await LoadModel();
        _breadcrumbs.Add(new BreadcrumbItem("Home", "/", false, Icons.Filled.Home));
        if (ListId != null)
        {
            _breadcrumbs.Add(new BreadcrumbItem(L["Datasets"], "/datasets", false, Icons.Filled.ListAlt));
            _breadcrumbs.Add(new BreadcrumbItem(L["Dataset {0}", _dataset.Dataset.Name], "/datasets/" + _dataset.Dataset.Id, false, Icons.Filled.ListAlt));
            _breadcrumbs.Add(new BreadcrumbItem(L["Models"], "/datasets/" + _dataset.Dataset.Id + "/models", false, Icons.Filled.Lightbulb));
            _explanationPagePath = "/datasets/" + DatasetId + "/modelsview/" + ListId + "/explanation";
        }
        else if (TrainingId != null)
        {
            _breadcrumbs.Add(new BreadcrumbItem(L["Trainings"], "/trainings", false, Icons.Filled.ModelTraining));
            _breadcrumbs.Add(new BreadcrumbItem(L["Training {0}", _training.Training.RuntimeProfile.StartTime.ToString("dd/MM/yy HH:mm")], "/trainings/" + _training.Training.Id, false, Icons.Filled.ModelTraining));
            _explanationPagePath = "/trainings/" + TrainingId + "/models/" + Id + "/explanation";
        }
        else if (DatasetId != null)
        {
            _breadcrumbs.Add(new BreadcrumbItem(L["Datasets"], "/datasets", false, Icons.Filled.ListAlt));
            _breadcrumbs.Add(new BreadcrumbItem(L["Dataset {0}", _dataset.Dataset.Name], "/datasets/" + _dataset.Dataset.Id, false, Icons.Filled.ListAlt));
            _explanationPagePath = "/datasets/" + DatasetId + "/models/" + Id + "/explanation";
        }
        _breadcrumbs.Add(new BreadcrumbItem(L["Model {0}", _model.Model.GetMlModelString()], null, true, Icons.Filled.Lightbulb));
        fileUploader.OnUploadCompletedCallback = LoadModel;
        StateHasChanged();
    }
    private async Task LoadModel()
    {
        try
        {
            ApiResponseDto apiResponse;
            //Get Model infos
            if (Id == null)
            {
                apiResponse = await apiClient.GetModel(new GetModelRequestDto() { ModelId = ListId });
            }
            else
            {
                apiResponse = await apiClient.GetModel(new GetModelRequestDto() { ModelId = Id });
            }

            if (apiResponse.IsSuccessStatusCode)
            {
                _model = Newtonsoft.Json.JsonConvert.DeserializeObject<GetModelResponseDto>(apiResponse.Result.ToString());

                //Get Training infos
                apiResponse = await apiClient.GetTraining(new GetTrainingRequestDto() { TrainingId = _model.Model.TrainingId });

                if (apiResponse.IsSuccessStatusCode)
                {
                    _training = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTrainingResponseDto>(apiResponse.Result.ToString());
                    //Get Training infos
                    apiResponse = await apiClient.GetDataset(new GetDatasetRequestDto() { DatasetId = _training.Training.DatasetId });

                    if (apiResponse.IsSuccessStatusCode)
                    {
                        _dataset = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetResponseDto>(apiResponse.Result.ToString());
                        viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
                    }
                    else
                    {
                        viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
                    }
                }
                else
                {
                    viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
                }
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}

