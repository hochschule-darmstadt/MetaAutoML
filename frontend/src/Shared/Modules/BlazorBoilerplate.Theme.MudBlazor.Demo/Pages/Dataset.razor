@page "/datasets/{id}"
@inject IStringLocalizer<Global> L
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject NavigationManager NavManager
@attribute [Authorize]

<TopSection>
    <MudBreadcrumbs Items="_breadcrumbs" style="
    position: fixed!important;
    top: 65px;
    z-index: 999!important;
    width: 100%;">
    </MudBreadcrumbs>
</TopSection>

<MudStack AlignItems="AlignItems.Center" Row="true" Class="mb-2" style="padding-top:30px">
    <MudIcon Size="Size.Large" Icon="@Icons.Filled.ListAlt" />
    <MudText Typo="Typo.h4">@_pageTitle</MudText>
</MudStack>

<MudGrid>
    <MudItem xs="9" sm="9" md="9">
        <MudCard Elevation="5">
            <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@L["Overview"]</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudPaper Height="100px" Elevation="0">
                    @if (_dataset == null)
                    {
                        <DataLoaderSpinner />
                    }
                    else
                    {
                        <MudGrid>
                            <MudItem xs="3" sm="3" md="3">
                                <MudText Typo="Typo.body1">@L["Name: {0}", _dataset.Dataset.Name] </MudText>
                                <MudText Typo="Typo.body1">@L["Dataset type: {0}", L[_dataset.Dataset.Type.Properties.ContainsKey("skos:prefLabel") ? _dataset.Dataset.Type.Properties["skos:prefLabel"] : ""]]</MudText>
                            </MudItem>
                            <MudItem xs="3" sm="3" md="3">
                                <MudText Typo="Typo.body1">@L["Date: {0}", _dataset.Dataset.Analysis.ContainsKey("creation_date") ? _dataset.Dataset.Analysis["creation_date"].ToString("yyyy-MM-dd") : ""]</MudText>
                            </MudItem>
                            <MudItem xs="3" sm="3" md="3">
                                <MudText Typo="Typo.body1">@L["File Size: {0}", FormatBytes(_dataset.Dataset.Analysis.ContainsKey("size_bytes") ? _dataset.Dataset.Analysis["size_bytes"] : 0)]</MudText>
                                @if ((@_dataset.Dataset.Type.ID == ":tabular") || (@_dataset.Dataset.Type.ID == ":text") || (@_dataset.Dataset.Type.ID == ":time_series") || (@_dataset.Dataset.Type.ID == ":time_series_longitudinal"))
                                {
                                    if (_dataset.Dataset.Analysis == null)
                                    {
                                        <MudText Typo="Typo.body1">@L["Number of rows: {0}", "unknown"]</MudText>
                                        <MudText Typo="Typo.body1">@L["Number of columns: {0}", "unknown"]</MudText>
                                    }
                                    else if (_dataset.Dataset.Analysis.Count != 0)
                                    {
                                        <MudText Typo="Typo.body1">@L["Number of rows: {0}", _dataset.Dataset.Analysis.ContainsKey("number_of_rows") ? _dataset.Dataset.Analysis["number_of_rows"] : "0"]</MudText>
                                        <MudText Typo="Typo.body1">@L["Number of columns: {0}", _dataset.Dataset.Analysis.ContainsKey("number_of_columns") ? _dataset.Dataset.Analysis["number_of_columns"] : "0"]</MudText>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body1">@L["Number of rows: {0}", "unknown"]</MudText>
                                        <MudText Typo="Typo.body1">@L["Number of columns: {0}", "unknown"]</MudText>
                                    }
                                }
                            </MudItem>
                        </MudGrid>
                    }
                </MudPaper>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="3" sm="3" md="3">
     
            @if (_dataset != null)
            {
                @if ((_readDatasetFailed == false) && (_dataset.Dataset.Analysis["size_bytes"] != 0))
                {
                    <NewTraining Dataset="@_dataset" />
                }
                else
                {
                    <NewTrainingDatasetNotReadable />
                }
            }
    
    </MudItem>
    <MudItem xs="12" sm="12" md="12">
            <DatasetPreviewShort @bind-ReadDatasetFailed="@_readDatasetFailed" Dataset="@_dataset" /> 
    </MudItem>
    <MudItem xs="3" sm="3" md="3">
        <DatasetAnalysisShort Dataset="_dataset" />
    </MudItem>
    <MudItem xs="9" sm="9" md="9">
        <Top3Models Dataset="_dataset" />
    </MudItem>


</MudGrid>


@code{
    [Parameter]
    public string Id { get; set; }
    private bool _readDatasetFailed;
    private string _pageTitle;
    private GetDatasetResponseDto _dataset;
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>();
    protected async override void OnInitialized()
    {
        await LoadDataset();
        _breadcrumbs.Add(new BreadcrumbItem(L["Home"], "/", false, Icons.Filled.Home));
        _breadcrumbs.Add(new BreadcrumbItem(L["Datasets"], "/datasets", false, Icons.Filled.ListAlt));
        _breadcrumbs.Add(new BreadcrumbItem(_pageTitle, null, true, Icons.Filled.ListAlt));
        StateHasChanged();
    }
    private async Task LoadDataset()
    {
        try
        {
            GetDatasetRequestDto datasetRequest = new GetDatasetRequestDto()
                {
                    DatasetId = Id
                };
            ApiResponseDto apiResponse = await apiClient.GetDataset(datasetRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                _dataset = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetResponseDto>(apiResponse.Result.ToString());
                _pageTitle = L["Dataset {0}", _dataset.Dataset.Name];
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
    public string FormatBytes(long bytes)
    {
      const int scale = 1024;
      string[] orders = new string[] { "GB", "MB", "KB", "Bytes" };
      long max = (long)Math.Pow(scale, orders.Length - 1);

      foreach (string order in orders)
      {
        if ( bytes > max )
          return string.Format("{0:##.##} {1}", decimal.Divide( bytes, max ), order);

        max /= scale;
      }
      return "0 Bytes";
    }
}

