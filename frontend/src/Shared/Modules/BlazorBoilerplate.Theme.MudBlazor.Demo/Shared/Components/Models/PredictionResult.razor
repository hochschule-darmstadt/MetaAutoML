@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IJSRuntime JS
@inject IStringLocalizer<Global> L
<MudDialog>
    <DialogContent>
        <MudPaper>
            <MudTable Items="@TableContent" style="width:stretch; overflow-y: scroll" class="mat-elevation-z5" AllowSelection="false" Dense="true">

                <HeaderContent>
                    @foreach (var column in TableHeader.Split(","))
                    {
                        <MudTh>@column</MudTh>
                    }
                </HeaderContent>
                <RowTemplate>
                    @foreach (var column in @context.Split(","))
                    {
                        <MudTd>@column</MudTd>
                    }
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        @if(TableRowCount > 20)
        {
            <MudText>@L["{0} more entries available", (TableRowCount - 20)]</MudText>
        }
        <MudButton StartIcon="@Icons.Filled.CloudDownload" OnClick="@(DownlaodPrediction)" Variant="MudBlazor.Variant.Filled" Color="Color.Secondary" Size="Size.Small">@L["Download"]</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small" OnClick="Submit">Close</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string TableHeader { get; set; }
    [Parameter] public string[] TableContent { get; set; }
    [Parameter] public long TableRowCount { get; set; }
    [Parameter] public string PredictionId { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));

    async void DownlaodPrediction()
    {
        try
        {
            ApiResponseDto apiResponse = await apiClient.DownloadPrediction(new DownloadPredictionRequestDto() { PredictionId = PredictionId });
            if (apiResponse.IsSuccessStatusCode)
            {
                DownloadPredictionResponseDto response = Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadPredictionResponseDto>(apiResponse.Result.ToString());

                var stream = new MemoryStream(response.Content);
                using var streamRef = new DotNetStreamReference(stream: stream);
                await JS.InvokeVoidAsync("downloadFileFromStream", "predictions.csv", streamRef);
                StateHasChanged();
                Submit();
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

}
