@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IJSRuntime JS
@inject IStringLocalizer<Global> L


<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent >
            <MudText Typo="Typo.h6">@L["Download ML pipeline"]</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudPaper Height="100px" Elevation="0">
            @if (Model == null)
            {
                <DataLoaderSpinner />
            }
            else
            {
                if (Model.Model.Status == "completed")
                {
                    <MudStack>
                        <MudButton OnClick="@DownloadModel" 
                            Variant="Variant.Filled" 
                            StartIcon="@Icons.Filled.CloudDownload"
                            Color="Color.Secondary">
                            @L["Download model"]
                        </MudButton>
                    </MudStack>
                }
                else
                {
                    <MudStack>
                        <MudButton Disabled="true"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Filled.CloudDownload"
                           Color="Color.Secondary">
                            @L["Download model"]
                        </MudButton>
                    </MudStack>
                }
            }
        </MudPaper>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public GetModelResponseDto Model
    { 
        get
        {
            return _model;
        } 
        set
        {
            _model = value;
            StateHasChanged();
        } 
    }
    private GetModelResponseDto _model;
    private async void DownloadModel()
    {
        try
        {
            ApiResponseDto apiResponse = await apiClient.DownloadModel(new DownloadModelRequestDto { ModelId = Model.Model.Id });

            if (apiResponse.IsSuccessStatusCode)
            {
                DownloadModelResponseDto file = Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadModelResponseDto>(apiResponse.Result.ToString());
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
                var stream = new MemoryStream(file.Content);
                using var streamRef = new DotNetStreamReference(stream: stream);
                await JS.InvokeVoidAsync("downloadFileFromStream", file.Name, streamRef);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
