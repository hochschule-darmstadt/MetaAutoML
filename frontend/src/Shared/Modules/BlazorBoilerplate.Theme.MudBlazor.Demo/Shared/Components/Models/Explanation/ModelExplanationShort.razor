@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Net.Http.Headers
@using BlazorBoilerplate.Theme.Material
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IJSRuntime JS
@inject IStringLocalizer<Global> L
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager
@using Radzen
@using Radzen.Blazor

<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent>
            <LabelTooltip FontSize="TextStyle.H6" Label=@L["Explainable AI"] Text="Here you get detailed graphical analyses of this ML model using Explainable AI (XAI)." Position="Radzen.TooltipPosition.Bottom"></LabelTooltip>
        </CardHeaderContent>
    </MudCardHeader>

    <MudCardContent>
        <MudPaper Height="250px" Elevation="0">
            @if (_explanation == null)
            {
                <DataLoaderSpinner />
            }
            else
            {
                <MudStack JustifyContent="center">
                        @if (string.IsNullOrEmpty(ExplanationPagePath))
                        {
                            <ButtonTooltip Text="No URL available for the dashboard." Position="Placement.Top">
                                <MudButton Disabled="true"
                                           Variant="MudBlazor.Variant.Filled"
                                           StartIcon="@Icons.Material.Outlined.Analytics"
                                           Color="Color.Secondary"
                                           Class="full-width">
                                    @L["Open dashboard"]
                                </MudButton>
                            </ButtonTooltip>
                        }
                        else if (_explanation.Status == "dashboard_failed")
                        {
                            <ButtonTooltip Text="The dashboard failed to load." Position="Placement.Top">
                                <MudButton Disabled="true"
                                           Variant="MudBlazor.Variant.Filled"
                                           StartIcon="@Icons.Material.Outlined.Analytics"
                                           Color="Color.Secondary"
                                           Class="full-width">
                                    @L["Open dashboard"]
                                </MudButton>
                            </ButtonTooltip>
                        }
                        else if (_explanation.Status == "db_error")
                        {
                            <ButtonTooltip Text="There was an error with the database." Position="Placement.Top">
                                <MudButton Disabled="true"
                                           Variant="MudBlazor.Variant.Filled"
                                           StartIcon="@Icons.Material.Outlined.Analytics"
                                           Color="Color.Secondary"
                                           Class="full-width">
                                    @L["Open dashboard"]
                                </MudButton>
                            </ButtonTooltip>
                            <MudButton Variant="MudBlazor.Variant.Filled"
                                       StartIcon="@Icons.Material.Outlined.Refresh"
                                       Color="Color.Primary"
                                       OnClick="LoadModelExplanation"
                                       Class="full-width">
                                @L["Refresh"]
                            </MudButton>
                        }
                        else if (_explanation.Status == "finished")
                        {
                            <div class="container">
                            <ButtonTooltip Text="Opens the dashboard for analyzing this ML model (Explainable AI)." Position="Placement.Top">
                                <MudButton Disabled="ModelEmpty"
                                           Variant="MudBlazor.Variant.Filled"
                                           StartIcon="@Icons.Material.Outlined.Analytics"
                                           Color="Color.Secondary"
                                           Href="@NavManager.ToAbsoluteUri(ExplanationPagePath).AbsoluteUri"
                                           Class="max-width">
                                    @L["Open dashboard"]
                                </MudButton>
                            </ButtonTooltip>
                            </div>
                        }
                </MudStack>
            }
        </MudPaper>
    </MudCardContent>
</MudCard>
<style>
    .container{
  width: 100%;
  height: 200px;
  display: flex;
  justify-content: center;
  align-items: center;
}
    .max-width{
  justify-content: center;
  align-items: center;
    }
</style>
@code {
    [Parameter]
    public string ExplanationPagePath { get; set; }
    public string AutoMlSolutionID = "";
    private GetModelResponseDto _model;
    private GetModelExplanationResponseDto _explanation;
    private bool isPreviewRequestRunning = false;

    [Parameter]
    public GetModelResponseDto Model
    {
        get
        {
            return _model;
        }
        set
        {
            _model = value;
            if (_model != null)
            {
                LoadModelExplanation();
            }
            StateHasChanged();
        }
    }

    private bool ModelEmpty = true;

    private async Task LoadModelExplanation()
    {
        try
        {
            if (isPreviewRequestRunning)
            {
                return;
            }
            isPreviewRequestRunning = true;
            int counter = 0;
            foreach(KeyValuePair<string, string> el in _model.Model.AutoMlSolution.Properties)
            {
                counter++;
                if (counter == 2)
                {
                    AutoMlSolutionID = el.Value.ToString();
                    break;
                }
            }
            // Dummy data for explanation status for testing purposes
            _explanation = new GetModelExplanationResponseDto
                {
                    Status = "finished" // Change this value for testing different scenarios: "dashboard_failed", "db_error", "finished"
                };

            if(_model.Model.DashboardStatus != "" && _model.Model.DashboardStatus != " "){
                ModelEmpty=false;
            }
            // Uncomment and use actual API call for real implementation
            /*
            GetModelExplanationRequestDto modelRequest = new GetModelExplanationRequestDto()
            {
                ModelId = _model.Model.Id,
                GetShortPreview = true
            };
            ApiResponseDto apiResponse = await apiClient.GetModelExplanation(modelRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                _explanation = Newtonsoft.Json.JsonConvert.DeserializeObject<GetModelExplanationResponseDto>(apiResponse.Result.ToString());
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
                // Set _explanation.Status based on the type of error
                _explanation.Status = "dashboard_failed"; // or "db_error"
            }
            */

            StateHasChanged();
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
            _explanation.Status = "db_error"; // Assume database error in case of exception
        }
        isPreviewRequestRunning = false;
    }

    string GetImage(byte[] image)
    {
        var imageSrc = Convert.ToBase64String(image);
        return $"data:image/svg+xml;base64,{imageSrc}";
    }

    string GetHtml(byte[] text)
    {
        var html = Encoding.Default.GetString(text);
        return html;
    }
}
