@inject IStringLocalizer<Global> L
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject NavigationManager NavManager

<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent >
            <MudText Typo="Typo.h6">@L["Top 3 models"]</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            @if (Dataset != null)
            {
                <MudButton Href="@("/datasets/" + Dataset.Dataset.Id + "/models")"
                    Variant="Variant.Filled" 
                    EndIcon="@Icons.Material.Filled.ReadMore" 
                    Color="Color.Secondary"
                    Size="Size.Small"
                       Style="margin-top: 8px">@L["More"]</MudButton>
            }
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudPaper Height="215px" Elevation="0">
            @if (_top3Models == null)
            {
                <DataLoaderSpinner />
            }
            else
            {
                <MudTable Items="@_top3Models.Models">
                    <HeaderContent>
                        <MudTh>@L["Name"]</MudTh>
                        <MudTh>@L["Model"]</MudTh>
                        <MudTh>@L["Library"]</MudTh>
                        <MudTh>@L["Test score"]</MudTh>
                        <MudTh>@L["Prediction time per sample"]</MudTh>
                        <MudTh>@L["Total training time"]</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            @if (context.AutoMlSolution.Properties.ContainsKey("skos:prefLabel"))
                            {
                                @context.AutoMlSolution.Properties["skos:prefLabel"]
                            }
                        </MudTd>
                        <MudTd>
                            <MudLink Href="@NavManager.ToAbsoluteUri("datasets/" + Dataset.Dataset.Id + "/models/" + @context.Id).AbsoluteUri" Style="cursor: pointer; display: flex">
                                <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ModelTraining" Style="margin-right: 4px;" />
                                @if (context.MlModelType.Properties.ContainsKey("skos:prefLabel"))
                                {
                                    @context.MlModelType.Properties["skos:prefLabel"]
                                }
                                
                                </MudLink>
                        </MudTd>
                        <MudTd>
                            @if (context.MlLibrary.Properties.ContainsKey("skos:prefLabel"))
                            {
                                <MudText>@context.MlLibrary.Properties["skos:prefLabel"]</MudText>
                            }
                        </MudTd>
                        <MudTd >@String.Format("{0:0.00}", context.TestScore)</MudTd>
                        <MudTd >@String.Format("{0:0}", context.PredictionTime) ms</MudTd>
                        <MudTd>@(context.RuntimeProfile.EndTime.Subtract(context.RuntimeProfile.StartTime).TotalSeconds.ToString("0 s"))</MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudPaper>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public GetDatasetResponseDto Dataset 
    { 
        get
        {
            return _dataset;
        }
        set
        {
            _dataset = value;
            if (_dataset != null)
            {
                LoadTrainings();
            }
        }
    }
    private GetDatasetResponseDto _dataset;
    private GetModelsResponseDto _top3Models;

    private async Task LoadTrainings()
    {
        try
        {
            ApiResponseDto apiResponse = await apiClient.GetModels(new GetModelsRequestDto() { DatasetId = Dataset.Dataset.Id, Top3 = true });

            if (apiResponse.IsSuccessStatusCode)
            {
                _top3Models = Newtonsoft.Json.JsonConvert.DeserializeObject<GetModelsResponseDto>(apiResponse.Result.ToString());
                StateHasChanged();
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
