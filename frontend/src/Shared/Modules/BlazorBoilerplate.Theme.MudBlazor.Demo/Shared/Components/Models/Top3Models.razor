@inject IStringLocalizer<Global> L
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject NavigationManager NavManager

<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent >
            <MudText Typo="Typo.h6">@L["Top 3 models"]</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            @if (Dataset != null)
            {
                <ButtonTooltip Text="Click here to to display all models that have been trained so far on this dataset." Position="Placement.Left">
                    <MudButton Href="@("/datasets/" + Dataset.Dataset.Id + "/models")"
                            Variant="Variant.Filled"
                            StartIcon="@Icons.Material.Filled.ReadMore"
                            Color="Color.Secondary"
                            Size="Size.Small"
                            Disabled="@(_modelsCount == 0)"
                            Style="margin-top: 8px">@L["More"]</MudButton>
                </ButtonTooltip>
            }
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudPaper Height="250px" Elevation="0">
            @if (_models == null)
            {
                <DataLoaderSpinner />
            }
            else if (_modelsCount > 0)
            {
                <MudTable Items="@_models.Models" FixedHeader="true" style="width:stretch" class="mat-elevation-z5" AllowSelection="false" Dense="true" Height="245px" CustomHeader="true">
                    <HeaderContent>
                        <MudTHeadRow>
                            <MudTh>@L["Name"]</MudTh>
                            <MudTh>@L["Model"]</MudTh>
                            <MudTh>@L["ML Library"]</MudTh>
                            <MudTh>
                                <MudTableSortLabel SortBy="@(new Func<ModelDto, object>(x=> SelectedMetric != "" ?
                                                                                                        x.Metrics.Count() > 0 ?
                                                                                                            x.Metrics.Where(y => y.Name.ID == SelectedMetric).First().Score.ToString()
                                                                                                            : ""
                                                                                                        : ""))">@L["Metric"]</MudTableSortLabel>
                            </MudTh>
                            <MudTh>@L["Prediction time"]</MudTh>
                            <MudTh>@L["Training time"]</MudTh>
                        </MudTHeadRow>
                        <MudTHeadRow>
                            <MudTh></MudTh>
                            <MudTh></MudTh>
                            <MudTh></MudTh>
                            <MudTh>
                                <MudSelect T="string" @bind-Value=SelectedMetric>
                                    @foreach (var metric in _metrics)
                                    {
                                        <MudSelectItem Value="@metric.Name.ID">
                                            <MudText Typo="Typo.body2">@metric.Name.Properties["skos:prefLabel"]</MudText>
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            </MudTh>
                            <MudTh></MudTh>
                            <MudTh></MudTh>
                        </MudTHeadRow>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            @if (context.AutoMlSolution.Properties.ContainsKey("skos:prefLabel"))
                            {
                                @context.AutoMlSolution.Properties["skos:prefLabel"]
                            }
                        </MudTd>
                        <MudTd>
                            <MudLink Href="@NavManager.ToAbsoluteUri("datasets/" + Dataset.Dataset.Id + "/models/" + @context.Id).AbsoluteUri" Style="cursor: pointer; display: flex">
                                <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ModelTraining" Style="margin-right: 4px;" />
                                @context.GetMlModelString()
                                </MudLink>
                        </MudTd>
                        <MudTd>
                             <MudText>@context.GetMlLibraryString()</MudText>
                        </MudTd>
                        <MudTd >
                            @if (!String.IsNullOrEmpty(SelectedMetric))
                            {
                                @if (context.Metrics.Where(x => x.Name.ID == SelectedMetric).Count() == 1)
                                {
                                    @(String.Format("{0:0.00}", context.Metrics.Where(x => x.Name.ID == SelectedMetric).First().Score))
                                }
                            }
                        </MudTd>
                        <MudTd>@(String.Format("{0:0}", context.PredictionTime * 1000)) Âµs</MudTd>
                        <MudTd>@(context.RuntimeProfile.EndTime.Subtract(context.RuntimeProfile.StartTime).TotalMinutes.ToString("0 min"))</MudTd>
                    </RowTemplate>
                </MudTable>
            }
            else
            {
                <MudText Typo="Typo.body1" Class="text-card-content">@L["There are no models yet because no training has been carried out."]</MudText>
            }
        </MudPaper>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public GetDatasetResponseDto Dataset
    {
        get
        {
            return _dataset;
        }
        set
        {
            _dataset = value;
            if (_dataset != null)
            {
                LoadTrainings();
            }
        }
    }
    private GetDatasetResponseDto _dataset;
    private GetModelsResponseDto _models;
    private List<Metric> _metrics = new List<Metric>();
    private string SelectedMetric { get; set; } = "";
    private int _modelsCount = 0;

    private async Task LoadTrainings()
    {
        try
        {
            ApiResponseDto apiResponse = await apiClient.GetModels(new GetModelsRequestDto() { DatasetId = Dataset.Dataset.Id, Top3 = true });

            if (apiResponse.IsSuccessStatusCode)
            {
                _models = Newtonsoft.Json.JsonConvert.DeserializeObject<GetModelsResponseDto>(apiResponse.Result.ToString());
                _modelsCount = _models.Models.Count;
                UpdateMetricsList();
                StateHasChanged();
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    private void UpdateMetricsList()
    {
        foreach (var model in _models.Models)
        {
            foreach (var metric in model.Metrics)
            {
                if (_metrics.Where(x => x.Name.Properties["skos:prefLabel"] == metric.Name.Properties["skos:prefLabel"]).Count() == 0)
                {
                    _metrics.Add(metric);
                }
            }
        }
        _metrics = _metrics.OrderBy(x => x.Name.Properties["skos:prefLabel"]).ToList();
        if (_metrics.Count > 0 && SelectedMetric == "")
        {
            SelectedMetric = _metrics[0].Name.ID;
        }
    }
}
