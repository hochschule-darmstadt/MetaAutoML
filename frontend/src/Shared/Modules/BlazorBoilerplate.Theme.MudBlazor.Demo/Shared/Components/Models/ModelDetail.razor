@inject IStringLocalizer<Global> L
@using Radzen
@using Radzen.Blazor
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop;
@using Microsoft.JSInterop.WebAssembly;

<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent>
            <LabelTooltip FontSize="TextStyle.H6" Label=@L["Details"] Text="Here you can inspect the detail output of the AutoML solution that has been used for training this ML model." Position="Radzen.TooltipPosition.Bottom"></LabelTooltip>
        </CardHeaderContent>
               <CardHeaderActions>
                @if (Model != null)
                {
                    <MudButton
                        Variant="MudBlazor.Variant.Filled"
                        StartIcon="@Icons.Material.Filled.ReadMore"
                        Color="Color.Secondary"
                        Size="Size.Small"
                        Style="margin-top: 8px"
                        OnClick="@(() => OpenLogDialog(Model.Model.StatusMessages))">@L["More"]</MudButton>
                }
            </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudPaper Height="250px" Elevation="0">
            @if (Model == null)
            {
                <DataLoaderSpinner />
            }
            else
            {
                <div style="height:250px;overflow: auto;">
                    <MudPaper Elevation="0">
                        <MudStack>
                            @{
                                int lineNumber = 1;
                                @foreach (var item in Model.Model.StatusMessages)
                                {
                                    <div style="display: flex; align-items: flex-start;">
                                        <MudText Style="font-family: 'Courier New', Courier, monospace; font-size: 1rem; color: gray; text-align: right; margin-right: 10px;">@(lineNumber++.ToString("D2"))</MudText>
                                        <MudText Style="font-family: 'Courier New', Courier, monospace; font-size: 1rem; white-space: nowrap;">@item</MudText>
                                    </div>
                                }
                            }
                        </MudStack>
                    </MudPaper>
                </div>
            }
        </MudPaper>
    </MudCardContent>
</MudCard>

<MudDialog Class="log-container" @bind-IsVisible="_dialogVisible" MaxWidth="MaxWidth.Large" FullWidth="true" CloseButton="true">
    <TitleContent>
        <div style="display: flex; align-items: center; justify-content: space-between; width: 100%;">
            <RadzenText Style="font-family:Arial, Helvetica, sans-serif; font-weight:150; margin-right: 10rem;" Text=@L["Detail output of the AutoML solution"] TextStyle="TextStyle.H6" />
            <MudTextField @bind-Value="@searchQuery" Placeholder=@L["Search Output ..."] Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
        </div>
    </TitleContent>
    <DialogContent>
        @if (_logMessages != null)
        {
            <MudPaper Elevation="0">
                <div id="logMessagesContainer" style="overflow-y: none;">
                    @{
                        int lineNumber = 1;
                        @foreach (var item in _logMessages.Where(m => m.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)))
                        {
                            <div @ref="lastElementRef" style="display: flex; align-items: flex-start;">
                                <MudText Style="font-family: 'Courier New', Courier, monospace; font-size: 1rem; color: gray; text-align: right; margin-right: 10px;">@(lineNumber++.ToString("D2"))</MudText>
                                <MudText Style="font-family: 'Courier New', Courier, monospace; font-size: 1rem; overflow: auto;">@item</MudText>
                            </div>
                        }
                    }
                </div>
            </MudPaper>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="CloseDialog">@L["Close"]</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public GetModelResponseDto Model
    {
        get
        {
            return _model;
        }
        set
        {
            _model = value;
            StateHasChanged();
        }
    }
    private GetModelResponseDto _model;

    private bool _dialogVisible;
    private List<string> _logMessages;
    private bool _scrollToBottom;
    private string searchQuery = string.Empty;

    private void OpenLogDialog(List<string> logMessages)
    {
        _dialogVisible = true;
        _logMessages = logMessages;
        _scrollToBottom = true;
        StateHasChanged();
    }

    private ElementReference lastElementRef;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_scrollToBottom)
        {
            _scrollToBottom = false;
            @* await ScrollToBottom(); *@
        }
    }
    private async Task ScrollToBottom()
    {
        if (lastElementRef.Id != null)
        {
            await Task.Delay(100);
            await JSRuntime.InvokeAsync<object>("scrollIntoView", lastElementRef, true);
        }
    }

    private void CloseDialog()
    {
        _dialogVisible = false;
    }
}
