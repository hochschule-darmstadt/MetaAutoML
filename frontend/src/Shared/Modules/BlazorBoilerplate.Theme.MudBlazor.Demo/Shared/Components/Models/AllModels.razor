@inject IStringLocalizer<Global> L
@inject NavigationManager NavManager


<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent >
            <MudText Typo="Typo.h6">All Models</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        @if (Models == null)
        {
                <DataLoaderSpinner />
        }
        else
        {
            <MudTable Items="@Models.Models" style="width:stretch" class="mat-elevation-z5" AllowSelection="false" Dense="true" Filter="new Func<ModelDto,bool>(FilterFunc)">                
                <ToolBarContent>
                    <MudTextField @bind-Value="searchString" Placeholder="@L["Search by name, status, lib or AutoML system"]" Adornment="Adornment.Start"
                                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="@(new Func<ModelDto, object>(x=>x.MlModelType.Properties["skos:prefLabel"]))">@L["Name"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ModelDto, object>(x=>x.Status)">@L["Status"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="@(new Func<ModelDto, object>(x=>x.MlLibrary.Properties[" skos:prefLabel"]))">@L["Library"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="@(new Func<ModelDto, object>(x=>x.AutoMl.Properties[" skos:prefLabel"]))">@L["AutoML solution"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ModelDto, object>(x=>x.TestScore)">@L["Test score"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ModelDto, object>(x=>x.Runtime)">@L["Runtime"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ModelDto, object>(x=>x.PredictionTime)">@L["Prediction time"]</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd >
                        <MudLink Href="@NavManager.ToAbsoluteUri("datasets/" + @context.DatasetIdentifier + "/modelsview/" + @context.Identifier).AbsoluteUri" Style="cursor: pointer; display: flex;">
                            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ModelTraining" Style="margin-right: 4px;" />
                            @(context.MlModelType.Properties.ContainsKey("skos:prefLabel") ? context.MlModelType.Properties["skos:prefLabel"] : "")
                            </MudLink>
                    </MudTd>
                    <MudTd>@context.Status</MudTd>
                    <MudTd>
                        @(context.MlLibrary.Properties.ContainsKey("skos:prefLabel") ? context.MlLibrary.Properties["skos:prefLabel"] : "")
                    </MudTd>
                    <MudTd>
                        @(context.AutoMl.Properties.ContainsKey("skos:prefLabel") ? context.AutoMl.Properties["skos:prefLabel"] : "")
                    </MudTd>
                    <MudTd>@context.TestScore</MudTd>
                    <MudTd>@context.Runtime</MudTd>
                    <MudTd>@context.PredictionTime</MudTd>
                    <MudTd><ModelMenu Dataset="@context"/></MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager  />
                </PagerContent>
            </MudTable>
        }
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public GetModelsResponseDto Models
    { 
        get
        {
            return _models;
        } 
        set
        {
            _models = value;
            if(_models != null)
            {
                StateHasChanged();
            }
        } 
    }
    private string searchString = "";
    private GetModelsResponseDto _models;

    private bool FilterFunc(ModelDto element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.AutoMl.Properties["skos:prefLabel"].Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.MlLibrary.Properties["skos:prefLabel"].Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.MlLibrary.Properties["skos:prefLabel"].Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    } 

}
