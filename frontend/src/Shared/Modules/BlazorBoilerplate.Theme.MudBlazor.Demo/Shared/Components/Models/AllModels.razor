@inject IStringLocalizer<Global> L
@inject NavigationManager NavManager
@using Radzen
@using Radzen.Blazor

<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent>
            <MudText Typo="Typo.h6">All Models</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        @if (Models == null)
        {
            <DataLoaderSpinner />
        }
        else
        {
            <MudTable Items="@Models.Models" style="width:stretch" class="mat-elevation-z5" AllowSelection="false" Dense="true" Filter="new Func<ModelDto,bool>(FilterFunc)" CustomHeader="true">
                <ToolBarContent>
                    <MudTextField @bind-Value="searchString" Placeholder="@L["Search by name, status, lib, AutoML system"]" Adornment="Adornment.Start"
                                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable="true"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTHeadRow>
                        <MudTh><MudTableSortLabel SortBy="@(new Func<ModelDto, object>(x=>x.AutoMlSolution.Properties["skos:prefLabel"]))">@L["AutoML solution"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<ModelDto, object>(x=>x.Status)">@L["Status"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="@(new Func<ModelDto, object>(x=>x.GetMlModelString()))">@L["Model"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="@(new Func<ModelDto, object>(x=>x.GetMlLibraryString()))">@L["ML Library"]</MudTableSortLabel></MudTh>
                        <MudTh>
							<MudTableSortLabel SortBy="@(new Func<ModelDto, object>(x=> SelectedMetric != "" ?
                                                                                                    x.Metrics.Count() > 0 ?
                                                                                                        x.Metrics.Where(y => y.Name.ID == SelectedMetric).First().Score.ToString()
                                                                                                        : ""
                                                                                                    : ""))">@L["Metric"]</MudTableSortLabel>
						</MudTh>

						<MudTh>
							<MudTableSortLabel SortBy="new Func<ModelDto, object>(x=>x.RuntimeProfile)">
								<LabelTooltip Label=@L["Training time"] FontSize="TextStyle.Body1" Text="@L["Trainings.Training.TrainingTime.Label.tooltip"]" Position="Radzen.TooltipPosition.Top"></LabelTooltip>
							</MudTableSortLabel>
						</MudTh>
						<MudTh>
							<MudTableSortLabel SortBy="new Func<ModelDto, object>(x=>x.Emissions)">
								<LabelTooltip Label=@L["Training emissions"] FontSize="TextStyle.Body1" Text="@L["Trainings.Training.Emissions.Label.tooltip"]" Position="Radzen.TooltipPosition.Top"></LabelTooltip>

							</MudTableSortLabel>
						</MudTh>
						<MudTh>
							<MudTableSortLabel SortBy="new Func<ModelDto, object>(x=>x.PredictionTime)">
								<LabelTooltip Label=@L["Prediction time"] FontSize="TextStyle.Body1" Text="@L["Trainings.Training.PredictionTime.Label.tooltip"]" Position="Radzen.TooltipPosition.Top"></LabelTooltip>
							</MudTableSortLabel>
						</MudTh>
						<MudTh></MudTh>
					</MudTHeadRow>
					<MudTHeadRow>
						<MudTh></MudTh>
						<MudTh></MudTh>
						<MudTh></MudTh>
						<MudTh></MudTh>
						<MudTh>
							<MudSelect Disabled=@IsDisabled Label="@L["Metric"]" T="string" @bind-Value=SelectedMetric>
								@foreach (var metric in _metrics)
								{
									<MudSelectItem Value="@metric.Name.ID">
										<MudText Typo="Typo.body2">@metric.Name.Properties["skos:prefLabel"]</MudText>
									</MudSelectItem>
								}
							</MudSelect>
						</MudTh>
						<MudTh></MudTh>
						<MudTh></MudTh>
						<MudTh></MudTh>
						<MudTh></MudTh>
					</MudTHeadRow>
				</HeaderContent>
				<RowTemplate>
					<MudTd>
						@(context.AutoMlSolution.Properties.ContainsKey("skos:prefLabel") ? context.AutoMlSolution.Properties["skos:prefLabel"] : "")
					</MudTd>
					<MudTd>
						@if (context.Status == "busy")
						{
							<MudProgressCircular Size="Size.Small" Color="Color.Secondary" Indeterminate="true" />
						}
						else
						{
							@L[context.Status]
						}
					</MudTd>
					<MudTd>
						<MudLink Href="@NavManager.ToAbsoluteUri("trainings/" + context.TrainingId + "/models/" + @context.Id).AbsoluteUri" Style="cursor: pointer; display: flex;"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Lightbulb" Style="margin-right: 4px;" />@(context.GetMlModelString())</MudLink>
						</MudTd>
						<MudTd>@(context.GetMlLibraryString())</MudTd>
						<MudTd>
							@if (!String.IsNullOrEmpty(SelectedMetric))
						{
							@if (context.Metrics.Where(x => x.Name.ID == SelectedMetric).Count() == 1)
							{
								@(String.Format("{0:0.00}", context.Metrics.Where(x => x.Name.ID == SelectedMetric).First().Score))
							}
						}
					</MudTd>

					<MudTd>
						@if (context.Status == "busy")
						{
							@(DateTime.UtcNow.Subtract(context.RuntimeProfile.StartTime).TotalMinutes.ToString("0 min"))
						}
						else
						{
							@(context.RuntimeProfile.EndTime.Subtract(context.RuntimeProfile.StartTime).TotalMinutes.ToString("0 min"))
						}
					</MudTd>
					<MudTd>
						@if (context.Status == "busy")
						{
							<span>
								@("0.00") mg CO2-eq
							</span>
						}
						else
						{
							<span>
								@(String.Format("{0:0.00}", context.Emissions*1000)) mg CO2-eq
							</span>
						}
					</MudTd>
					<MudTd>@(String.Format("{0:0}", context.PredictionTime * 1000)) Âµs</MudTd>
					<MudTd><ModelMenu Model="@context" OnDeleteCompleted="@OnDeleteModelCompleted" /></MudTd>
				</RowTemplate>
				<PagerContent>
					<MudTablePager />
				</PagerContent>
			</MudTable>
		}
    </MudCardContent>
</MudCard>

@code {
	[Parameter]
	public EventCallback OnDeleteModelCompleted { get; set; }
	[Parameter]
	public string DatasetId { get; set; }
	[Parameter]
	public GetModelsResponseDto Models
	{
		get
		{
			return _models;
		}
		set
		{
			_models = value;
			if (_models != null)
			{
				UpdateMetricsList();
				StateHasChanged();
			}
		}
	}
	private string searchString = "";
	private GetModelsResponseDto _models;
	private List<Metric> _metrics = new List<Metric>();
	private string SelectedMetric { get; set; } = "";
	protected bool IsDisabled { get; set; }

	private void UpdateMetricsList()
	{
        bool hasNewMetric = false;
		foreach (var model in _models.Models)
		{
			foreach (var metric in model.Metrics)
			{
				if (!_metrics.Any(x => x.Name.Properties["skos:prefLabel"] == metric.Name.Properties["skos:prefLabel"]))
                {
					_metrics.Add(metric);
                    hasNewMetric = true;
				}
			}
		}
		_metrics = _metrics.OrderBy(x => x.Name.Properties["skos:prefLabel"]).ToList();

        if (_metrics.Count > 0)
        {
            if (string.IsNullOrEmpty(SelectedMetric))
            {
                SelectedMetric = _metrics[0].Name.ID;
            }
            IsDisabled = false;
        }
        else
        {
            IsDisabled = true;
        }

        if (hasNewMetric || string.IsNullOrEmpty(SelectedMetric))
        {
            StateHasChanged();
        }
    }

    private bool FilterFunc(ModelDto element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.AutoMlSolution.Properties["skos:prefLabel"].Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.GetMlLibraryString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.GetMlModelString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
