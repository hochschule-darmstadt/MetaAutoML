
@using Newtonsoft.Json.Linq

<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent >
            <MudText Typo="Typo.h6">Configuration</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            @if (Model != null)
            {
                <MudButton Href="@("/models/" + Model.Model.ID + "/details")"
                    Variant="Variant.Filled" 
                    EndIcon="@Icons.Material.Filled.ReadMore" 
                    Color="Color.Secondary"
                    Size="Size.Small" 
                    Style="margin-top: 8px">More</MudButton>
            }
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudPaper Height="250px" Elevation="0">
            @if (Training == null)
            {
                <DataLoaderSpinner />
            }
            else
            {
                <div style="height:250px;overflow: auto;">
                    <MudStack>
                        <MudText Typo="Typo.body1">Dataset: @Training.DatasetName</MudText>
                        <MudText Typo="Typo.body1">Task: @Training.Task.Properties["skos:prefLabel"]</MudText>
                        @if (Training.Configuration.ContainsKey("target"))
                        {
                            <MudText Typo="Typo.body1">Target: @Training.Configuration["target"]["target"]</MudText>
                        }
                        <MudDivider />
                        <MudExpansionPanels MultiExpansion="true">
                            <MudExpansionPanel Text="Selected Ml libraries">
                                <MudStack>
                                    @foreach (var item in Training.RequiredMlLibraries)
                                    {
                                        <MudText Typo="Typo.body1">@item.Properties["skos:prefLabel"]</MudText>
                                    }
                                </MudStack>
                            </MudExpansionPanel>
                            <MudExpansionPanel Text="Selected AutoMl solutions">
                                <MudStack>
                                    @foreach (var item in Training.RequiredAutoMLs)
                                    {
                                        <MudText Typo="Typo.body1">@item.Properties["skos:prefLabel"]</MudText>
                                    }
                                </MudStack>
                            </MudExpansionPanel>
                            <MudExpansionPanel Text="Dataset configuration">
                                @if ((_training.Task.Properties[":has_dataset_type"] == ":tabular") || (_training.Task.Properties[":has_dataset_type"] == ":longitudinal"))
                                {
                                    <MudStack>
                                        @foreach (JToken item in Training.DatasetConfiguration["features"])
                                        {
                                            <MudText Typo="Typo.body1">@item.Path: @((Server.DataType)((int)item.First))</MudText>
                                        }
                                    </MudStack>
                                }
                            </MudExpansionPanel>
                            <MudExpansionPanel Text="Runtime constrains">

                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudStack>
                </div>
            }
        </MudPaper>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public GetTrainingResponseDto Training
    { 
        get
        {
            return _training;
        } 
        set
        {
            _training = value;
            StateHasChanged();
        } 
    }
    private GetTrainingResponseDto _training;

    [Parameter]
    public GetModelResponseDto Model
    { 
        get
        {
            return _model;
        } 
        set
        {
            _model = value;
            StateHasChanged();
        } 
    }
    private GetModelResponseDto _model;
}
