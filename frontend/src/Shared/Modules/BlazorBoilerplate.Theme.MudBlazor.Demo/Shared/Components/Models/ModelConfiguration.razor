@using Newtonsoft.Json.Linq
@inject IStringLocalizer<Global> L

<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent>
            <LabelTooltip FontSize="Typo.h6" Label=@L["Configuration"] Text="Here you can inspect the original configuration that lead to the ML model." Position="Placement.Bottom"></LabelTooltip>
        </CardHeaderContent>
@*        <CardHeaderActions>
            @if (Model != null)
            {
                <MudButton Href="@("/models/" + Model.Model.ID + "/details")"
                    Variant="Variant.Filled" 
                    EndIcon="@Icons.Material.Filled.ReadMore" 
                    Color="Color.Secondary"
                    Size="Size.Small"
                       Style="margin-top: 8px">@L["More"]</MudButton>
            }
        </CardHeaderActions>*@
    </MudCardHeader>
    <MudCardContent>
        <MudPaper Height="250px" Elevation="0">
            @if (Training == null || Dataset == null || Model == null)
            {
                <DataLoaderSpinner />
            }
            else
            {
                <div style="height:250px;overflow: auto;">
                    <MudStack>
                        <MudText Typo="Typo.body1">@L["Dataset: {0}", Dataset.Dataset.Name]</MudText>
                        <MudText Typo="Typo.body1">@L["Task: {0}", Training.Training.Configuration.Task.Properties.ContainsKey("skos:prefLabel") ? Training.Training.Configuration.Task.Properties["skos:prefLabel"] : ""]</MudText>
                        <MudText Typo="Typo.body1">@L["Target: {0}", Training.Training.Configuration.Target]</MudText>
                        <MudDivider />
                        <MudExpansionPanels MultiExpansion="true">
                            <MudExpansionPanel Text="@L["Selected Ml libraries"]">
                                <MudStack>
                                    @foreach (var item in Training.Training.Configuration.SelecctedMlLibraries)
                                    {
                                        <MudText Typo="Typo.body1">@item.Properties.ContainsKey("skos:prefLabel") ? @item.Properties["skos:prefLabel"] : @("")</MudText>
                                    }
                                </MudStack>
                            </MudExpansionPanel>
                            <MudExpansionPanel Text="@L["Selected AutoMl solutions"]">
                                <MudStack>
                                    @foreach (var item in Training.Training.Configuration.SelectedAutoMlSolutions)
                                    {
                                        <MudText Typo="Typo.body1">@item.Properties.ContainsKey("skos:prefLabel") ? @item.Properties["skos:prefLabel"] : @("")</MudText>
                                    }
                                </MudStack>
                            </MudExpansionPanel>
                            <MudExpansionPanel Text="@L["Dataset configuration"]">
                                @if ((_training.Training.Configuration.Task.Properties[":has_dataset_type"] == ":tabular") || (_training.Training.Configuration.Task.Properties[":has_dataset_type"] == ":time_series_longitudinal"))
                                {
                                    <MudStack>
                                        @foreach (JToken item in Training.Training.DatasetConfiguration["schema"])
                                        {
                                            <MudText Typo="Typo.body1">@item.Path: @(item.First))</MudText>
                                        }
                                    </MudStack>
                                }
                            </MudExpansionPanel>
                            <MudExpansionPanel Text="@L["Runtime constrains"]">

                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudStack>
                </div>
            }
        </MudPaper>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public GetTrainingResponseDto Training
    { 
        get
        {
            return _training;
        } 
        set
        {
            _training = value;
            StateHasChanged();
        } 
    }
    private GetTrainingResponseDto _training;

    [Parameter]
    public GetModelResponseDto Model
    { 
        get
        {
            return _model;
        } 
        set
        {
            _model = value;
            StateHasChanged();
        } 
    }
    private GetModelResponseDto _model;

    [Parameter]
    public GetDatasetResponseDto Dataset
    {
        get
        {
            return _dataset;
        }
        set
        {
            _dataset = value;
            StateHasChanged();
        }
    }
    private GetDatasetResponseDto _dataset;
}
