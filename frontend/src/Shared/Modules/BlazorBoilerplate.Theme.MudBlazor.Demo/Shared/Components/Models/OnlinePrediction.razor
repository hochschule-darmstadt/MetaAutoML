
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Net.Http.Headers
@using System.Timers
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IJSRuntime JS
@inject IStringLocalizer<Global> L
@inject IHttpClientFactory ClientFactory
@inject IFileUploader fileUploader
@inject NavigationManager NavManager
@inject IDialogService DialogService


<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent>
            <LabelTooltip FontSize="Typo.h6" Label=@L["Use model for predicting new cases"] Text="You may use the model for predicting new cases within the OMA-ML platform without having to install anything. Simply upload a file with the new cases." Position="Placement.Bottom"></LabelTooltip>
       </CardHeaderContent>
        <CardHeaderActions>
            <MudStack Row="true" Class="align-content-center" Style="margin-top: 8px">
                <ButtonTooltip Text="Click here to upload a file with new cases to be predicted. Please note: the file must have the identical format as the training dataset." Position="Placement.Bottom">
                    <MudButton OnClick="OnOpenUpload"
                               Variant="Variant.Filled"
                               Color="Color.Secondary"
                               EndIcon="@Icons.Filled.CloudUpload"
                               Size="Size.Small">@L["Add Live Dataset"]</MudButton>
                        </ButtonTooltip>
                    </MudStack>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudPaper Height="100px" Elevation="0">
                    @if (_model == null)
                    {
                        <DataLoaderSpinner />
                    }
                    else
                    {
                        <MudTable Items="@_model.Model.Predictions" style="width:stretch" class="mat-elevation-z5" AllowSelection="false" Dense="true">
                            <HeaderContent>
                                <MudTh>@L["Name"]</MudTh>
                                <MudTh>@L["Date"]</MudTh>
                                <MudTh>@L["Status"]</MudTh>
                                <MudTh>@L["download"]</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>
                                    @context.LiveDatasetName
                                </MudTd>
                                <MudTd>
                                    @context.RuntimeProfile.StartTime.ToString("dd/MM/yyyy")
                                </MudTd>
                                <MudTd>
                                    @if (context.Status == "busy")
                                    {
                                        <MudProgressCircular Size="Size.Small" Color="Color.Secondary" Indeterminate="true" />
                                    }
                                    else
                                    {
                                        @L[context.Status];
                                    }
                                </MudTd>
                                <MudTd>
                                    @if (context.Status == "completed")
                                    {
                                        <MudButton OnClick="@(() => DownlaodPrediction(context))" Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small">@L["Download predictions"]</MudButton>
                                        <MudButton OnClick="@(() => OpenPredictionResults(context))" Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small">
                                            View predicitons
                                        </MudButton>
                                    }
                                    else
                                    {
                                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small" Disabled="true">@L["Download predictions"]</MudButton>
                                    }
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    }
                </MudPaper>
            </MudCardContent>
        </MudCard>

        @code {
            [Parameter]
            public GetModelResponseDto Model
            {
                get
                {
                    return _model;
                }
                set
                {
                    _model = value;
                    if (_model != null)
                    {
                        _timer = new Timer()
                        {
                            AutoReset = true,
                            Enabled = true,
                            Interval = 5000
                        };
                        _timer.Elapsed += RefreshPredictions;
                    }
                    StateHasChanged();
                }
            }
            private GetModelResponseDto _model;

            private GetPredictionsResponseDto _predictions;
            private ModelPredictResponseDto _modelPrediction;
            private ModelPredictResponseDto _predictionResult;
            private Timer _timer;


            private void OnOpenUpload()
            {
                fileUploader.UploadPredictionRequest.ModelId = _model.Model.Id;
                fileUploader.IsPredictionDatasetToUpload = true;
                fileUploader.IsUploadPredictionDatasetDialogOpen = true;
                fileUploader.RefreshUploadComponentCallback();
            }

            public void Dispose()
            {
                DisposeTimer();
            }
            SemaphoreSlim timerSemaphore = new SemaphoreSlim(1);
            private async void RefreshPredictions(object sender, ElapsedEventArgs e)
            {
                await InvokeAsync(async () =>
                {
                    var gotLock = timerSemaphore.Wait(0);
                    if (!gotLock)
                    {
                        return;
                    }
                    try
                    {
                        for (int i = 0; i < _model.Model.Predictions.Count; i++)
                        {
                            if (_model.Model.Predictions[i].Status == "busy")
                            {
                                ApiResponseDto apiResponse = await apiClient.GetPrediction(new GetPredictionRequestDto { PredictionId = _model.Model.Predictions[i].Id });
                                if (apiResponse.IsSuccessStatusCode)
                                {
                                    _model.Model.Predictions[i] = Newtonsoft.Json.JsonConvert.DeserializeObject<GetPredictionResponseDto>(apiResponse.Result.ToString()).Prediction;
                                    StateHasChanged();
                                }
                                //Prediction does not exist anymore
                                else if (apiResponse.StatusCode == 404)
                                {
                                    _model.Model.Predictions.RemoveAt(i);
                                    DisposeTimer();
                                    return;
                                }
                                else
                                {
                                    viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
                    }
                    finally
                    {
                        timerSemaphore.Release();
                    }
                });
            }

            public void DisposeTimer()
            {
                if (_timer != null)
                {
                    _timer.Stop();
                    _timer.Elapsed -= RefreshPredictions;
                    _timer?.Dispose();
                    _timer = null;
                }
            }

            private async void OpenPredictionResults(PredictionDto predictionDataset)
            {
                var options = new DialogOptions { CloseOnEscapeKey = true };
                var parameters = new DialogParameters();

                try
                {
                    ApiResponseDto apiResponse = await apiClient.DownloadPrediction(new DownloadPredictionRequestDto() { PredictionId = predictionDataset.Id });
                    if (apiResponse.IsSuccessStatusCode)
                    {
                        DownloadPredictionResponseDto response = Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadPredictionResponseDto>(apiResponse.Result.ToString());

                        var stream = new MemoryStream(response.Content);
                        string jsonString = System.Text.Encoding.ASCII.GetString(stream.ToArray());

                        if (!string.IsNullOrEmpty(jsonString))
                        {
                            string tableHeader = jsonString.Split("\n")[0];
                            string[] tableContent = jsonString.Split("\n");
                            parameters.Add("TableHeader", tableHeader);
                            parameters.Add("TableContent", tableContent);
                        }




                        DialogService.Show<PredictionResult>("Predictions", parameters, options);

                    }
                }
                catch (Exception ex)
                {
                    viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
                }


            }

            private async void DownlaodPrediction(PredictionDto predictionDataset)
            {
                try
                {
                    ApiResponseDto apiResponse = await apiClient.DownloadPrediction(new DownloadPredictionRequestDto() { PredictionId = predictionDataset.Id });
                    if (apiResponse.IsSuccessStatusCode)
                    {
                        DownloadPredictionResponseDto response = Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadPredictionResponseDto>(apiResponse.Result.ToString());

                        var stream = new MemoryStream(response.Content);
                        using var streamRef = new DotNetStreamReference(stream: stream);
                        await JS.InvokeVoidAsync("downloadFileFromStream", "predictions.csv", streamRef);
                        StateHasChanged();
                    }
                    else
                    {
                        viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
                    }
                }
                catch (Exception ex)
                {
                    viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
                }
            }
        }
