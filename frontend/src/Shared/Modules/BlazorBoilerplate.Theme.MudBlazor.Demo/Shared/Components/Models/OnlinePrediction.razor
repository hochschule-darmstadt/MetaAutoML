
@using System 
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Net.Http.Headers
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IJSRuntime JS
@inject IStringLocalizer<Global> L
@inject IHttpClientFactory ClientFactory
@inject IFileUploader fileUploader
@inject NavigationManager NavManager


<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent >
            <MudText Typo="Typo.h6">@L["Predict online"]</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudStack Row="true" Class="align-content-center" Style="margin-top: 8px">
                <MudButton OnClick="OnOpenUpload"
                    Variant="Variant.Filled" 
                    Color="Color.Secondary"
                    EndIcon="@Icons.Filled.CloudUpload"
                           Size="Size.Small">@L["Add Live Dataset"]</MudButton>
            </MudStack>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudPaper Height="100px" Elevation="0">
            @if (_predictions == null)
            {
                <DataLoaderSpinner />
            }
            else
            {
                <MudTable Items="@_predictions.Predictions" style="width:stretch" class="mat-elevation-z5" AllowSelection="false" Dense="true">
                    <HeaderContent>
                        <MudTh>@L["Name"]</MudTh>
                        <MudTh>@L["Date"]</MudTh>
                        <MudTh>@L["Status"]</MudTh>
                        <MudTh>@L["download"]</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                             @context.LiveDatasetName 
                        </MudTd>
                        <MudTd>
                            @context.RuntimeProfile.StartTime.ToString("dd/mm/yyyy");
                        </MudTd>
                        <MudTd>
                            @if (context.Status == "busy")
                            {
                                <MudProgressCircular Size="Size.Small" Color="Color.Secondary" Indeterminate="true" />
                            }
                            else
                            {
                                @L[context.Status];
                            }
                        </MudTd>
                        <MudTd>
                            @if (context.Status == "completed")
                            {
                                <MudButton OnClick="@(() => DownlaodPrediction(context))" Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small">@L["Download result CSV"]</MudButton>
                            }
                            else
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small" Disabled="true">@L["Download result CSV"]</MudButton>
                            }
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudPaper>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public GetModelResponseDto Model
    { 
        get
        {
            return _model;
        } 
        set
        {
            _model = value;
            if (_model != null)
            {
                LoadPredictions();
            }
            StateHasChanged();
        } 
    }
    private GetModelResponseDto _model;

    private GetPredictionsResponseDto _predictions;
    private ModelPredictResponseDto _modelPrediction;
    private bool _downloadReady = true;
    private ModelPredictResponseDto _predictionResult;


    private void OnOpenUpload()
    {
        fileUploader.IsPredictionDatasetToUpload = true;
        fileUploader.IsUploadPredictionDatasetDialogOpen = true;
        fileUploader.RefreshUploadComponentCallback();
    }
    private async Task LoadPredictions()
    {

        try
        {

            ApiResponseDto apiResponse = await apiClient.GetPredictions(new GetPredictionsRequestDto { ModelId = _model.Model.Id });
            if (apiResponse.IsSuccessStatusCode)
            {
                _predictions = Newtonsoft.Json.JsonConvert.DeserializeObject<GetPredictionsResponseDto>(apiResponse.Result.ToString());
                StateHasChanged();
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    private async void DownlaodPrediction(PredictionDto predictionDataset)
    {
        try
        {
            ApiResponseDto apiResponse = await apiClient.DownloadPrediction(new DownloadPredictionRequestDto() { PredictionId = predictionDataset.Id });
            if (apiResponse.IsSuccessStatusCode)
            {
                DownloadPredictionResponseDto response = Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadPredictionResponseDto>(apiResponse.Result.ToString());

                var stream = new MemoryStream(response.Content);
                using var streamRef = new DotNetStreamReference(stream: stream);
                await JS.InvokeVoidAsync("downloadFileFromStream", "predictions.csv", streamRef);
                StateHasChanged();
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    //private async Task UploadFiles(InputFileChangeEventArgs e)
    //{
    //    //try
    //    //{
    //    //    var file = e.File;
    //    //    using var stream = e.File.OpenReadStream((512000 * 2 * 400));
    //    //    using var ms = new MemoryStream();
    //    //    await stream.CopyToAsync(ms);
    //    //    var content = ms.ToArray();


    //    //    //ApiResponseDto apiResponse = await apiClient.ModelPrediction(new ModelPredictionRequestDto { TestData = content, ModelId = Model.Model.Identifier});
    //    //    if (apiResponse.IsSuccessStatusCode)
    //    //    {
    //    //        _predictionResult = Newtonsoft.Json.JsonConvert.DeserializeObject<ModelPredictResponseDto>(apiResponse.Result.ToString());
    //    //        _downloadReady = false;
    //    //        StateHasChanged();
    //    //    }
    //    //    else
    //    //    {
    //    //        viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
    //    //    }
    //    //}
    //    //catch (Exception ex)
    //    //{
    //    //    viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
    //    //}
    //}

    //private async void DownloadPredictions()
    //{
    //    try{
    //        byte[] predictionBytes = _predictionResult.Predictions.SelectMany(s => System.Text.Encoding.UTF8.GetBytes(s + Environment.NewLine)).ToArray();
            
    //        var stream = new MemoryStream(predictionBytes);
    //        using var streamRef = new DotNetStreamReference(stream: stream);
    //        await JS.InvokeVoidAsync("downloadFileFromStream", "predictions.csv", streamRef);
    //    }
    //    catch (Exception ex)
    //    {
    //        viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
    //    }
    //}


}
