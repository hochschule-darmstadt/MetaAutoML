@using Microsoft.AspNetCore.Components;
@inject NavigationManager navigationManager
@inject IStringLocalizer<Global> L
@implements IDynamicComponent

<MudNavMenu Rounded="true" Margin="Margin.Normal" Color="Color.Secondary" Class="pa-2" Style="width:14.2rem">
   
    <MudNavLink Href="@navigationManager.ToAbsoluteUri(" ").AbsoluteUri" Match="NavLinkMatch.All" Icon="@Icons.Filled.Home">
        <ButtonTooltip Text="OMA-ML makes effective Machine Learning (ML) easy! Simply upload a dataset, start ML training and use ML models.
From the home page you can navigate to trainings of ML models you have performed so far or open a dataset to start a new ML training." Position="Placement.Right">
            @L["Home"]
        </ButtonTooltip>
    </MudNavLink>
    <MudNavLink Href="@navigationManager.ToAbsoluteUri("datasets").AbsoluteUri" Icon="@Icons.Filled.ListAlt">
        <ButtonTooltip Text="A dataset contains data that can be used for machine learning. Different dataset types are distinguished, e.g., tabular data, texts or images.
This page lists all datasets you have uploaded so far to the OMA-ML platform. By clicking on a dataset, the respective dataset page is opened to inspect the dataset and start new trainings." Position="Placement.Right">
            @L["Datasets"]
        </ButtonTooltip>
    </MudNavLink>
    <MudNavLink Href="@navigationManager.ToAbsoluteUri("trainings").AbsoluteUri" Icon="@Icons.Filled.ModelTraining">
        <ButtonTooltip Text="Machine learning consists of two phases: training and prediction. During the training phase, a ML model is generated from a dataset. This page lists all trainings you have performed so far. You can open a past training, select an ML model and use it for predicting new cases." Position="Placement.Right">
            @L["Trainings"]
            </ButtonTooltip>
    </MudNavLink>
</MudNavMenu>

@code {

    public int Order { get => 1; }
    public string IntoComponent { get => "NavMenu"; }

    public bool IsLoggedIn = false;

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        IsLoggedIn = false;
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            IsLoggedIn = true;
        }
    }
}
