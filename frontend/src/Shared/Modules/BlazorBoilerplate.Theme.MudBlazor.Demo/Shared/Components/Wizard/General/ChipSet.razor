@if (ViewModel.AvailableChips?.Any() ?? false)
{
    <MudText Typo="Typo.subtitle2">@Label</MudText>

    <MudChipSet Filter="true" MultiSelection="true" SelectedValues="SelectedValues">
        @foreach (var chip in ViewModel.AvailableChips)
        {
            @if (!string.IsNullOrEmpty(chip.ToolTip) || !string.IsNullOrEmpty(chip.Comment))
            {
                <MudChip Value="@chip.Id" Text="@chip.Label" Variant="Variant.Text" Color="Color.Secondary" @onclick="() => ToggleChip(chip)">

                    <WikiTooltip SeeAlso="@chip.ToolTip" Comment="@chip.Comment" Label="@chip.Label">

                    </WikiTooltip>

                    <!--   else
                    {
                        <MudChip Value="@chip.Id" Text="@chip.Label" Variant="Variant.Text" Color="Color.Secondary" @onclick="() => ToggleChip(chip)" />
                    }-->
                </MudChip>
            }
            else
            {
                <MudChip Value="@chip.Id" Text="@chip.Label" Variant="Variant.Text" Color="Color.Secondary" @onclick="() => ToggleChip(chip)" />
            }
        }
    </MudChipSet>
}
else
{
    <MudText Typo="Typo.subtitle2">@Label</MudText>
    <MudText Typo="Typo.subtitle2">-</MudText>
}

@code
{
    [Parameter]
    public ChipSetViewModel ViewModel { get; set; }

    [Parameter]
    public string Label { get; set; }

    private ICollection<object> SelectedValues => ViewModel.SelectedIds.Cast<object>().ToList();

    private void ToggleChip(ChipViewModel chip)
    {
        chip.IsSelected = !chip.IsSelected;
        ViewModel.RaiseSelectedIdsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// ViewModel for ChipSet component. Wraps all the data needed and allows listening to data events instead of UI events.
    /// </summary>
    public class ChipSetViewModel
    {

        /// <summary>
        /// Event that is fired when the selected ids changed.
        /// </summary>
        public event EventHandler SelectedIdsChanged;

        /// <summary>
        /// List of available elements in the ChipSet
        /// </summary>
        /// <returns></returns>
        public ICollection<ChipViewModel> AvailableChips { get; } = new List<ChipViewModel>();

        /// <summary>
        /// List of selected elements in the ChipSet.
        /// </summary>
        /// <value></value>
        public IEnumerable<string> SelectedIds => AvailableChips.Where(c => c.IsSelected).Select(c => c.Id);


        /// <summary>
        /// Updates the collection of available chips and adapt the selected ids accordingly.
        /// Newly available options are selected by default.
        /// </summary>
        /// <param name="availableChips">Collection of tuples that contain an id, a label and a tooltip. (Each one is shown as a chip)</param>
        public void SetAvailableChips(IEnumerable<(string id, string label, string toolTip, bool isSelected, string comment, string imageUrl)> availableChips)
        {
            var addedChips = availableChips.Where(ac => AvailableChips.All(c => c.Id != ac.id)).ToList();
            var removedChips = AvailableChips.Where(c => availableChips.All(ac => ac.id != c.Id)).ToList();
            foreach (var chipToRemove in removedChips)
            {
                AvailableChips.Remove(chipToRemove);
            }
            foreach (var chipToAdd in addedChips.Select(ac => new ChipViewModel { Id = ac.id, Label = ac.label, ToolTip = ac.toolTip, IsSelected = ac.isSelected, ImageUrl = ac.imageUrl, Comment = ac.comment }))
            {
                AvailableChips.Add(chipToAdd);
            }

            RaiseSelectedIdsChanged();
        }

        public void RaiseSelectedIdsChanged()
        {
            SelectedIdsChanged(this, EventArgs.Empty);
        }
    }

    public class ChipViewModel
    {
        public string Id { get; set; }
        public string Label { get; set; }
        public string Comment { get; set; }
        public string ToolTip { get; set; }
        public bool IsSelected { get; set; } = true;
        public string ImageUrl { get; set; }
    }
}
