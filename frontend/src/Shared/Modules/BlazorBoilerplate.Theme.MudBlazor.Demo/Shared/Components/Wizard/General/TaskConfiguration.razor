@inject IStringLocalizer<Global> L
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@using Newtonsoft.Json

<style>
.strategy-description-tooltip {
    max-width: 330px;
}
</style>

<MudStack>
    @switch (Dataset.Dataset.Type.ID)
    {
        case ":time_series_longitudinal":
        case ":text":
        case ":tabular":
        case ":time_series":
            <MudTimeline TimelineOrientation="@TimelineOrientation.Horizontal" TimelinePosition="@TimelinePosition.Bottom">
                <MudTimelineItem>
                    <MudText Align="Align.Center" Typo="Typo.body2">@L["Dataset preparation"]</MudText>
                </MudTimelineItem>
                <MudTimelineItem Color="Color.Secondary">
                    <MudText Align="Align.Center" Typo="Typo.body2">@L["Configuration"]</MudText>
                </MudTimelineItem>
            </MudTimeline>
            break;
        case ":image":
            <MudTimeline TimelineOrientation="@TimelineOrientation.Horizontal" TimelinePosition="@TimelinePosition.Bottom">
                <MudTimelineItem Color="Color.Secondary">
                    <MudText Align="Align.Center" Typo="Typo.body2">@L["Configuration"]</MudText>
                </MudTimelineItem>
            </MudTimeline>
            break;
    }

    @if (_compatibleTasks != null)
    {
        <MudSelect Label="@L["ML task"]" T="string" ValueChanged="@OnMlTaskSelectionChanged">
            @foreach (var task in _compatibleTasks.Tasks)
            {
                <MudSelectItem Value="@task.ID">@L[task.Properties.ContainsKey("skos:prefLabel") ? task.Properties["skos:prefLabel"] : ""]</MudSelectItem>
            }
        </MudSelect>
    }
    else
    {
        <DataLoaderSpinner />
    }

    @if (((Dataset.Dataset.Type.ID == ":tabular") || (Dataset.Dataset.Type.ID == ":text") || (Dataset.Dataset.Type.ID == ":time_series")) || (Dataset.Dataset.Type.ID == ":time_series_longitudinal") && (!string.IsNullOrEmpty(StartAutoMlRequest.Configuration.Task)))

    {
        <MudSelect Label="@L["Target"]" T="string" ValueChanged="@OnTargetChanged">
            @if (_columnNames != null)
            {
                @foreach (var column in _columnNames)
                {
                    <MudSelectItem Value="@column">@column</MudSelectItem>
                }
            }
        </MudSelect>
    }
    <MudNumericField ValueChanged="@OnRuntimeValueChanged" T="int" Label="@L["Runtime"]" Variant="Variant.Text" Min="3" Max="180" Value="@StartAutoMlRequest.Configuration.RuntimeLimit" />

    @* TODO: Extract the conbination: MudText, MudChipset into a separate component. It is used several times here. *@
    <MudExpansionPanels>
        <MudExpansionPanel Text="@L["Details"]">
            <ChipSet AvailableChips="@_availableLibraries" Label="@L["ML libraries"]" @bind-SelectedIds="SelectedMlLibs" />
            @if (_availableAutoMls != null)
            {
                <MudText Typo="Typo.subtitle2" Class="mt-4">@L["AutoML solutions"]</MudText>
                <MudChipSet SelectedValuesChanged="OnAutoMlSolutionSelectionChanged" Filter="true" MultiSelection="true" >
                    @if (_availableAutoMls != null)
                    {
                        @foreach (var sln in _availableAutoMls.AutoMlSolutions)
                        {
                            <MudChip Value="@sln.ID" Text="@(sln.Properties.ContainsKey("skos:prefLabel") ? sln.Properties["skos:prefLabel"] : "")" Default="true" Variant="Variant.Text" Color="Color.Secondary" />
                        }
                    }
                </MudChipSet>
            }
            else
            {
                <DataLoaderSpinner />
            }
            @if (_availableStrategies != null)
            {
                <MudText Typo="Typo.subtitle2" Class="mt-4">@L["Enabled strategies"]</MudText>
                <MudChipSet
                    SelectedValuesChanged="OnStrategySelectionChanged"
                    Filter="true"
                    MultiSelection="true"
                >
                    @if (_availableStrategies != null)
                    {
                        @foreach (var strategy in _availableStrategies.Strategies)
                        {
                            <MudTooltip Text="@strategy.Description" Delay="600" Arrow="true" Placement="Placement.Bottom" Class="strategy-description-tooltip">
                                <MudChip
                                    Value="@strategy.Id"
                                    Text="@strategy.Title"
                                    Default="true"
                                    Variant="Variant.Text"
                                    Color="Color.Secondary"
                                />
                            </MudTooltip>
                        }
                    }
                </MudChipSet>
            }
            else
            {
                <DataLoaderSpinner />
            }
            @if (_availableParameters != null)
            {
                <MudText Typo="Typo.subtitle2" Class="mt-4">Available parameters</MudText>
                <ul class="list-disc">
                @foreach (var param in _availableParameters)
                {
                    <li>@param.ToString()</li>
                }
                </ul>
            }
            else
            {
                <DataLoaderSpinner />
            }
        </MudExpansionPanel>
    </MudExpansionPanels>

</MudStack>

@code {
    [Parameter]
    public GetDatasetResponseDto Dataset { get; set; }

    [Parameter]
    public CreateTrainingRequestDto StartAutoMlRequest { get; set; }
    [Parameter]
    public EventCallback<CreateTrainingRequestDto> StartAutoMlRequestChanged { get; set; }

    async Task UpdateStartAutoMlRequest()
    {
        await StartAutoMlRequestChanged.InvokeAsync(StartAutoMlRequest);
    }

    private GetTasksForDatasetTypeResponseDto _compatibleTasks;
    private List<ChipSet.ChipViewModel> _availableLibraries;
    private GetAutoMlSolutionsForConfigurationResponseDto _availableAutoMls;
    private GetAvailableStrategiesResponseDto _availableStrategies;
    private List<AutoMlParameterDto> _availableParameters;
    private List<string> _columnNames;

    public ICollection<string> SelectedMlLibs 
    { 
        get
        {
            return _selectedMlLibs;
        } 
        set
        {
            _selectedMlLibs = value;
            if (_selectedMlLibs != null)
            {
                OnMlLibrarySelectionChanged(SelectedMlLibs);
            }
        }
    }
    private ICollection<string> _selectedMlLibs;

    protected async override void OnInitialized()
    {
        base.OnInitialized();
        SetupStartAutoMLConfiguration();
        await LoadData();
    }

    // TODO: Use binding instead of event handlers, if blazor supports that.
    private void OnRuntimeValueChanged(int e)
    {
        StartAutoMlRequest.Configuration.RuntimeLimit = e;
    }

    private async void SetupStartAutoMLConfiguration()
    {
        _columnNames = new List<string>();

        if ((Dataset.Dataset.Type.ID == ":tabular") || (Dataset.Dataset.Type.ID == ":text") || (Dataset.Dataset.Type.ID == ":time_series") || (Dataset.Dataset.Type.ID == ":time_series_longitudinal"))
        {
            foreach (KeyValuePair<string, dynamic> pair in StartAutoMlRequest.DatasetConfiguration["column_datatypes"])
            {
                // TODO: Document what this magic number means and extract it into a constant
                if ((int)pair.Value != 7)
                {
                    _columnNames.Add(pair.Key);
                }
            }
        }
        StartAutoMlRequest.Configuration.RuntimeLimit = 3;
        StartAutoMlRequest.Configuration.Metric = ":accuracy";
        await UpdateStartAutoMlRequest();
    }

    private async Task LoadData()
    {
        try
        {
            GetTasksForDatasetTypeRequestDto taskRequest = new GetTasksForDatasetTypeRequestDto { DatasetType = Dataset.Dataset.Type.ID };
            ApiResponseDto apiResponse = await apiClient.GetTasksForDatasetType(taskRequest);

            HandleApiResponseWrapper(apiResponse, () =>
            {
                _compatibleTasks = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTasksForDatasetTypeResponseDto>(apiResponse.Result.ToString());
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    private async Task RefreshParameters()
    {
        var taskIri = StartAutoMlRequest.Configuration.Task;
        var selectedAutoMls = StartAutoMlRequest.Configuration.SelectedAutoMlSolutions;
        var apiResponse = await apiClient.GetAutoMlParameters(new GetAutoMlParametersRequestDto { AutoMls = selectedAutoMls, TaskIri = taskIri });
        HandleApiResponseWrapper(
            apiResponse,
            () => _availableParameters = apiResponse.Result.AutoMlParameters,
            errorMessageKey: "Fetching available parameters failed");
    }

    private async void OnMlTaskSelectionChanged(string task)
    {
        if (string.IsNullOrEmpty(task))
        {
            return;
        }
        StartAutoMlRequest.Configuration.Task = task;
        try
        {
            Dictionary<string, string> dictionary = new Dictionary<string, string>
            {
                { "task", StartAutoMlRequest.Configuration.Task }
            };
            await UpdateStartAutoMlRequest();
            /** Configuration = dictionary is currently dummy */
            //GetCompatibleAutoMlSolutionsRequestDto compatibleAutoMlRequest = new GetCompatibleAutoMlSolutionsRequestDto { Configuration = dictionary };

            //ApiResponseDto apiResponse = await apiClient.GetCompatibleAutoMlSolutions(compatibleAutoMlRequest);

            //if (apiResponse.IsSuccessStatusCode)
            //{
            //    _compatibleAutoMls = Newtonsoft.Json.JsonConvert.DeserializeObject<GetCompatibleAutoMlSolutionsResponseDto>(apiResponse.Result.ToString());
            //    StateHasChanged();
            //    viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["AutoMlSolution Operation Successful"]);
            //}
            //else
            //{
            //    viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["AutoMlSolution Operation Failed"]);
            //}

            GetMlLibrariesForTaskRequestDto supportedMlLibrariesRequest = new GetMlLibrariesForTaskRequestDto { Task = StartAutoMlRequest.Configuration.Task };
            ApiResponseDto apiResponse = await apiClient.GetMlLibrariesForTask(supportedMlLibrariesRequest);

            HandleApiResponseWrapper(apiResponse, () => 
            {
                 var librariesDto = Newtonsoft.Json.JsonConvert.DeserializeObject<GetMlLibrariesForTaskResponseDto>(apiResponse.Result.ToString());
                _availableLibraries = librariesDto.MlLibraries
                    .Select(lib => new ChipSet.ChipViewModel 
                        {
                            Id = lib.ID,
                            Label = lib.Properties.GetValueOrDefault("skos:prefLabel")
                        })
                    .ToList();
                SelectedMlLibs = _availableLibraries.Select(lib => lib.Id).ToList();
                StateHasChanged();
            }, errorMessageKey: "SupportedMlLibraries Operation Failed");
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    private async void OnMlLibrarySelectionChanged(ICollection<string> libs)
    {
        try
        {
            Dictionary<string, string> dictionary = new Dictionary<string, string>
            {
                { "task", StartAutoMlRequest.Configuration.Task }
            };

            List<string> libraries = libs.ToList();
            StartAutoMlRequest.Configuration.SelecctedMlLibraries = libs.ToList();

            await UpdateStartAutoMlRequest();
            if (libraries.Any())
            {
                dictionary.Add("library", JsonConvert.SerializeObject(libraries));
            }
            GetAutoMlSolutionsForConfigurationRequestDto compatibleAutoMlRequest = new GetAutoMlSolutionsForConfigurationRequestDto { Configuration = dictionary };
            ApiResponseDto apiResponse = await apiClient.GetAutoMlSolutionsForConfiguration(compatibleAutoMlRequest);

            HandleApiResponseWrapper(apiResponse, () => 
            {
                _availableAutoMls = Newtonsoft.Json.JsonConvert.DeserializeObject<GetAutoMlSolutionsForConfigurationResponseDto>(apiResponse.Result.ToString());
                StateHasChanged();
            });

            GetAvailableStrategiesRequestDto availableStrategiesRequest = new GetAvailableStrategiesRequestDto { Configuration = dictionary };
            ApiResponseDto availableStrategiesResponse = await apiClient.GetAvailableStrategies(availableStrategiesRequest);

            HandleApiResponseWrapper(availableStrategiesResponse, () => 
            {
                _availableStrategies = Newtonsoft.Json.JsonConvert.DeserializeObject<GetAvailableStrategiesResponseDto>(availableStrategiesResponse.Result.ToString());
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        } 
    }

    private void HandleApiResponseWrapper<T>(ApiResponseDto<T> apiResponse, Action successAction, string errorMessageKey = "Operation Failed", string successMessageKey = "Operation Successful")
    {
        if (apiResponse.IsSuccessStatusCode)
        {
            successAction();
            viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L[successMessageKey]);
        }
        else
        {
            viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L[errorMessageKey]);
        }
    }

    private async void OnAutoMlSolutionSelectionChanged(ICollection<object> automls)
    {
        StartAutoMlRequest.Configuration.SelectedAutoMlSolutions = new List<string>();
        foreach (var chip in automls)
        {
            StartAutoMlRequest.Configuration.SelectedAutoMlSolutions.Add(chip.ToString());
        }
        await UpdateStartAutoMlRequest();
        await RefreshParameters();
    }

    private async void OnStrategySelectionChanged(ICollection<object> strategies)
    {
        StartAutoMlRequest.Configuration.EnabledStrategies = new List<string>();
        foreach (var chip in strategies)
        {
            StartAutoMlRequest.Configuration.EnabledStrategies.Add(chip.ToString());
        }
        await UpdateStartAutoMlRequest();
    }

    // TODO: Use binding instead of event handlers
    private async void OnTargetChanged(string value)
    {
        StartAutoMlRequest.Configuration.Target = value;
        await UpdateStartAutoMlRequest();
    }
}
