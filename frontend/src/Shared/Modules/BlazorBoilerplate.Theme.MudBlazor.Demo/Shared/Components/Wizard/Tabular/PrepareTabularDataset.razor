@inject IStringLocalizer<Global> L
@using System
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@using Microsoft.Data.Analysis

@if (_datasetFrame == null)
{
    
}
else
{
    <MudStack>
        <MudTimeline TimelineOrientation="@TimelineOrientation.Horizontal" TimelinePosition="@TimelinePosition.Bottom">
            <MudTimelineItem Color="Color.Secondary">
                <MudText Align="Align.Center" Typo="Typo.body2">@L["Dataset preparation"]</MudText>
            </MudTimelineItem>
            <MudTimelineItem>
                <MudText Align="Align.Center" Typo="Typo.body2">@L["Configuration"]</MudText>
            </MudTimelineItem>
        </MudTimeline>

        <MudTable Items="@_datasetFrame.Rows" style="width:stretch" class="mat-elevation-z5" FixedHeader="true" CustomHeader="true">
            <HeaderContent>
                <MudTHeadRow>
                        <MudTh></MudTh>
                    @foreach (var item in _datasetFrame.Columns)
                    {
                        
                        <MudTh>@item.Name</MudTh>
                    }
                </MudTHeadRow>
                <MudTHeadRow>
                    <MudTh>@L["Datatype"]</MudTh>
                    @if (_datasetFrame.Columns.Count == StartAutoMlRequest.Schema.Count)
                    {
                        @foreach (var item in _datasetFrame.Columns)
                        {
                            <MudTh>
                                <MudSelect T="string" Value="@(StartAutoMlRequest.Schema[item.Name].DatatypeSelected.ID == null ? StartAutoMlRequest.Schema[item.Name].DatatypeDetected.ID : StartAutoMlRequest.Schema[item.Name].DatatypeSelected.ID)" ValueChanged="@((e) => {  OnSelectedDatetypeChanged(item.Name, e); })">
                                    @foreach (var datatype in StartAutoMlRequest.Schema[item.Name].DatatypesCompatible)
                                    {
                                        <MudSelectItem Value="@datatype.ID">
                                            <MudText Typo="Typo.body2">@L[datatype.Properties.ContainsKey("skos:prefLabel") ? datatype.Properties["skos:prefLabel"] : ""]</MudText>
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            </MudTh>
                        }
                    }
                    else
                    {
                        <MudText Typo="Typo.body2">@L["Datatype analysis incompatible with current dataset configuration, save current configuration to start new analysis"]</MudText>
                    }
                </MudTHeadRow>
                <MudTHeadRow>
                    <MudTh>@L["Role"]</MudTh>
                    @if (_datasetFrame.Columns.Count == StartAutoMlRequest.Schema.Count)
                    {
                        @foreach (var item in _datasetFrame.Columns)
                        {
                            <MudTh>
                                <MudSelect T="string" Value="@(StartAutoMlRequest.Schema[item.Name].RoleSelected.ID == null ? ":none" : StartAutoMlRequest.Schema[item.Name].RoleSelected.ID)" ValueChanged="@((e) => { OnSelectedRoleChanged(item.Name, e);  })">

                                    <MudSelectItem Value="@(":none")">
                                        <MudText Typo="Typo.body2">@L["none"]</MudText>
                                    </MudSelectItem>
                                    @foreach (var role in StartAutoMlRequest.Schema[item.Name].RolesCompatible)
                                    {
                                        <MudSelectItem Value="@role.ID">
                                            <MudText Typo="Typo.body2">@L[role.Properties.ContainsKey("skos:prefLabel") ? role.Properties["skos:prefLabel"] : ""]</MudText>
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            </MudTh>
                        }
                    }
                    else
                    {
                        <MudText Typo="Typo.body2">@L["Roles analysis incompatible with current dataset configuration, save current configuration to start new analysis"]</MudText>
                    }
                </MudTHeadRow>
            </HeaderContent>
            <RowTemplate>
                <MudTd></MudTd>
                @foreach (var item in context)
                {
                        <MudTd>@item</MudTd>
                }
            </RowTemplate>
            <PagerContent>
                <MudTablePager HorizontalAlignment="HorizontalAlignment.Left"/>
            </PagerContent>
        </MudTable>

    </MudStack>     
    
}

@code {
    private GetDatasetResponseDto _dataset;
    [Parameter]
    public GetDatasetResponseDto Dataset
    {
        get
        {
            return _dataset;
        }
        set
        {
            _dataset = value;
        }
    }
    [Parameter]
    public CreateTrainingRequestDto StartAutoMlRequest { get; set; }
    [Parameter]
    public EventCallback<CreateTrainingRequestDto> StartAutoMlRequestChanged { get; set; }
    private bool isPreviewRequestRunning = false;
    private DataFrame _datasetFrame;
    private GetDatasetPreviewResponseDto _datasetPreview;

    async Task UpdateStartAutoMlRequest()
    {
        await StartAutoMlRequestChanged.InvokeAsync(StartAutoMlRequest);
    }
    protected override async void OnInitialized()
    {
        try
        {
            await LoadDatasetPreview();
            await UpdateStartAutoMlRequest();
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
    private async Task LoadDatasetPreview()
    {
        //Due to frontend refreshes it may occur that this is triggered twice, leading to an error while the first request is reading
        if (isPreviewRequestRunning == true)
        {
            return;
        }
        try
        {
            isPreviewRequestRunning = true;
            GetDatasetPreviewRequestDto datasetRequest = new GetDatasetPreviewRequestDto()
            {
                    DatasetId = Dataset.Dataset.Id
            };
            ApiResponseDto apiResponse = await apiClient.GetDatasetPreview(datasetRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                _datasetPreview = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetPreviewResponseDto>(apiResponse.Result.ToString());
                // convert string to stream
                //byte[] byteArray = Encoding.ASCII.GetBytes(_datasetPreview.DatasetPreview);
                //MemoryStream stream = new MemoryStream(byteArray);
                List<object> nanDatatypesValuesPerColumn = new List<object>();
                _datasetFrame = DataFrame.LoadCsv(_datasetPreview.DatasetPreview, separator: Dataset.Dataset.GetDelimiter(), encoding: Dataset.Dataset.GetEncoding(), numRows: 20);
                foreach (var item in _datasetFrame.Columns)
                {
                    switch (item.DataType.Name)
                    {
                        case "String":
                            nanDatatypesValuesPerColumn.Add("NaN");
                            break;
                        case "Single":
                            nanDatatypesValuesPerColumn.Add(0);
                            break;
                        case "DateTime":
                            nanDatatypesValuesPerColumn.Add(DateTime.Now);
                            break;
                        default:
                            nanDatatypesValuesPerColumn.Add("NaN");
                            break;
                    }
                }
                _datasetFrame.FillNulls(nanDatatypesValuesPerColumn, true);
                
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
        isPreviewRequestRunning = false;
    }

    private bool TestConvertToDatetime(string column, bool all)
    {
        try
        {
            bool convertionSuccessfull = false;
            //"%Y-%m-%d  %H:%M:%S";
            string format = Dataset.Dataset.FileConfiguration["datetime_format"];
            format = format.Replace("%d", "dd");
            format = format.Replace("%m", "MM");
            format = format.Replace("%Y", "yyyy");
            format = format.Replace("%y", "yy");
            format = format.Replace("%H", "HH");
            format = format.Replace("%M", "mm");
            format = format.Replace("%S", "ss");

            //Check if all columns are compatible with new format
            if (all == true)
            {
                foreach (var item in _dataset.Dataset.Schema)
                {
                    if (item.Value.DatatypeSelected.ID == ":datetime")
                    {
                        foreach (var row in _datasetFrame.Columns[item.Key])
                        {
                            //Only string rows can be casted to datetime
                            if (format.Length == ((string)row).Length)
                            {
                                //If last cast fails we will assume none worked
                                DateTime dt;
                                convertionSuccessfull = DateTime.TryParseExact((string)row, format, null, DateTimeStyles.None, out dt);
                            }
                        }
                    }
                }
            }
            else
            {
                //Check a specific column
                foreach (var row in _datasetFrame.Columns[column])
                {
                    //Only string rows can be casted to datetime
                    if (format.Length == ((string)row).Length)
                    {
                        //If last cast fails we will assume none worked
                        DateTime dt;
                        convertionSuccessfull = DateTime.TryParseExact((string)row, format, null, DateTimeStyles.None, out dt);
                    }
                }
            }
            return convertionSuccessfull;
        }
        catch (Exception)
        {
            return false;
            throw;
        }
    }

    private async void OnSelectedDatetypeChanged(string columnName, string datatype)
    {
        if (datatype == ":datetime")
        {
            if (TestConvertToDatetime(columnName, false) != true)
            {
                viewNotifier.Show(L["Column {0} could not be casted to datetime", columnName], ViewNotifierType.Error, L["Operation Failed"]);
                return;
            }
        }
        StartAutoMlRequest.Schema[columnName].DatatypeSelected.ID = datatype;
        await UpdateStartAutoMlRequest();
    }
    private async void OnSelectedRoleChanged(string columnName, string role)
    {
        StartAutoMlRequest.Schema[columnName].RoleSelected.ID = role == ":none" ? null : role;
        await UpdateStartAutoMlRequest();
    }
}
