@inject IStringLocalizer<Global> L
@using System
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@using Microsoft.Data.Analysis

@if (_datasetFrame != null)
{
    <MudStack>
        <MudTimeline TimelineOrientation="@TimelineOrientation.Horizontal" TimelinePosition="@TimelinePosition.Bottom">
            <MudTimelineItem Color="Color.Secondary">
                <MudText Align="Align.Center" Typo="Typo.body2">@L["Dataset preparation"]</MudText>
            </MudTimelineItem>
            <MudTimelineItem>
                <MudText Align="Align.Center" Typo="Typo.body2">@L["Configuration"]</MudText>
            </MudTimelineItem>
        </MudTimeline>
        <MudTable Items="@_datasetFrame.Rows" style="width: stretch" class="mat-elevation-z5" FixedHeader="true" CustomHeader="true" >
            <HeaderContent>
                <MudTHeadRow>
                        <MudTh></MudTh>
                    @foreach (var item in _datasetFrame.Columns)
                    {

                        <MudTh>@ShortenColumnName(item.Name)</MudTh>
                    }
                </MudTHeadRow>
                <MudTHeadRow>
                    <MudTh>
                          <CardHeaderContent>

                              <div style="display: flex; align-items: center;">
                                  <span>@L["Datatype"]</span>
                                  <LabelTooltip Text="Using the dropdown menus you can modify the default datatypes of individual columns of the dataset, e.g. from Integer to Categorical." Position="Radzen.TooltipPosition.Top"></LabelTooltip>
                              </div>
                          </CardHeaderContent>
                    </MudTh>

                    @if (_datasetFrame.Columns.Count == StartAutoMlRequest.Schema.Count)
                    {
                        @foreach (var item in _datasetFrame.Columns)
                        {
                            <MudTh>
                                <MudSelect T="string" Value="@(StartAutoMlRequest.Schema[item.Name].DatatypeSelected.ID == null ? StartAutoMlRequest.Schema[item.Name].DatatypeDetected.ID : StartAutoMlRequest.Schema[item.Name].DatatypeSelected.ID)" ValueChanged="@((e) => { OnSelectedDatetypeChanged(item.Name, e); })"
                                    Class="mud-select-item-auto-width">
                                    @foreach (var datatype in StartAutoMlRequest.Schema[item.Name].DatatypesCompatible)
                                    {
                                        <MudSelectItem Value="@datatype.ID" Class="mud-select-item-auto-width">
                                            <MudText Typo="Typo.body2">@L[datatype.Properties.ContainsKey("skos:prefLabel") ? datatype.Properties["skos:prefLabel"] : ""]</MudText>
                                        </MudSelectItem>
                                    }
                                </MudSelect>

                            </MudTh>
                        }
                    }
                    else
                    {
                        <MudText Typo="Typo.body2">@L["Datatype analysis incompatible with current dataset configuration, save current configuration to start new analysis"]</MudText>
                    }
                </MudTHeadRow>
                <MudTHeadRow>
                    <MudTh>
                        <CardHeaderContent>
                            <div style="display: flex; align-items: center;">
                                <span>@L["Role"]</span>
                                <LabelTooltip Text="Using the dropdown menus  you can specify individual roles  of columns of the dataset.
                                             In the ‘default’ setting, a column is used as a feature for ML prediction.
                                            ‘Ignore’ means that a column is not used as a feature for ML prediction.
                                             ‘target’ means that the column is to be predicted by the ML model.
                                             Role ‘Index’ can be set if the column is used as a unique identifier of each row.
                                              In this case, the column is is not used as a feature for ML prediction, like for role ‘Ignore’." Position="Radzen.TooltipPosition.Top">
                                </LabelTooltip>
                            </div>
                        </CardHeaderContent>
                    </MudTh>
                    @if (_datasetFrame.Columns.Count == StartAutoMlRequest.Schema.Count)
                    {
                        @foreach (var item in _datasetFrame.Columns)
                        {
                            <MudTh>
                                <MudSelect T="string" Value="@(StartAutoMlRequest.Schema[item.Name].RoleSelected.ID == null ? ":Default" : StartAutoMlRequest.Schema[item.Name].RoleSelected.ID)" ValueChanged="@((e) => { OnSelectedRoleChanged(item.Name, e);  })">

                                    <MudSelectItem Value="@(":Default")">
                                        <MudText Typo="Typo.body2">@L["Default"]</MudText>
                                    </MudSelectItem>
                                    @foreach (var role in StartAutoMlRequest.Schema[item.Name].RolesCompatible)
                                    {
                                        <MudSelectItem Value="@role.ID">
                                            <MudText Typo="Typo.body2">@L[role.Properties.ContainsKey("skos:prefLabel") ? role.Properties["skos:prefLabel"] : ""]</MudText>
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            </MudTh>
                        }
                    }
                    else
                    {
                        <MudText Typo="Typo.body2">@L["Roles analysis incompatible with current dataset configuration, save current configuration to start new analysis"]</MudText>
                    }
                </MudTHeadRow>
            </HeaderContent>
            <RowTemplate>
                <MudTd></MudTd>
                @foreach (var item in context)
                {
                         <MudTd>@ShortenColumnName(item.ToString())</MudTd>
                }
            </RowTemplate>
            <PagerContent>
                <MudTablePager HorizontalAlignment="HorizontalAlignment.Left"/>
            </PagerContent>
        </MudTable>
    </MudStack>
}

@code {

    private string ShortenColumnName(string name)
    {
        if (string.IsNullOrEmpty(name))
            return string.Empty;

        return name.Length > 10 ? name.Substring(0, 10) + "..." : name;
    }
    private GetDatasetResponseDto _dataset;
	[Parameter] public GetDatasetResponseDto Dataset { get; set; }
    [Parameter] public CreateTrainingRequestDto StartAutoMlRequest { get; set; }
    [Parameter] public EventCallback<CreateTrainingRequestDto> StartAutoMlRequestChanged { get; set; }
    private bool isPreviewRequestRunning = false;
    private DataFrame _datasetFrame;
    private GetDatasetPreviewResponseDto _datasetPreview;

    async Task UpdateStartAutoMlRequest()
    {
        await StartAutoMlRequestChanged.InvokeAsync(StartAutoMlRequest);
    }
    protected override async void OnInitialized()
    {
        try
        {
            await LoadDatasetPreview();
            await UpdateStartAutoMlRequest();
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
    private async Task LoadDatasetPreview()
    {
        //Due to frontend refreshes it may occur that this is triggered twice, leading to an error while the first request is reading
        if (isPreviewRequestRunning == true)
        {
            return;
        }
        try
        {
            isPreviewRequestRunning = true;
            GetDatasetPreviewRequestDto datasetRequest = new GetDatasetPreviewRequestDto()
            {
                    DatasetId = Dataset.Dataset.Id
            };
            ApiResponseDto apiResponse = await apiClient.GetDatasetPreview(datasetRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                _datasetPreview = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetPreviewResponseDto>(apiResponse.Result.ToString());
                List<object> nanDatatypesValuesPerColumn = new List<object>();
                _datasetFrame = DataFrame.LoadCsv(_datasetPreview.DatasetPreview, separator: Dataset.Dataset.GetDelimiter(), encoding: Dataset.Dataset.GetEncoding(), numRows: 3);
                //Re-read dataframe but with all columns as string to avoid cut off of dome datatypes by the MS dataframe
                //Wait for Microsoft updates TODO
                Type[] stringArray = new Type[_datasetFrame.Columns.Count];
                for (int i = 0; i < _datasetFrame.Columns.Count; i++)
                {
                    stringArray[i] = typeof(String);
                }
                _datasetFrame = DataFrame.LoadCsv(_datasetPreview.DatasetPreview, dataTypes: stringArray, separator: Dataset.Dataset.GetDelimiter(), encoding: Dataset.Dataset.GetEncoding(), numRows: 10);
                foreach (var item in _datasetFrame.Columns)
                {
                    switch (item.DataType.Name)
                    {
                        case "String":
                            nanDatatypesValuesPerColumn.Add("NaN");
                            break;
                        case "Single":
                            nanDatatypesValuesPerColumn.Add(0);
                            break;
                        case "DateTime":
                            nanDatatypesValuesPerColumn.Add(DateTime.Now);
                            break;
                        default:
                            nanDatatypesValuesPerColumn.Add("NaN");
                            break;
                    }
                }
                _datasetFrame.FillNulls(nanDatatypesValuesPerColumn, true);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
        isPreviewRequestRunning = false;
    }

    private bool TestConvertToDatetime(string column, bool all)
    {
        try
        {
            bool convertionSuccessfull = false;
            //"%Y-%m-%d  %H:%M:%S";
            string format = Dataset.Dataset.FileConfiguration["datetime_format"];
            format = format.Replace("%d", "dd");
            format = format.Replace("%m", "MM");
            format = format.Replace("%Y", "yyyy");
            format = format.Replace("%y", "yy");
            format = format.Replace("%H", "HH");
            format = format.Replace("%M", "mm");
            format = format.Replace("%S", "ss");

            //Check if all columns are compatible with new format
            if (all == true)
            {
                foreach (var item in _dataset.Dataset.Schema)
                {
                    if (item.Value.DatatypeSelected.ID == ":datetime")
                    {
                        foreach (var row in _datasetFrame.Columns[item.Key])
                        {
                            //Only string rows can be casted to datetime
                            if (format.Length == ((string)row).Length)
                            {
                                //If last cast fails we will assume none worked
                                DateTime dt;
                                convertionSuccessfull = DateTime.TryParseExact((string)row, format, null, DateTimeStyles.None, out dt);
                            }
                        }
                    }
                }
            }
            else
            {
                //Check a specific column
                foreach (var row in _datasetFrame.Columns[column])
                {
                    //Only string rows can be casted to datetime
                    if (format.Length == ((string)row).Length)
                    {
                        //If last cast fails we will assume none worked
                        DateTime dt;
                        convertionSuccessfull = DateTime.TryParseExact((string)row, format, null, DateTimeStyles.None, out dt);
                    }
                }
            }
            return convertionSuccessfull;
        }
        catch (Exception)
        {
            return false;
            throw;
        }
    }

    private async void OnSelectedDatetypeChanged(string columnName, string datatype)
    {
        if (datatype == ":datetime")
        {
            if (TestConvertToDatetime(columnName, false) != true)
            {
                viewNotifier.Show(L["Column {0} could not be casted to datetime", columnName], ViewNotifierType.Error, L["Operation Failed"]);
                return;
            }
        }
        StartAutoMlRequest.Schema[columnName].DatatypeSelected.ID = datatype;
        await UpdateStartAutoMlRequest();
    }
    private async void OnSelectedRoleChanged(string columnName, string role)
    {
        StartAutoMlRequest.Schema[columnName].RoleSelected.ID = role == ":Default" ? null : role;
        await UpdateStartAutoMlRequest();
    }
}
