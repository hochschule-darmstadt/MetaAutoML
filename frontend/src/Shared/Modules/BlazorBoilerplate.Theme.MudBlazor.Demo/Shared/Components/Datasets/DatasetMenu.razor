@inject IStringLocalizer<Global> L
@inject NavigationManager NavManager
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IDialogService DialogService

@if (Dataset != null)
{
    <MudStack Row="true" >
        <MudButton Variant="Variant.Filled"
                    Color="Color.Secondary"
                    Size="Size.Small"
                    OnClick="@(e => { NavManager.NavigateTo("/datasets/" + Dataset.Id + "/train"); })">@L["Train"]</MudButton>

        <MudButton Variant="Variant.Filled"
                    Color="Color.Secondary"
                    Size="Size.Small"
                    OnClick="@DeleteDataset">@L["Delete"]</MudButton>
    </MudStack>
}

@code {
    [Parameter]
    public EventCallback OnDeleteCompleted { get; set; }
    [Parameter]
    public DatasetDto Dataset { get; set; }

    private async Task DeleteDataset()
    {
        try
        {
            ApiResponseDto apiResponseModel = await apiClient.GetModels(new GetModelsRequestDto() { DatasetId = Dataset.Id });
            if (apiResponseModel.IsSuccessStatusCode)
            {
                int modelsCount = Newtonsoft.Json.JsonConvert.DeserializeObject<GetModelsResponseDto>(apiResponseModel.Result.ToString()).Models.Count;
                if (modelsCount > 0)
                {
                    bool? confirmDelete = await DialogService.ShowMessageBox(
                        title: "Confirm Deletion",
                        message: $"The dataset '{Dataset.Name}' has {modelsCount} model(s) associated with it. Are you sure you want to delete it?",
                        yesText: "Delete",
                        cancelText: "Cancel",
                        options: new DialogOptions {
                            CloseOnEscapeKey = true,
                            DisableBackdropClick = true
                        }
                    );

                    if (confirmDelete != true)
                    {
                        return;
                    }
                }
            }

            DeleteDatasetRequestDto datasetRequest = new DeleteDatasetRequestDto()
                {
                    DatasetId = Dataset.Id
                };
            ApiResponseDto apiResponse = await apiClient.DeleteDataset(datasetRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                await OnDeleteCompleted.InvokeAsync();
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
                NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }


}
