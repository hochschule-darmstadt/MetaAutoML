@inject IStringLocalizer<Global> L
@inject NavigationManager NavManager
@inject IFileUploader fileUploader


<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent >
            <MudText Typo="Typo.h6">@L["Recent datasets"]</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudStack Row="true" Class="align-content-center" Style="margin-top: 8px">
                @*<UploadDataset OnUploadCompletedCallback="@OnUploadCompletedCallback"/>*@
                
                <MudButton OnClick="OnOpenUpload"
                    Variant="Variant.Filled" 
                    Color="Color.Secondary"
                    EndIcon="@Icons.Filled.AddBox"
                           Size="Size.Small">@L["Upload"]</MudButton>
                <MudButton Href="@("/datasets")"
                    Variant="Variant.Filled" 
                    Color="Color.Secondary"
                    EndIcon="@Icons.Filled.ArrowForward"
                        Size="Size.Small">@L["More"]</MudButton>
            </MudStack>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudPaper Height="20rem" Elevation="0">
            @if (Datasets == null)
            {
                <DataLoaderSpinner />
            }
            else
            {
        <MudTable Items="@Datasets.Datasets" FixedHeader="true" Height="20rem" style="width:stretch" class="mat-elevation-z5" AllowSelection="false" Dense="true" RowStyleFunc="@RowStyleFunc">
            <HeaderContent>
                <MudTh>@L["Name"]</MudTh>
                <MudTh>@L["Type"]</MudTh>
                <MudTh>@L["Size"]</MudTh>
                <MudTh>@L["Date"]</MudTh>
                <MudTh>@L["Time"]</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd>
                    <MudLink Href="@NavManager.ToAbsoluteUri("datasets/" + @context.Id).AbsoluteUri" Style="cursor: pointer; display: flex;"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ListAlt" Style="margin-right: 4px;" /> @context.Name</MudLink>
                </MudTd>
                <MudTd>@L[context.Type.Properties.ContainsKey("skos:prefLabel") ? context.Type.Properties["skos:prefLabel"] : ""]</MudTd>
                <MudTd>@FormatBytes(context.Analysis["size_bytes"])</MudTd>
                <MudTd style="white-space:nowrap;">@context.Analysis["creation_date"].ToString("dd-MM-yyyy")</MudTd>
                <MudTd style="white-space:nowrap;">@context.Analysis["creation_date"].ToString("HH:mm:ss")</MudTd>
            </RowTemplate>

        </MudTable>
            }
        </MudPaper>
    </MudCardContent>
</MudCard>

@code {
    //private DateTime NewestDate;

    [Parameter]
    public GetDatasetsResponseDto Datasets
    {
        get
        {
            return _datasets;
        }
        set
        {
            _datasets = value;

            if (_datasets != null)
            {
                _datasets.Datasets = _datasets.Datasets.OrderByDescending(x => x.Analysis["creation_date"]).Take(6).ToList();
                /* if (_datasets.Datasets.Count > 0)
                 {
                     NewestDate = _datasets.Datasets[0].Analysis["creation_date"];
                 }*/

                StateHasChanged();

            }
        }
    }

    private string RowStyleFunc(DatasetDto arg1, int index)
    {

        if (_datasets.Datasets.Count > 0)
        {
            if (arg1.Analysis["creation_date"] == _datasets.Datasets[0].Analysis["creation_date"])
            {
                return "background-color:rgba(255,148,61,0.25)";
            }
        }
        
            return "background-color:transparent";
        

    }
    private GetDatasetsResponseDto _datasets;
    [Parameter]
    public EventCallback OnUploadCompletedCallback { get; set; }

    private void OnOpenUpload()
    {
        fileUploader.IsPredictionDatasetToUpload = false;
        fileUploader.IsUploadDatasetDialogOpen = true;
        if (fileUploader.RefreshUploadComponentCallback != null)
        {
            fileUploader.RefreshUploadComponentCallback();
        }
    }
    public string FormatBytes(long bytes)
    {
        const int scale = 1024;
        string[] orders = new string[] { "GB", "MB", "KB", "Bytes" };
        long max = (long)Math.Pow(scale, orders.Length - 1);

        foreach (string order in orders)
        {
            if ( bytes > max )
                return string.Format("{0:##.##} {1}", decimal.Divide( bytes, max ), order);

            max /= scale;
        }
        return "0 Bytes";
    }
    }
