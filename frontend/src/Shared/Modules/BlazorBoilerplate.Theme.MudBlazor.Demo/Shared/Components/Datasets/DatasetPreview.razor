
@using System 
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Net.Http.Headers
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IJSRuntime JS
@inject IStringLocalizer<Global> L
@inject IHttpClientFactory ClientFactory


<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent >
            <MudText Typo="Typo.h6">Preview</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudPaper Height="250px" Elevation="0">
            @if (_dataset != null)
            {
                @switch (_dataset.Type.ID)
                {
                    case ":tabular":
                        <TabularPreview Dataset="_tabularDataset" />
                        break;
                    case ":image":
                        <ImagePreview Dataset="_imageDataset" />
                        break;
                    case ":text":
                        <TextPreview Dataset="_textDataset" />
                        break;
                    case ":time_series":
                        <TimeSeriesPreview Dataset="_timeSeriesDataset" />
                        break;
                    default:
                        break;
                }
            }
        </MudPaper>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public GetDatasetResponseDto Dataset
    { 
        get
        {
            return _dataset;
        } 
        set
        {
            _dataset = value;
            if (_dataset != null)
            {
                LoadDatasetPreview();
            }
            StateHasChanged();
        } 
    }
    private GetDatasetResponseDto _dataset;
    private GetDatasetPreviewResponseDto _datasetPreview;
    private bool isPreviewRequestRunning = false;
    private DataFrame _tabularDataset;
    private List<ImagePreviewDto> _imageDataset;
    private DataFrame _textDataset;
    private DataFrame _timeSeriesDataset;

    private async Task LoadDatasetPreview()
    {
        //Due to frontend refreshes it may occur that this is triggered twice, leading to an error while the first request is reading
        if (isPreviewRequestRunning == true)
        {
            return;
        }
        try
        {
            isPreviewRequestRunning = true;
            GetDatasetPreviewRequestDto datasetRequest = new GetDatasetPreviewRequestDto()
            {
                    DatasetIdentifier = _dataset.Identifier
            };
            ApiResponseDto apiResponse = await apiClient.GetDatasetPreview(datasetRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                _datasetPreview = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetPreviewResponseDto>(apiResponse.Result.ToString());
                switch (_dataset.Type.ID)
                {
                    case ":tabular":
                        _tabularDataset = DataFrame.LoadCsvFromString(_datasetPreview.DatasetPreview);
                        break;
                    case ":image":
                        _imageDataset = _datasetPreview.DatasetPreview.ToObject<List<ImagePreviewDto>>();
                        break;
                    case ":text":
                        _textDataset = DataFrame.LoadCsvFromString(_datasetPreview.DatasetPreview);
                        break;
                    case ":time_series":
                        _timeSeriesDataset = DataFrame.LoadCsvFromString(_datasetPreview.DatasetPreview);
                        break;
                    default:
                        break;
                }
                StateHasChanged();
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
        isPreviewRequestRunning = false;
    }

    //private Frame<int,string> ConvertCSVStringToFrame(string csvString)
    //{
    //    Frame<int,string> frame;
    //    using (var stream = new MemoryStream(Encoding.UTF8.GetBytes(csvString)))
    //    {
    //        using (var reader = new StreamReader(stream))
    //        {
    //            frame = Frame.ReadCsv(stream, separators:";", culture:"us-US");
    //        }
    //    }
    //    return frame;
    //}

    //private DataTable ConvertCSVStringToDataTable(string csvString)
    //{
    //    var table = new DataTable();

    //    using (var stream = new MemoryStream(Encoding.UTF8.GetBytes(csvString)))
    //    {
    //        using (var reader = new StreamReader(stream))
    //        {
    //            string header = reader.ReadLine();
    //            var fields = header.Split(";");
    //            foreach (string column in fields)
    //            {
    //                // add columns to new datatable based on first row of csv
    //                table.Columns.Add(column);
    //            }

    //            string row = reader.ReadLine();
    //            // read to end
    //            while (row != null)
    //            {
    //                // add each row to datatable 
    //                var rowDatas = row.Split(";");
    //                table.Rows.Add(rowDatas);
    //                row = reader.ReadLine();
    //            }
    //        }
    //    }
    //    return table;
    //}
}
