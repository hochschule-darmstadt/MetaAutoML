@*@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject NavigationManager NavManager
@inject IStringLocalizer<Global> L
@using System.Text.Json
@using System.Net.Http.Headers
@inject ILocalizationApiClient localizationApiClient
@inject IFileUploader fileUploader

<MudButton OnClick="@Open" Color="Color.Secondary" Variant="Variant.Filled" Size="Size.Small" EndIcon="@Icons.Material.Filled.CloudUpload">Add</MudButton>

<MudDialog @bind-IsVisible="_isVisible">
    <DialogContent>
        <MudPaper Height="120px" Elevation="0">
            @if (_datasetTypes == null)
            {
            
            }
            else
            {
                <MudStack>
                    <InputFile id="fileInput" OnChange="@FilesReady" hidden />
                    <MudButton HtmlTag="label"
                                Variant="Variant.Filled"
                                Color="Color.Secondary"
                                StartIcon="@Icons.Filled.CloudUpload"
                                for="fileInput">
                        Select Dataset
                    </MudButton>
                    <MudStack Row="true">
                        <MudSelect Label="Dataset type" T="string" ValueChanged="@OnDatasetTypeSelectChanged" Style="width: 150px">
                            @foreach (var item in _datasetTypes.DatasetTypes)
                            {
                                <MudSelectItem Value="@item.ID">@item.Properties["skos:prefLabel"]</MudSelectItem>
                            }
                        </MudSelect>
                        <MudTextField @bind-Value="@fileUploader.UploadFile.DatasetName" Label="Dataset Name"></MudTextField>
                    </MudStack>
                    @if (_isLoaderClosed == false)
                    {
                        <MudProgressLinear Color="Color.Secondary" Indeterminate="true"/>
                    }
                </MudStack>
            }
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Secondary" OnClick="Close">Close</MudButton>
        <MudButton StartIcon="@Icons.Filled.CloudUpload" Color="Color.Secondary" Disabled="@_downloadReady" OnClick="@Upload">Upload</MudButton>
    </DialogActions>
</MudDialog>

@code {

    //private GetDatasetTypesResponseDto _datasetTypes;
    //private bool _downloadReady = true;
    //private bool _isLoaderClosed = true;
    //private bool _isVisible = false;

    //[Parameter]
    //public EventCallback OnUploadCompletedCallback { get; set; }


    //protected override async void OnInitialized()
    //{
    //    fileUploader.UploadFile = new FileUploadRequestDto();
    //    await LoadDatasetTypes();
    //}

    //private async Task LoadDatasetTypes()
    //{
    //    try
    //    {
    //        ApiResponseDto apiResponse = new ApiResponseDto();
    //        apiResponse = await apiClient.GetDatasetTypes();
    //        if (apiResponse.IsSuccessStatusCode)
    //        {
    //            _datasetTypes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetTypesResponseDto>(apiResponse.Result.ToString());
    //            StateHasChanged();
    //            viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
    //        }
    //        else
    //        {
    //            viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
    //    }
    //}

    //private void OnDatasetTypeSelectChanged(string value)
    //{
    //    fileUploader.UploadFile.DatasetType = (string)value;
    //}

    //private void Open()
    //{
    //    _isVisible = true;
    //}

    //private void Close()
    //{
    //    _isVisible = false;
    //}
    //private async Task FilesReady(InputFileChangeEventArgs e)
    //{
    //    try
    //    {
    //        _isLoaderClosed = false;
    //        StateHasChanged();
    //        fileUploader.UploadFileContent = e.File;
    //        fileUploader.UploadFile.FileName = e.File.Name;
    //        fileUploader.UploadFile.DatasetName = e.File.Name;

    //        _downloadReady = false;
    //        _isLoaderClosed = true;
    //        StateHasChanged();
    //    }
    //    catch (Exception ex)
    //    {
    //        viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
    //    }
    //}
    //private async Task Upload()
    //{
    //    try
    //    {
    //        if (string.IsNullOrEmpty(fileUploader.UploadFile.DatasetName))
    //        {
    //            viewNotifier.Show("Please enter a dataset name first!", ViewNotifierType.Error, L["Operation Failed"]);
    //            return;
    //        }
    //        if (string.IsNullOrEmpty(fileUploader.UploadFile.DatasetType))
    //        {
    //            viewNotifier.Show("Please select a dataset type first!", ViewNotifierType.Error, L["Operation Failed"]);
    //            return;
    //        }
    //        if (string.IsNullOrEmpty(fileUploader.UploadFile.FileName))
    //        {
    //            viewNotifier.Show("Please select a file first!", ViewNotifierType.Error, L["Operation Failed"]);
    //            return;
    //        }

    //        _isLoaderClosed = false;
    //        _downloadReady = true;
    //        StateHasChanged();

    //        fileUploader.UploadDataset();

    //        _isLoaderClosed = true;
    //        _downloadReady = false;
    //        StateHasChanged();
    //        Close();
    //    }
    //    catch (Exception ex)
    //    {
    //        viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
    //    }
    //}
}
*@