@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Net.Http.Headers
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IJSRuntime JS
@inject IStringLocalizer<Global> L
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager

<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Analysis</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudPaper Elevation="0">
            @if (_analysis != null)
            {
                <MudGrid>
                    @foreach (var item in _analysis.Analyses)
                    {
                        <MudItem xs="12" Style="display: grid; justify-content: center;">
                            <MudText Typo="Typo.body2">@item.Description</MudText>
                        </MudItem>
                        <MudItem xs="12" Style="display: grid; justify-content: center;">
                            <MudImage Src="@GetImage(item.Content)" Style="height:220px;" />
                        </MudItem>
                    }
                </MudGrid>
            }
        </MudPaper>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public GetDatasetResponseDto Dataset
    {
        get
        {
            return _dataset;
        }
        set
        {
            _dataset = value;
            if (_dataset != null)
            {
                LoadDatasetAnalysis();
            }
            StateHasChanged();
        }
    }
    private GetDatasetResponseDto _dataset;
    private bool isPreviewRequestRunning = false;
    private GetDatasetAnalysisResponseDto _analysis;

    private async Task LoadDatasetAnalysis()
    {
        //Due to frontend refreshes it may occur that this is triggered twice, leading to an error while the first request is reading
        if (isPreviewRequestRunning == true)
        {
            return;
        }
        try
        {
            isPreviewRequestRunning = true;
            GetDatasetAnalysisRequestDto datasetRequest = new GetDatasetAnalysisRequestDto()
            {
                DatasetIdentifier = _dataset.Identifier,
                GetShortPreview = false
            };
            ApiResponseDto apiResponse = await apiClient.GetDatasetAnalysis(datasetRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                _analysis = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetAnalysisResponseDto>(apiResponse.Result.ToString());
                StateHasChanged();
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
        isPreviewRequestRunning = false;
    }
    string GetImage(byte[] image)
    {
        var imageSrc = Convert.ToBase64String(image);
        return string.Format("data:image/svg+xml;base64,{0}", imageSrc);
    }
}
