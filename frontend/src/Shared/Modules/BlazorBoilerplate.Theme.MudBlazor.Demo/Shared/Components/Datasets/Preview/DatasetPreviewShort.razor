
@using System 
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Net.Http.Headers
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IJSRuntime JS
@inject IStringLocalizer<Global> L
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager

<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent >
            <MudText Typo="Typo.h6">Preview</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            @if (_dataset != null)
            {
                if (_dataset.Type.ID == ":image")
                {
                    <MudButton Href="@NavManager.ToAbsoluteUri("datasets/" + @Dataset.Identifier + "/preview").AbsoluteUri"
                        Variant="Variant.Filled" 
                        EndIcon="@Icons.Material.Filled.ReadMore" 
                        Color="Color.Secondary"
                        Size="Size.Small"
                         Style="margin-top: 8px">More</MudButton>
                }
                else
                {
                    <MudButton Href="@NavManager.ToAbsoluteUri("datasets/" + @Dataset.Identifier + "/preview").AbsoluteUri"
                        Variant="Variant.Filled" 
                        EndIcon="@Icons.Material.Filled.ReadMore" 
                        Color="Color.Secondary"
                        Size="Size.Small"
                         Style="margin-top: 8px">Configure</MudButton>
                }
            }
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudPaper Height="250px" Elevation="0">
            @if (_readDatasetFailed == true)
            {
                <MudText Typo="Typo.body2">Dataset can not be read successfully, change file configuraiton.</MudText>
            }
            else
            {
                @if (_dataset != null)
                {
                    @switch (_dataset.Type.ID)
                    {
                        case ":time_series":
                        case ":text":
                        case ":tabular":
                            <TabularPreviewShort Dataset="_datasetFrame" />
                            break;
                        case ":image":
                            <ImagePreviewShort Dataset="_imageDataset" />
                            break;
                        default:
                            break;
                    }
                }
            }
        </MudPaper>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public GetDatasetResponseDto Dataset
    { 
        get
        {
            return _dataset;
        } 
        set
        {
            _dataset = value;
            if (_dataset != null)
            {
                LoadDatasetPreview();
            }
            StateHasChanged();
        } 
    }
    private GetDatasetResponseDto _dataset;
    private GetDatasetPreviewResponseDto _datasetPreview;
    private bool isPreviewRequestRunning = false;
    private Frame<int, string> _datasetFrame;
    private List<ImagePreviewDto> _imageDataset;
    private GetTabularDatasetColumnResponseDto _columns;

    [Parameter]
    public bool ReadDatasetFailed 
    {
        get 
        {
            return _readDatasetFailed;
        }
        set
        {
            _readDatasetFailed = value;
        }
    }
    [Parameter]
    public EventCallback<bool> ReadDatasetFailedChanged { get; set; }

    private bool _readDatasetFailed = false;

    private async Task LoadDatasetPreview()
    {
        //Due to frontend refreshes it may occur that this is triggered twice, leading to an error while the first request is reading
        if (isPreviewRequestRunning == true)
        {
            return;
        }
        try
        {
            isPreviewRequestRunning = true;
            GetDatasetPreviewRequestDto datasetRequest = new GetDatasetPreviewRequestDto()
            {
                    DatasetIdentifier = _dataset.Identifier
            };
            ApiResponseDto apiResponse = await apiClient.GetDatasetPreview(datasetRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                _datasetPreview = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetPreviewResponseDto>(apiResponse.Result.ToString());
                switch (_dataset.Type.ID)
                {
                    case ":time_series":
                    case ":text":
                    case ":tabular":
                        // convert string to stream
                        byte[] byteArray = Encoding.ASCII.GetBytes(_datasetPreview.DatasetPreview);
                        MemoryStream stream = new MemoryStream(byteArray);
                        _datasetFrame = Frame.ReadCsv(stream, separators: Dataset.GetDelimiterStr());

                        foreach (var item in _datasetFrame.ColumnKeys)
                        {
                            var newcolumn = _datasetFrame.Columns[item].FillMissing(st =>
                            {
                                return "NaN";
                            });
                            _datasetFrame.ReplaceColumn(item, newcolumn);
                        }

                        ReadDatasetFailed = false;
                        await ReadDatasetFailedChanged.InvokeAsync(ReadDatasetFailed);
                        
                        break;
                    case ":image":
                        _imageDataset = _datasetPreview.DatasetPreview.ToObject<List<ImagePreviewDto>>();
                        break;
                    default:
                        break;
                }
                StateHasChanged();
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            ReadDatasetFailed = true;
            await ReadDatasetFailedChanged.InvokeAsync(ReadDatasetFailed);
            StateHasChanged();
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
        isPreviewRequestRunning = false;
    }
}
