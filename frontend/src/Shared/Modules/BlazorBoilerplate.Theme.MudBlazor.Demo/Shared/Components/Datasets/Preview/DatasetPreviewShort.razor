
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Net.Http.Headers
@using Microsoft.Data.Analysis
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IJSRuntime JS
@inject IStringLocalizer<Global> L
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager


<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent >
            <MudText Typo="Typo.h6">@L["Preview"]</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            @if (_dataset != null)
            {
                if (_dataset.Dataset.Type.ID == ":image")
                {
                    <MudButton Href="@NavManager.ToAbsoluteUri("datasets/" + @Dataset.Dataset.Id + "/preview").AbsoluteUri"
                               Variant="Variant.Filled"
                               EndIcon="@Icons.Material.Filled.ReadMore"
                               Color="Color.Secondary"
                               Size="Size.Small"
                               Style="margin-top: 8px">@L["More"]</MudButton>
                        }
                        else
                        {
                            <ButtonTooltip Text="Click here to to configure datatypes and roles of the dataset columns. " Position="Placement.Left">
                                <MudButton Href="@NavManager.ToAbsoluteUri("datasets/" + @Dataset.Dataset.Id + "/preview").AbsoluteUri"
                                           Variant="Variant.Filled"
                                           EndIcon="@Icons.Material.Filled.ReadMore"
                                           Color="Color.Secondary"
                                           Size="Size.Small"
                                           Style="margin-top: 8px">@L["Configure"]</MudButton>
                                </ButtonTooltip>
                                        }
                                        }
                                </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudPaper Height="250px" Elevation="0">
            @if (_readDatasetFailed == true)
            {
                <MudText Typo="Typo.body2">@L["Dataset can not be read successfully, change file configuration."]</MudText>
            }
            else
            {
                @if (_dataset != null)
                {
                    @switch (_dataset.Dataset.Type.ID)
                    {
                        case ":time_series_longitudinal":
                        case ":time_series":
                        case ":text":
                        case ":tabular":
                            <TabularPreviewShort Dataset="_datasetFrame" />
                            break;
                        case ":image":
                            <ImagePreviewShort Dataset="_imageDataset" />
                            break;
                        default:
                            break;
                    }
                }
            }
        </MudPaper>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public GetDatasetResponseDto Dataset
    {
        get
        {
            return _dataset;
        }
        set
        {
            _dataset = value;
            if (_dataset != null)
            {
                LoadDatasetPreview();
            }
            StateHasChanged();
        }
    }
    private GetDatasetResponseDto _dataset;
    private GetDatasetPreviewResponseDto _datasetPreview;
    private bool isPreviewRequestRunning = false;
    private DataFrame _datasetFrame;
    private List<ImagePreviewDto> _imageDataset;

    [Parameter]
    public bool ReadDatasetFailed
    {
        get
        {
            return _readDatasetFailed;
        }
        set
        {
            _readDatasetFailed = value;
        }
    }
    [Parameter]
    public EventCallback<bool> ReadDatasetFailedChanged { get; set; }

    private bool _readDatasetFailed = false;

    private async Task LoadDatasetPreview()
    {
        //Due to frontend refreshes it may occur that this is triggered twice, leading to an error while the first request is reading
        if (isPreviewRequestRunning == true)
        {
            return;
        }
        try
        {
            isPreviewRequestRunning = true;
            GetDatasetPreviewRequestDto datasetRequest = new GetDatasetPreviewRequestDto()
            {
                    DatasetId = _dataset.Dataset.Id
            };
            ApiResponseDto apiResponse = await apiClient.GetDatasetPreview(datasetRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                _datasetPreview = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetPreviewResponseDto>(apiResponse.Result.ToString());
                switch (_dataset.Dataset.Type.ID)
                {
                    case ":time_series_longitudinal":
                    case ":time_series":
                    case ":text":
                    case ":tabular":

                        List<object> nanDatatypesValuesPerColumn = new List<object>();
                        _datasetFrame = DataFrame.LoadCsv(_datasetPreview.DatasetPreview, separator: Dataset.Dataset.GetDelimiter(), encoding: Dataset.Dataset.GetEncoding(), numRows: 3);//Frame.ReadCsv(stream, separators: Dataset.Dataset.GetDelimiterStr());
                        //Re-read dataframe but with all columns as string to avoid cut off of dome datatypes by the MS dataframe
                        //Wait for Microsoft updates TODO
                        Type[] stringArray = new Type[_datasetFrame.Columns.Count];
                        for (int i = 0; i < _datasetFrame.Columns.Count; i++)
                        {
                            stringArray[i] = typeof(String);
                        }
                        _datasetFrame = DataFrame.LoadCsv(_datasetPreview.DatasetPreview, dataTypes: stringArray, separator: Dataset.Dataset.GetDelimiter(), encoding: Dataset.Dataset.GetEncoding(), numRows: 20);
                        foreach (var item in _datasetFrame.Columns)
                        {
                            switch (item.DataType.Name)
                            {
                                case "String":
                                    nanDatatypesValuesPerColumn.Add("NaN");
                                    break;
                                case "Single":
                                    nanDatatypesValuesPerColumn.Add(0);
                                    break;
                                case "DateTime":
                                    nanDatatypesValuesPerColumn.Add(DateTime.Now);
                                    break;
                                default:
                                    nanDatatypesValuesPerColumn.Add("NaN");
                                    break;
                            }
                        }
                        _datasetFrame.FillNulls(nanDatatypesValuesPerColumn, true);

                        ReadDatasetFailed = false;
                        await ReadDatasetFailedChanged.InvokeAsync(ReadDatasetFailed);

                        break;
                    case ":image":
                        _imageDataset = _datasetPreview.DatasetPreview.ToObject<List<ImagePreviewDto>>();
                        break;
                    default:
                        break;
                }
                StateHasChanged();
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            ReadDatasetFailed = true;
            await ReadDatasetFailedChanged.InvokeAsync(ReadDatasetFailed);
            StateHasChanged();
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
        isPreviewRequestRunning = false;
    }
}
