
@using System 
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Net.Http.Headers
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IJSRuntime JS
@inject IStringLocalizer<Global> L
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager

<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent >
            <MudText Typo="Typo.h6">Preview</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            @if (_dataset != null)
            {
                <MudButton Href="@NavManager.ToAbsoluteUri("datasets/" + @Dataset.Identifier + "/preview").AbsoluteUri"
                    Variant="Variant.Filled" 
                    EndIcon="@Icons.Material.Filled.ReadMore" 
                    Color="Color.Secondary"
                    Size="Size.Small"
                     Style="margin-top: 8px">More</MudButton>
            }
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudPaper Height="250px" Elevation="0">
            @if (_readDatasetFailed == true)
            {
                <MudText Typo="Typo.body2">Dataset can not be read successfully, change file configuraiton.</MudText>
            }
            else
            {
                @if (_dataset != null)
                {
                    @switch (_dataset.Type.ID)
                    {
                        case ":time_series":
                        case ":text":
                        case ":tabular":
                            <TabularPreviewShort Dataset="_tabularDataset" />
                            break;
                        case ":image":
                            <ImagePreviewShort Dataset="_imageDataset" />
                            break;
                        default:
                            break;
                    }
                }
            }
        </MudPaper>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public GetDatasetResponseDto Dataset
    { 
        get
        {
            return _dataset;
        } 
        set
        {
            _dataset = value;
            if (_dataset != null)
            {
                LoadDatasetPreview();
            }
            StateHasChanged();
        } 
    }
    private GetDatasetResponseDto _dataset;
    private GetDatasetPreviewResponseDto _datasetPreview;
    private bool isPreviewRequestRunning = false;
    private DataFrame _tabularDataset;
    private List<ImagePreviewDto> _imageDataset;
    private GetTabularDatasetColumnResponseDto _columns;

    private bool _readDatasetFailed = false;

    private async Task LoadDatasetPreview()
    {
        //Due to frontend refreshes it may occur that this is triggered twice, leading to an error while the first request is reading
        if (isPreviewRequestRunning == true)
        {
            return;
        }
        try
        {
            isPreviewRequestRunning = true;
            GetDatasetPreviewRequestDto datasetRequest = new GetDatasetPreviewRequestDto()
            {
                    DatasetIdentifier = _dataset.Identifier
            };
            ApiResponseDto apiResponse = await apiClient.GetDatasetPreview(datasetRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                _datasetPreview = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetPreviewResponseDto>(apiResponse.Result.ToString());
                switch (_dataset.Type.ID)
                {
                    case ":time_series":
                    case ":text":
                    case ":tabular":
                        _tabularDataset = DataFrame.LoadCsvFromString(_datasetPreview.DatasetPreview,separator:_dataset.GetDelimiter());
                        _readDatasetFailed = false;
                        //apiResponse = await apiClient.GetTabularDatasetColumn(new GetTabularDatasetColumnRequestDto { DatasetIdentifier = Dataset.Identifier });

                        //if (apiResponse.IsSuccessStatusCode)
                        //{
                        //    //_columns = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTabularDatasetColumnResponseDto>(apiResponse.Result.ToString());
                        //    //List<string> columnNames = _columns.Columns.Select(x => x.Name).ToList();
                        //    //List<Type> columnTypes = _columns.Columns.Select(x =>
                        //    //{
                        //    //    switch (x.Type)
                        //    //    {
                        //    //        case Server.DataType.String:
                        //    //            return typeof(string);
                        //    //        case Server.DataType.Int:
                        //    //            return typeof(int);
                        //    //        case Server.DataType.Float:
                        //    //            return typeof(string);  //Float value are currently not really supported somehow, maybe in next release of the analytic package. To avoid casting to wrong type use string
                        //    //        case Server.DataType.Boolean:
                        //    //            return typeof(int);
                        //    //        case Server.DataType.Datetime:
                        //    //            return typeof(DateTime);
                        //    //        default:
                        //    //            return typeof(string);

                        //    //    }
                        //    //}).ToList();
                        //    //_tabularDataset = DataFrame.LoadCsvFromString(_datasetPreview.DatasetPreview,columnNames:columnNames.ToArray(), dataTypes:columnTypes.ToArray());
                        //    _tabularDataset = DataFrame.LoadCsvFromString(_datasetPreview.DatasetPreview,separator:_dataset.GetDelimiter());
                        //}
                        //else
                        //{
                        //    viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
                        //}
                        break;
                    case ":image":
                        _imageDataset = _datasetPreview.DatasetPreview.ToObject<List<ImagePreviewDto>>();
                        break;
                    default:
                        break;
                }
                StateHasChanged();
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            _readDatasetFailed = true;
            StateHasChanged();
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
        isPreviewRequestRunning = false;
    }
}
