
@using System 
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Net.Http.Headers
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IJSRuntime JS
@inject IStringLocalizer<Global> L
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager

<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent >
            <MudText Typo="Typo.h6">Analysis</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            @if (_dataset != null)
            {
                <MudButton Href="@NavManager.ToAbsoluteUri("datasets/" + @Dataset.Identifier + "/analysis").AbsoluteUri"
                       Variant="Variant.Filled"
                       EndIcon="@Icons.Material.Filled.ReadMore"
                       Color="Color.Secondary"
                       Size="Size.Small"
                       Style="margin-top: 8px">More</MudButton>
            }
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudPaper Height="250px" Elevation="0">
            @if (_analysis != null)
            {
                <MudCarousel Class="mud-width-full" ItemsSource="@_analysis.Analyses" Style="height:250px;" AutoCycle="false">
                    <ItemTemplate>
                        <MudGrid>
                            <MudItem xs="6" Style="position: relative;">
                                <MudText Style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);" Typo="Typo.body2">@context.Description</MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudImage Src="@GetImage(context.Content)" Style="height:220px;" />
                            </MudItem>
                        </MudGrid>
                    </ItemTemplate>
                </MudCarousel>
            }
        </MudPaper>
    </MudCardContent>
</MudCard>


@code {
    [Parameter]
    public GetDatasetResponseDto Dataset
    {
        get
        {
            return _dataset;
        }
        set
        {
            _dataset = value;
            if (_dataset != null)
            {
                LoadDatasetAnalysis();
            }
            StateHasChanged();
        }
    }
    private GetDatasetResponseDto _dataset;
    private GetDatasetAnalysisResponseDto _analysis;
    private bool isPreviewRequestRunning = false;

    private async Task LoadDatasetAnalysis()
    {
        try
        {
            //Due to frontend refreshes it may occur that this is triggered twice, leading to an error while the first request is reading
            if (isPreviewRequestRunning == true)
            {
                return;
            }
            isPreviewRequestRunning = true;
            GetDatasetAnalysisRequestDto datasetRequest = new GetDatasetAnalysisRequestDto()
            {
                DatasetIdentifier = _dataset.Identifier,
                GetShortPreview = true
            };
            ApiResponseDto apiResponse = await apiClient.GetDatasetAnalysis(datasetRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                _analysis = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetAnalysisResponseDto>(apiResponse.Result.ToString());
                StateHasChanged();
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
        isPreviewRequestRunning = false;
    }
    string GetImage(byte[] image)
    {
        var imageSrc = Convert.ToBase64String(image);
        return string.Format("data:image/svg+xml;base64,{0}", imageSrc);
    }
}
