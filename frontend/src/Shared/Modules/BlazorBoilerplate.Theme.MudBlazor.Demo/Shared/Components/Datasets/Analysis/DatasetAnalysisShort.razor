@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Net.Http.Headers
@using System.Timers
@implements IDisposable
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IJSRuntime JS
@inject IStringLocalizer<Global> L
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager
<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@L["Analysis"]</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            @if (_dataset != null)
            {
                <ButtonTooltip Text="@L["Datasets.Dataset.Analysis.More.tooltip"]" Position="Placement.Top">
                    <MudButton Href="@NavManager.ToAbsoluteUri("datasets/" + @Dataset.Dataset.Id + "/analysis").AbsoluteUri"
                        Variant="Variant.Filled"
                        Disabled="@(_analysis == null || _analysis.ydataprofilling == "" || _analysis.ydataprofilling == "none")"
                        StartIcon="@Icons.Material.Filled.ReadMore"
                        Color="Color.Secondary"
                        Size="Size.Small"
                        Style="margin-top: 8px">@L["More"]</MudButton>
                </ButtonTooltip>
            }
        </CardHeaderActions>
    </MudCardHeader>
<MudCardContent>
    <MudPaper Height="250px" Elevation="6" Class="d-flex align-items-center justify-content-center">
            @if (_analysis == null || _analysis.ydataprofilling == ""){
                <MudTooltip Text="The advanced analysis is running in the background, this might take a moment!">
                    <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
                </MudTooltip>
            }
            else if (_analysis.ydataprofilling == null)
            {
                <MudTooltip Text="The advanced analysis is not available for this data set!">
                    <MudText>For the advance analysis you have to go to configuration page and click saving button</MudText>
                </MudTooltip>
            }
            else if (_analysis.ydataprofilling == "none")
            {
                <MudTooltip Text="The advanced analysis is not available for this data set!">
                    <MudText>The advanced analysis is not available for this data set!</MudText>
                </MudTooltip>
            }
            else {
                <MudButton Href="@NavManager.ToAbsoluteUri($"datasets/{_dataset.Dataset.Id}/analysis").AbsoluteUri" Class="d-flex align-items-center justify-content-center">
                    <MudImage Src=@($"_content/BlazorBoilerplate.Theme.MudBlazor/images/data-analysis-preview.PNG") Height="200" Width="400" ObjectFit="ObjectFit.Fill"/>
                </MudButton>
            }
    </MudPaper>
</MudCardContent>
</MudCard>


@code {
    [Parameter]
    public GetDatasetResponseDto Dataset
    {
        get
        {
            return _dataset;
        }
        set
        {
            _dataset = value;
            if (_dataset != null)
            {
                InitializeTimer();
                LoadDatasetAnalysis();
            }
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        _refreshTimer?.Stop();
        _refreshTimer?.Dispose();
    }

    private Timer _refreshTimer;
    private GetDatasetResponseDto _dataset;
    private GetDatasetAnalysisResponseDto _analysis;
    private bool isPreviewRequestRunning = false;

    private void InitializeTimer()
    {
        _refreshTimer?.Dispose();
        _refreshTimer = new Timer(5000); // checks every 5 seconds
        _refreshTimer.Elapsed += OnTimerElapsed;
        _refreshTimer.AutoReset = true;
        _refreshTimer.Start();
    }

    private void OnTimerElapsed(object sender, ElapsedEventArgs e)
    {
        InvokeAsync(async () =>
        {
            await LoadDatasetAnalysis();
            if (_analysis?.ydataprofilling != "")
            {
                _refreshTimer.Stop();
                _refreshTimer.Dispose();
                StateHasChanged();
            }
        });
    }

    private async Task LoadDatasetAnalysis()
    {
        try
        {
            //Due to frontend refreshes it may occur that this is triggered twice, leading to an error while the first request is reading
            if (isPreviewRequestRunning == true)
            {
                return;
            }
            isPreviewRequestRunning = true;
            GetDatasetAnalysisRequestDto datasetRequest = new GetDatasetAnalysisRequestDto()
                {
                    DatasetId = _dataset.Dataset.Id,
                    GetShortPreview = true
                };
            ApiResponseDto apiResponse = await apiClient.GetDatasetAnalysis(datasetRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                _analysis = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetAnalysisResponseDto>(apiResponse.Result.ToString());
                StateHasChanged();
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
        isPreviewRequestRunning = false;
    }

}
