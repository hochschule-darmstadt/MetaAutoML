@inject IStringLocalizer<Global> L
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject NavigationManager NavManager


@if (Training != null)
{

     <MudMenu Icon="@Icons.Material.Filled.MoreVert">
        <MudStack colunm="true" >
            <MudMenuItem  OnClick="@(e => { NavManager.NavigateTo("trainings/" + Training.Id); })">@L["Details"]</MudMenuItem>
            <MudMenuItem  OnClick="@DeleteTraining">@L["Delete"]</MudMenuItem>
        </MudStack>
    </MudMenu>
}

@code {
    [Parameter]
    public EventCallback OnDeleteCompleted { get; set; }
    [Parameter]
    public TrainingMetadataDto Training { get; set; }
    private async Task DeleteTraining()
    {
        try
        {
            ApiResponseDto apiResponse = await apiClient.DeleteTraining(new DeleteTrainingRequestDto { TrainingId = Training.Id });

            if (apiResponse.IsSuccessStatusCode)
            {
                await OnDeleteCompleted.InvokeAsync();
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
                NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

}
