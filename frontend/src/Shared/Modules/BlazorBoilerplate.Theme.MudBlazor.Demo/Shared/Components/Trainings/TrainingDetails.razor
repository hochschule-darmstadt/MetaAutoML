@inject IStringLocalizer<Global> L
@inject NavigationManager NavManager
@using System.Timers
@implements IDisposable
@inject IViewNotifier viewNotifier
@inject IApiClient apiClient

<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent >
            <MudText Typo="Typo.h6">@L["Leaderboard"]</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudPaper Elevation="0">
            @if (Training == null)
            {
                <DataLoaderSpinner />
            }
            else
            {
                <TrainingTimeline Training="@Training" />
                <MudTable Items="@Training.Training.models" Context="models" Filter="new Func<ModelDto,bool>(FilterFunc)">
                    <ToolBarContent>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString" Placeholder="@L["Search by AutoML solution, Status, Model or Library"]" Adornment="Adornment.Start"
                                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="@(new Func<ModelDto, object>(x=>x.AutoMlSolution.Properties["skos:prefLabel"]))">@L["AutoML solution"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<ModelDto, object>(x=>x.Status)">@L["Status"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="@(new Func<ModelDto, object>(x=>x.MlModelType.Properties["skos:prefLabel"]))">@L["Model"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="@(new Func<ModelDto, object>(x=>x.MlLibrary.Properties["skos:prefLabel"]))">@L["Library"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<ModelDto, object>(x=>x.TestScore)">@L["Test score"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<ModelDto, object>(x=>x.PredictionTime)">@L["Prediction time per sample"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<ModelDto, object>(x=>x.RuntimeProfile)">@L["Total training time"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<ModelDto, object>(x=>x.Emissions)">@L["Emissions kg/CO2-eq"]</MudTableSortLabel></MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            @(models.AutoMlSolution.Properties.ContainsKey("skos:prefLabel") ? models.AutoMlSolution.Properties["skos:prefLabel"] : "")
                        </MudTd>
                        <MudTd>
                            @if (models.Status == "busy")
                            {
                                <MudProgressCircular Size="Size.Small" Color="Color.Secondary" Indeterminate="true" />
                            }
                            else
                            {
                                @L[models.Status]
                            }
                        </MudTd>
                        <MudTd>
                            <MudLink Href="@NavManager.ToAbsoluteUri("trainings/" + Training.Training.Id + "/models/" + @models.Id).AbsoluteUri" Style="cursor: pointer; display: flex;"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Lightbulb" Style="margin-right: 4px;" />@(models.MlModelType.Properties.ContainsKey("skos:prefLabel") ? models.MlModelType.Properties["skos:prefLabel"] : "")</MudLink>
                        </MudTd>
                            <MudTd>@(models.MlLibrary.Properties.ContainsKey("skos:prefLabel") ? models.MlLibrary.Properties["skos:prefLabel"] : "")</MudTd>
                        <MudTd>@(String.Format("{0:0.00}", models.TestScore))</MudTd>
                        <MudTd>@(String.Format("{0:0}", models.PredictionTime)) ms</MudTd>
                        <MudTd>
                            @if (models.Status == "busy")
                            {
                                @(DateTime.UtcNow.Subtract(models.RuntimeProfile.StartTime).TotalSeconds.ToString("0 s"))
                            }
                            else
                            {
                                @(models.RuntimeProfile.EndTime.Subtract(models.RuntimeProfile.StartTime).TotalSeconds.ToString("0 s"))
                            }
                        </MudTd>
                        <MudTd>
                            @if (models.Status == "busy")
                            {
                                @("0")
                            }
                            else
                            {
                                @(String.Format("{0:0.00000}", models.Emissions))
                            }
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            }
        </MudPaper>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public GetTrainingResponseDto Training
    { 
        get
        {
            return _training;
        } 
        set
        {
            _training = value;
            if(_training != null)
            {
                RefreshTraining(null, null);
                _timer = new Timer()
                {
                    AutoReset = true,
                    Enabled = true,
                    Interval = 2000
                };
                _timer.Elapsed += RefreshTraining;
                StateHasChanged();
            }
        } 
    }
    private GetTrainingResponseDto _training;
    private Timer _timer;
    private string searchString = "";

    private bool FilterFunc(ModelDto element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.AutoMlSolution.Properties["skos:prefLabel"].Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.MlLibrary.Properties["skos:prefLabel"].Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.MlModelType.Properties["skos:prefLabel"].Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    } 
    public void Dispose()
    {
        DisposeTimer();
    }

    SemaphoreSlim timerSemaphore = new SemaphoreSlim(1);
    private async void RefreshTraining(object sender, ElapsedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            var gotLock = timerSemaphore.Wait(0);
            if (!gotLock)
            {
                return;
            }
            try
            {
                if (_training.Training.Status != "busy")
                {
                    DisposeTimer();
                    return;
                }
                
                ApiResponseDto apiResponse = await apiClient.GetTraining(new GetTrainingRequestDto { TrainingId = Training.Training.Id });

                if (apiResponse.IsSuccessStatusCode)
                {
                    _training = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTrainingResponseDto>(apiResponse.Result.ToString());
                    StateHasChanged();
                }
                //Training does not exist anymore
                else if (apiResponse.StatusCode == 404)
                {
                    DisposeTimer();
                    return;
                }
                else
                {
                    viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
                }
                
            }
            catch (Exception ex)
            {
                viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
            }
            finally
            {
                timerSemaphore.Release();
            }
        });
    }

    public void DisposeTimer(){
        if(_timer!=null){
            _timer.Elapsed -= RefreshTraining;
            _timer?.Dispose();
            _timer = null;
        }
    }
}
