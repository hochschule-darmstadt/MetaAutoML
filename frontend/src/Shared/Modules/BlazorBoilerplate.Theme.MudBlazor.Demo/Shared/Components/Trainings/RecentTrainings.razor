@inject IStringLocalizer<Global> L
@inject NavigationManager NavManager
@using System.Linq
@using System.Timers
@inject IViewNotifier viewNotifier
@inject IApiClient apiClient
@implements IDisposable

<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent >
            <MudText Typo="Typo.h6">@L["Recent trainings"]</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudButton Href="@("/trainings")"
                Variant="Variant.Filled" 
                EndIcon="@Icons.Material.Filled.MoreHoriz" 
                Color="Color.Secondary"
                Size="Size.Small"
                Style="margin-top: 8px">@L["Details"]</MudButton>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudPaper Height="250px" Elevation="0">
            @if (Trainings == null)
            {
                 <DataLoaderSpinner />
            }
            else
            {
                <MudTable Items="@_trainings.Trainings" style="width:stretch" class="mat-elevation-z5" AllowSelection="false" Dense="true">
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<TrainingDto, object>(x=>x.RuntimeProfile.StartTime)">@L["Start datetime"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<TrainingDto, object>(x=>x.Status)">@L["Status"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<TrainingDto, object>(x=>x.DatasetName)">@L["Dataset"]</MudTableSortLabel></MudTh>
                        <MudTh>Task</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudLink Href="@NavManager.ToAbsoluteUri("trainings/" + @context.Id).AbsoluteUri" Style="cursor: pointer; display: flex;"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ModelTraining" Style="margin-right: 4px;" /> @context.RuntimeProfile.StartTime.ToString("dd/MM/yy HH:mm")</MudLink>
                        </MudTd>
                        <MudTd>
                            @if (context.Status == "busy")
                            {
                                <MudProgressCircular Size="Size.Small"  Color="Color.Secondary" Indeterminate="true"/>
                            }
                            else
                            {
                                @L[context.Status]
                            }
                        </MudTd>
                        <MudTd>@context.DatasetName</MudTd>
                        <MudTd>@L[context.Configuration.Task.Properties.ContainsKey("skos:prefLabel") ? context.Configuration.Task.Properties["skos:prefLabel"] : ""]</MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudPaper>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public GetTrainingsResponseDto Trainings 
    { 
        get
        {
            return _trainings;
        } 
        set
        {
            _trainings = value;
            if(_trainings != null)
            {
                _trainings.Trainings = _trainings.Trainings.Where(x => x.RuntimeProfile.StartTime > DateTime.Now.AddDays(-1)).Take(6).ToList();
                RefreshRecentTrainings(null, null);
                _timer = new Timer()
                {
                    AutoReset = true,
                    Enabled = true,
                    Interval = 5000
                };
                _timer.Elapsed += RefreshRecentTrainings;
                StateHasChanged();
            }
        } 
    }
    private GetTrainingsResponseDto _trainings;
    private Timer _timer;
    private string searchString = "";


    private bool FilterFunc(TrainingDto element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Configuration.Task.Properties["skos:prefLabel"].Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.DatasetName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    } 

    public void Dispose()
    {
        DisposeTimer();
    }
    SemaphoreSlim timerSemaphore = new SemaphoreSlim(1);
    private async void RefreshRecentTrainings(object sender, ElapsedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            var gotLock = timerSemaphore.Wait(0);
            if (!gotLock)
            {
                return;
            }
            try
            {
                if (_trainings.Trainings.Where(x => x.Status == "busy").ToList().Count == 0)
                {
                    DisposeTimer();
                    return;
                }

                for (int i = 0; i < _trainings.Trainings.Count; i++)
                {
                    if (_trainings.Trainings[i].Status == "busy")
                    {
                        ApiResponseDto apiResponse = await apiClient.GetTraining(new GetTrainingRequestDto { TrainingId = _trainings.Trainings[i].Id });

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            _trainings.Trainings[i] = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTrainingResponseDto>(apiResponse.Result.ToString()).Training;
                            StateHasChanged();
                        }
                        //Training does not exist anymore
                        else if (apiResponse.StatusCode == 404)
                        {
                            _trainings.Trainings.RemoveAt(i);
                            DisposeTimer();
                            return;
                        }
                        else
                        {
                            viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
            }
            finally
            {
                timerSemaphore.Release();
            }
        });
    }

    public void DisposeTimer(){
        if(_timer!=null)
        {
            _timer.Stop();
            _timer.Elapsed -= RefreshRecentTrainings;
            _timer?.Dispose();
            _timer = null;
        }
    }
}
