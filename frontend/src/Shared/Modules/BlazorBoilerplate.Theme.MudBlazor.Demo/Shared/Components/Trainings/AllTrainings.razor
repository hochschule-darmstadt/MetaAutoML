@inject IStringLocalizer<Global> L
@inject NavigationManager NavManager
@using System.Linq
@using System.Timers
@implements IDisposable
@inject IViewNotifier viewNotifier
@inject IApiClient apiClient

<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent >
            <MudText Typo="Typo.h6">@L["Past training"]</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        @if (Trainings == null)
        {
             <DataLoaderSpinner />
        }
        else
        {
            <MudTable Items="@_trainings.Trainings" style="width:stretch" class="mat-elevation-z5" AllowSelection="false" Filter="new Func<TrainingDto,bool>(FilterFunc)">
                <ToolBarContent>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString" Placeholder="@L["Search for status, task or dataset type"]" Adornment="Adornment.Start"
                                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<TrainingDto, object>(x=>x.StartTime)">@L["Start datetime"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<TrainingDto, object>(x=>x.Status)">@L["Status"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<TrainingDto, object>(x=>x.DatasetName)">@L["Dataset"]</MudTableSortLabel></MudTh>
                    <MudTh>@L["Task"]</MudTh>
                </HeaderContent>
                <RowTemplate>
                   <MudTd>
                        <MudLink Href="@NavManager.ToAbsoluteUri("trainings/" + @context.Identifier).AbsoluteUri" Style="cursor: pointer; display: flex;"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ModelTraining" Style="margin-right: 4px;" /> @context.StartTime.ToString("dd/MM/yy HH:mm")</MudLink>
                   </MudTd>
                    <MudTd>
                        @if (context.Status == "busy")
                        {
                            <MudProgressCircular Size="Size.Small"  Color="Color.Secondary" Indeterminate="true"/>
                        }
                        else
                        {
                            @L[context.Status]
                        }
                    </MudTd>
                    <MudTd>@context.DatasetName</MudTd>
                    <MudTd>@L[context.Task.Properties.ContainsKey("skos:prefLabel") ? context.Task.Properties["skos:prefLabel"] : ""]</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        }
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public GetTrainingsResponseDto Trainings
    { 
        get
        {
            return _trainings;
        } 
        set
        {
            _trainings = value;
            if(_trainings != null)
            {
                RefreshAllTrainings(null, null);
                _timer = new Timer()
                {
                    AutoReset = true,
                    Enabled = true,
                    Interval = 5000
                };
                _timer.Elapsed += RefreshAllTrainings;
                StateHasChanged();
            }
        } 
    }
    private GetTrainingsResponseDto _trainings;
    private string searchString = "";
    private Timer _timer;
    
    private bool FilterFunc(TrainingDto element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Task.Properties["skos:prefLabel"].Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.DatasetName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    } 
    public void Dispose()
    {
        DisposeTimer();
    }

    private async void RefreshAllTrainings(object sender, ElapsedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            try
            {
                if (_trainings.Trainings.Where(x => x.Status == "busy").ToList().Count == 0)
                {
                    DisposeTimer();
                    return;
                }

                for (int i = 0; i < _trainings.Trainings.Count; i++)
                {
                    if (_trainings.Trainings[i].Status == "busy")
                    {
                        ApiResponseDto apiResponse = await apiClient.GetTraining(new GetTrainingRequestDto { TrainingIdentifier = _trainings.Trainings[i].Identifier });

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            _trainings.Trainings[i] = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTrainingResponseDto>(apiResponse.Result.ToString()).Training;
                            StateHasChanged();
                        }
                        else
                        {
                            viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
                _timer.Elapsed -= RefreshAllTrainings;
            }
        });
    }

    public void DisposeTimer(){
        if(_timer!=null){
            _timer.Elapsed -= RefreshAllTrainings;
            _timer?.Dispose();
            _timer = null;
        }
    }
}
