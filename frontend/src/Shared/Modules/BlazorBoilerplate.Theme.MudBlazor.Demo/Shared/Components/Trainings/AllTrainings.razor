@inject IStringLocalizer<Global> L
@inject NavigationManager NavManager
@using System.Linq
@using System.Timers
@implements IDisposable
@inject IViewNotifier viewNotifier
@inject IApiClient apiClient

<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@L["Past training"]</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        @if (Trainings == null)
        {
            <DataLoaderSpinner />
        }
        else
        {
            <MudTable ServerData="ServerReload" style="width:stretch" class="mat-elevation-z5"
                Filter="new Func<TrainingMetaDataDto,bool>(FilterFunc)">
                <ToolBarContent>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString" Placeholder="@L["Search for status, task or dataset type"]"
                        Adornment="Adornment.Start" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search"
                        IconSize="Size.Medium" Class="mt-0" Clearable="true"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="@(new Func<TrainingMetaDataDto, object>(x=>x.StartTime))">
                            @L["Start datetime"]</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<TrainingMetaDataDto, object>(x=>x.Status)">@L["Status"]
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="@(new Func<TrainingMetaDataDto, object>(x=>x.DatasetName))">@L["Dataset"]
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>@L["Task"]</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <MudLink Href="@NavManager.ToAbsoluteUri("trainings/" + @context.Id).AbsoluteUri"
                            Style="cursor: pointer; display: flex;">
                            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ModelTraining"
                                Style="margin-right: 4px;" /> @context.StartTime.ToString("dd/MM/yy HH:mm")
                        </MudLink>
                    </MudTd>
                    <MudTd>
                        @if (context.Status == "busy")
                        {
                            <MudProgressCircular Size="Size.Small" Color="Color.Secondary" Indeterminate="true" />
                        }
                        else
                        {
                            @L[context.Status]
                        }
                    </MudTd>
                    <MudTd>@context.DatasetName</MudTd>
                    <MudTd>@L[context.Task.Properties["skos:prefLabel"]]</MudTd>
                    <MudTd>
                        <TrainingMenu Training="@context" OnDeleteCompleted="@OnDeleteTrainingCompleted" />
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager RowsPerPageString=@L["Rows per page"] PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                </PagerContent>
            </MudTable>
        }
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public EventCallback OnDeleteTrainingCompleted { get; set; }
    [Parameter]
    public GetTrainingsResponseDto Trainings
    {
        get
        {
            return _trainings;
        }
        set
        {
            _trainings = value;
            if (_trainings != null)
            {
                RefreshAllTrainings(null, null);
                _timer = new Timer()
                    {
                        AutoReset = true,
                        Enabled = true,
                        Interval = 5000
                    };
                _timer.Elapsed += RefreshAllTrainings;
                StateHasChanged();
            }
        }
    }
    private GetTrainingsResponseDto _trainings;
    private string searchString = "";
    private Timer _timer;
    private int _pageSize = 10; // Default page size
    private int _pageNumber = 0; // Default page number

    private int totalItems;

    private bool FilterFunc(TrainingMetaDataDto element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Task.Properties["skos:prefLabel"].Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.DatasetName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    public void Dispose()
    {
        DisposeTimer();
    }

    SemaphoreSlim timerSemaphore = new SemaphoreSlim(1);
    private async void RefreshAllTrainings(object sender, ElapsedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            try
            {
                var gotLock = timerSemaphore.Wait(0);
                if (!gotLock)
                {
                    return;
                }
                if (_trainings.Trainings.Where(x => x.Status == "busy").ToList().Count == 0)
                {
                    DisposeTimer();
                    return;
                }

                for (int i = 0; i < _trainings.Trainings.Count; i++)
                {
                    if (_trainings.Trainings[i].Status == "busy")
                    {
                        ApiResponseDto apiResponse = await apiClient.GetTraining(new GetTrainingRequestDto
                            {
                                TrainingId =
                _trainings.Trainings[i].Id
                            });

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            TrainingDto trainingDto =
                Newtonsoft.Json.JsonConvert.DeserializeObject<GetTrainingResponseDto>(apiResponse.Result.ToString()).Training;
                            TrainingMetaDataDto trainingMetaDataDto = new TrainingMetaDataDto();
                            trainingMetaDataDto.Id = trainingDto.Id;
                            trainingMetaDataDto.DatasetId = trainingDto.DatasetId;
                            trainingMetaDataDto.DatasetName = trainingDto.DatasetName;
                            trainingMetaDataDto.Task = trainingDto.Configuration.Task;
                            trainingMetaDataDto.Status = trainingDto.Status;
                            trainingMetaDataDto.StartTime = trainingDto.RuntimeProfile.StartTime;

                            _trainings.Trainings[i] = trainingMetaDataDto;
                            StateHasChanged();
                        }
                        //Training does not exist anymore
                        else if (apiResponse.StatusCode == 404)
                        {
                            _trainings.Trainings.RemoveAt(i);
                            DisposeTimer();
                            return;
                        }
                        else
                        {
                            viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
                _timer.Elapsed -= RefreshAllTrainings;
            }
        });
    }

    public void DisposeTimer()
    {
        if (_timer != null)
        {
            _timer.Elapsed -= RefreshAllTrainings;
            _timer?.Dispose();
            _timer = null;
        }
    }

    private async Task OnPageChanged(int pageNumber, int pageSize)
    {
        var apiResponse = await apiClient.GetTrainings(new GetTrainingsRequestDto()
            {
                Short = true,
                Pagination = true,
                PageNumber = pageNumber,
                PageSize = pageSize
            });
        if (apiResponse.IsSuccessStatusCode)
        {
            _trainings = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTrainingsResponseDto>(apiResponse.Result.ToString());
            StateHasChanged();
        }
        else
        {
            viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    private async Task<TableData<TrainingMetaDataDto>> ServerReload(TableState state)
    {
        var apiResponse = await apiClient.GetTrainings(new GetTrainingsRequestDto()
            {
                Short = true,
                Pagination = true,
                PageNumber = state.Page + 1,
                PageSize = state.PageSize
            });
        if (apiResponse.IsSuccessStatusCode)
        {
            var data = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTrainingsResponseDto>(apiResponse.Result.ToString());
            return new TableData<TrainingMetaDataDto>() { TotalItems = data.PaginationMetadata.TotalItems, Items = data.Trainings };
        }
        else
        {
            viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            return new TableData<TrainingMetaDataDto>() { TotalItems = 0, Items = new List<TrainingMetaDataDto>() };
        }
    }
}
