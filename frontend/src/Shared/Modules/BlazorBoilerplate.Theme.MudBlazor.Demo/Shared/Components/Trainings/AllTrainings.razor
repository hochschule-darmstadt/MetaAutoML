@using MudBlazor
@inject IStringLocalizer<Global> L
@inject NavigationManager NavManager
@using System.Linq
@using System.Timers
@inject IViewNotifier viewNotifier
@inject IApiClient apiClient

<MudCard Elevation="5">
    <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@L["Past training"]</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        @if (isLoading)
        {
            <DataLoaderSpinner />
        }
        else
        {
            <MudTable ServerData="ServerReload" style="width:stretch" class="mat-elevation-z5" @ref="table">
                <ToolBarContent>
                    <MudSpacer />
                    <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))"
                        Placeholder="@L["Search for status, task or dataset type"]" Adornment="Adornment.Start"
                        Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"
                        Clearable="true"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortLabel="start_time" T="TrainingMetadataDto">@L["Start datetime"]</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortLabel="status" T="TrainingMetadataDto">@L["Status"]</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortLabel="dataset_name" T="TrainingMetadataDto">@L["Dataset"]</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortLabel="task" T="TrainingMetadataDto">@L["Task"]</MudTableSortLabel>
                    </MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <MudLink Href="@NavManager.ToAbsoluteUri("trainings/" + @context.Id).AbsoluteUri"
                            Style="cursor: pointer; display: flex;">
                            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ModelTraining"
                                Style="margin-right: 4px;" /> @context.StartTime.ToString("dd/MM/yyyy HH:mm")
                        </MudLink>
                    </MudTd>
                    <MudTd>
                        @if (context.Status == "busy")
                        {
                            <MudProgressCircular Size="Size.Small" Color="Color.Secondary" Indeterminate="true" />
                        }
                        else
                        {
                            @L[context.Status]
                        }
                    </MudTd>
                    <MudTd>@context.DatasetName</MudTd>
                    <MudTd>@L[context.Task.Properties["skos:prefLabel"]]</MudTd>
                    <MudTd>
                        <TrainingMenu Training="@context" />
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager RowsPerPageString="@L["Rows per page"]"
                        PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                </PagerContent>
            </MudTable>
        }
    </MudCardContent>
</MudCard>

@implements IDisposable
@code {
    private string searchString = "";
    private Timer _timer;
    private MudTable<TrainingMetadataDto> table = new MudTable<TrainingMetadataDto>();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        StartRefreshTimer();
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        isLoading = true;
        StateHasChanged();
        await table.ReloadServerData();
        isLoading = false;
        StateHasChanged();
    }

    private void StartRefreshTimer()
    {
        DisposeTimer();
        _timer = new Timer(5000); // 5 second interval
        _timer.Elapsed += CheckAndRefreshData;
        _timer.Start();
    }

    private async void CheckAndRefreshData(object sender, ElapsedEventArgs e)
    {
        try
        {
            await InvokeAsync(async () =>
            {
                var data = table.FilteredItems;
                if (data.Any(x => x.Status == "busy"))
                {
                    await table.ReloadServerData();
                }
            });
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    private void DisposeTimer()
    {
        if (_timer != null)
        {
            _timer.Stop();
            _timer.Elapsed -= CheckAndRefreshData;
            _timer.Dispose();
            _timer = null;
        }
    }

    public void Dispose()
    {
        DisposeTimer();
    }

    private async Task<TableData<TrainingMetadataDto>> ServerReload(TableState state)
    {
        var apiResponse = await apiClient.GetTrainingsMetadata(new GetTrainingsMetadataRequestDto
        {
            Pagination = true,
            PageNumber = state.Page + 1,
            PageSize = state.PageSize,
            SearchString = searchString,
            SortLabel = state.SortLabel,
            SortDirection = state.SortDirection == SortDirection.None ? string.Empty : state.SortDirection.ToString()
        });

        if (!apiResponse.IsSuccessStatusCode)
        {
            viewNotifier.Show($"{apiResponse.Message} : {apiResponse.StatusCode}", ViewNotifierType.Error, L["Operation Failed"]);
            return new TableData<TrainingMetadataDto>();
        }

        var data = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTrainingsResponseDto>(apiResponse.Result.ToString());
        StartRefreshTimer(); // Start refresh timer when new data is loaded
        return new TableData<TrainingMetadataDto>
        {
            TotalItems = data.PaginationMetadata.TotalItems,
            Items = data.Trainings
        };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}
