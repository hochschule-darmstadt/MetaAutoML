@implements IDynamicComponent
@inject IStringLocalizer<Global> L
@inject IFileUploader fileUploader
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier

@if (fileUploader.IsUploading == true)
{
    <MudStack Class="mt-4">
        <MudText Typo="Typo.body2">@UploadText</MudText>
        <MudProgressLinear Color="Color.Secondary" Value="@Progress" Class="my-7" />
    </MudStack>
}






<MudDialog @bind-IsVisible="fileUploader.IsUploadDatasetDialogOpen">
    <DialogContent>
        <MudCard Height="auto" Width="300px" Elevation="0">
            @if (_datasetTypes == null)
            {

            }
            else if (fileUploader.IsUploading == true)
            {
                <MudStack Class="mt-4">
                    <MudText Typo="Typo.body2">@UploadText</MudText>
                    <MudProgressLinear Color="Color.Secondary" Value="@Progress" Class="my-7" />
                </MudStack>
            }
            else
            {
        <MudCardHeader Style="margin-left:-16px;">
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@L["Upload"]</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudStack>
            <MudStack Row="true">

                <MudButton
                           Variant="Variant.Filled"
                           Color="Color.Secondary"
                           Size="Size.Small"
                           Disabled="_fileUpload"
                           OnClick="FileOrUrlSwitch"
                           Style="margin-top: 8px; width:50%">@L["File"]</MudButton>
                        <MudButton
                                   Variant="Variant.Filled"
                                   Color="Color.Secondary"
                                   Size="Size.Small"
                                   Disabled="!_fileUpload"
                                   OnClick="FileOrUrlSwitch"
                                   Style="margin-top: 8px; width:50%">@L["URL"]</MudButton>
                            </MudStack>
                            @if (_fileUpload)
                            {


                                <MudSelect Label="@L["Select the data format of your dataset"]" T="string" ValueChanged="@OnDatasetTypeSelectChanged" Style="width: 150px">
                                    @foreach (var item in _datasetTypes.DatasetTypes)
                                    {

                                        <MudSelectItem Value="@item.ID">
                                            <MudTooltip Text="@item.Properties["rdfs:comment"]" Style="z-index: 1600">
                                                <MudText Typo="Typo.body2">@L[item.Properties.ContainsKey("skos:prefLabel") ? item.Properties["skos:prefLabel"] : ""]</MudText>
                                            </MudTooltip>
                                        </MudSelectItem>
                                    }

                                </MudSelect>
                                <InputFile id="fileInput" OnChange="@FilesReady" hidden accept="@AcceptedFileType" />
                                <MudButton HtmlTag="label"
                                           Variant="Variant.Filled"
                                           Color="Color.Secondary"
                                           StartIcon="@Icons.Filled.CloudUpload"
                                           for="fileInput"
                                           Class="mt-1"
                                           Disabled="IsSelectFileDisabled">
                                    @L["Select Dataset"]
                                </MudButton>
                                <MudTextField @bind-Value="@fileUploader.UploadDatasetRequest.DatasetName" Label="@L["Dataset Name"]" Class="mt-1"></MudTextField>
                            }
                            else
                            {
                                 <MudSelect Label="@L["Select the data format of your dataset"]" T="string" ValueChanged="@OnDatasetTypeSelectChanged" Style="width: 150px">
                                    @foreach (var item in _datasetTypes.DatasetTypes)
                                    {

                                        <MudSelectItem Value="@item.ID">
                                            <MudTooltip Text="@item.Properties["rdfs:comment"]" Style="z-index: 1600">
                                                <MudText Typo="Typo.body2">@L[item.Properties.ContainsKey("skos:prefLabel") ? item.Properties["skos:prefLabel"] : ""]</MudText>
                                            </MudTooltip>
                                        </MudSelectItem>
                                    }

                                </MudSelect>
                                <MudTextField TextChanged="DisableUpload" @bind-Value="@Url" Label="@L["URL"]" Class="mt-1"></MudTextField>
                                <MudTextField @bind-Value="@fileUploader.UploadDatasetRequest.DatasetName" Label="@L["Dataset Name"]" Class="mt-1"></MudTextField>
                            }



                            @if (_isLoaderClosed == false)
                            {
                                <MudProgressLinear Color="Color.Secondary" Indeterminate="true" />
                            }
                        </MudStack>
                            }
        </MudCard>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Secondary" OnClick="Close">@L["Close"]</MudButton>
        @if (fileUploader.IsUploading == false)
        {
            <MudButton StartIcon="@Icons.Filled.CloudUpload" Color="Color.Secondary" Disabled="@_uploadReady" OnClick="@Upload">@L["Upload"]</MudButton>
        }
    </DialogActions>
</MudDialog>



<MudDialog @bind-IsVisible="fileUploader.IsUploadPredictionDatasetDialogOpen">
    <DialogContent>
        @if (fileUploader.IsUploading == true)
        {
        <MudStack Class="mt-4">
            <MudText Typo="Typo.body2">@UploadText</MudText>
            <MudProgressLinear Color="Color.Secondary" Value="@Progress" Class="my-7" />
        </MudStack>
        }
        else
        {
        <MudPaper Height="180px" Width="300px"  Elevation="0">
            <MudStack>
                <InputFile id="fileInput" OnChange="@FilesReady" hidden accept="@AcceptedFileType" />
                <MudButton HtmlTag="label"
                            Variant="Variant.Filled"
                            Color="Color.Secondary"
                            StartIcon="@Icons.Filled.CloudUpload"
                            for="fileInput"
                            Class="mt-1">
                    @L["Select Dataset"]
                </MudButton>
                <MudTextField @bind-Value="@fileUploader.UploadPredictionRequest.FileName" Label="@L["Dataset Name"]" Class="mt-1" Disabled="true"></MudTextField>
                @if (_isLoaderClosed == false)
                {
                    <MudProgressLinear Color="Color.Secondary" Indeterminate="true"/>
                }
            </MudStack>
        </MudPaper>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Secondary" OnClick="Close">@L["Close"]</MudButton>
        @if (fileUploader.IsUploading == false)
        {
            <MudButton StartIcon="@Icons.Filled.CloudUpload" Color="Color.Secondary" Disabled="@_uploadReady" OnClick="@Upload">@L["Upload"]</MudButton>
        }
    </DialogActions>
</MudDialog>


@code {
    public string Url;
    private bool _fileUpload = true;

    [Parameter]
    public EventCallback OnUploadCompletedCallback { get; set; }
    public bool IsSelectFileDisabled { get; set; } = true;
    public string AcceptedFileType { get; set; } = "";
    public int Progress { get; set; }
    public string UploadText { get; set; } = "";

    public int Order { get => 1; }
    public string IntoComponent { get => "DrawerFooter"; }

    private GetDatasetTypesResponseDto _datasetTypes;
    private bool _uploadReady = true;
    private bool _isLoaderClosed = true;

    private void FileOrUrlSwitch()
    {
        _fileUpload = (!_fileUpload);
        _uploadReady = true;

    }

    private void DisableUpload()
    {
        //TODO validate URL and then set _uploadReady false
        if(Url.Length!=0){
            _uploadReady = false;
        }
        else {
            _uploadReady = true;
        }


    }

    private void UpdateProgress()
    {
        if(fileUploader.IsPredictionDatasetToUpload == true)
        {

            //Reset FileUploader after completing upload, (+1 to total to compensate to loop offset)
            if ((fileUploader.UploadPredictionRequest.ChunkNumber == (fileUploader.UploadPredictionRequest.TotalChunkNumber + 1)) && (fileUploader.IsUploading == false))
            {
                fileUploader.UploadPredictionRequest = new UploadPredictionRequestDto();
                IsSelectFileDisabled = true;
                _uploadReady = true;
            }
            else
            {
                float divideResult = (float)fileUploader.UploadPredictionRequest.ChunkNumber / (float)fileUploader.UploadPredictionRequest.TotalChunkNumber;
                Progress = (int)(divideResult * 100);
                //if chunk amount is bigger 100 display after decimal percentage
                if (fileUploader.UploadPredictionRequest.TotalChunkNumber > 100)
                {
                    UploadText = L["Uploading {0} {1}", fileUploader.UploadPredictionRequest.FileName, String.Format("{0:0.00}", divideResult * 100)];
                }
                else
                {
                    UploadText = L["Uploading {0} {1}", fileUploader.UploadPredictionRequest.FileName, String.Format("{0:0}", divideResult * 100)];
                }
            }
        }
        else
        {
            //Reset FileUploader after completing upload, (+1 to total to compensate to loop offset)
            if ((fileUploader.UploadDatasetRequest.ChunkNumber == (fileUploader.UploadDatasetRequest.TotalChunkNumber + 1)) && (fileUploader.IsUploading == false))
            {
                fileUploader.UploadDatasetRequest = new UploadDatasetRequestDto();
                IsSelectFileDisabled = true;
                _uploadReady = true;
            }
            else
            {
                float divideResult = (float)fileUploader.UploadDatasetRequest.ChunkNumber / (float)fileUploader.UploadDatasetRequest.TotalChunkNumber;
                Progress = (int)(divideResult * 100);
                //if chunk amount is bigger 100 display after decimal percentage
                if (fileUploader.UploadDatasetRequest.TotalChunkNumber > 100)
                {
                    UploadText = L["Uploading {0} {1}", fileUploader.UploadDatasetRequest.DatasetName, String.Format("{0:0.00}", divideResult * 100)];
                }
                else
                {
                    UploadText = L["Uploading {0} {1}", fileUploader.UploadDatasetRequest.DatasetName, String.Format("{0:0}", divideResult * 100)];
                }
            }
        }

        RefreshComponent();
    }

    private void RefreshComponent()
    {
        StateHasChanged();
    }

    protected override async void OnInitialized()
    {
        fileUploader.UploadDatasetRequest = new UploadDatasetRequestDto();
        fileUploader.UploadPredictionRequest = new UploadPredictionRequestDto();
        await LoadDatasetTypes();
        fileUploader.OnUploadChangedCallback = UpdateProgress;
        fileUploader.RefreshUploadComponentCallback = RefreshComponent;
    }

    private async Task LoadDatasetTypes()
    {
        try
        {
            ApiResponseDto apiResponse = new ApiResponseDto();
            apiResponse = await apiClient.GetDatasetTypes();
            if (apiResponse.IsSuccessStatusCode)
            {
                _datasetTypes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetTypesResponseDto>(apiResponse.Result.ToString());
                StateHasChanged();
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    private void OnDatasetTypeSelectChanged(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            IsSelectFileDisabled = true;
        }
        else
        {
            switch (value)
            {
                case ":tabular":
                    AcceptedFileType = ".csv";
                    IsSelectFileDisabled = false;
                    break;
                case ":image":
                    AcceptedFileType = ".zip";
                    IsSelectFileDisabled = false;
                    break;
                case ":text":
                    AcceptedFileType = ".csv";
                    IsSelectFileDisabled = false;
                    break;
                case ":time_series":
                    AcceptedFileType = ".csv";
                    IsSelectFileDisabled = false;
                    break;
                case ":time_series_longitudinal":
                    AcceptedFileType = ".ts";
                    IsSelectFileDisabled = false;
                    break;
            }
        }
        fileUploader.UploadDatasetRequest.DatasetType = (string)value;
        StateHasChanged();
    }

    private void Close()
    {
        fileUploader.IsUploadDatasetDialogOpen = false;
        fileUploader.IsUploadPredictionDatasetDialogOpen = false;
        RefreshComponent();
    }
    private async Task FilesReady(InputFileChangeEventArgs e)
    {
        try
        {
            _isLoaderClosed = false;
            StateHasChanged();
            fileUploader.UploadFileContent = e.File;
            if (fileUploader.IsPredictionDatasetToUpload == true)
            {
                fileUploader.UploadPredictionRequest.FileName = e.File.Name;
            }
            else
            {
                fileUploader.UploadDatasetRequest.FileNameOrURL = e.File.Name;
                fileUploader.UploadDatasetRequest.DatasetName = e.File.Name;
            }

            _uploadReady = false;
            _isLoaderClosed = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
    private async Task Upload()
    {
        if (!_fileUpload)
        {

            fileUploader.UploadDatasetRequest.FileNameOrURL = Url;
            fileUploader.UploadDatasetRequest.FileSource = "URL";
        } else
        {
            fileUploader.UploadDatasetRequest.FileSource = "Local";
        }

        try
        {
            if (_fileUpload){
                if (fileUploader.IsPredictionDatasetToUpload == true)
                {
                    if (string.IsNullOrEmpty(fileUploader.UploadPredictionRequest.FileName))
                    {
                        viewNotifier.Show(L["Please select a file first!"], ViewNotifierType.Error, L["Operation Failed"]);
                        return;
                    }
                }
                else
                {
                    if (string.IsNullOrEmpty(fileUploader.UploadDatasetRequest.DatasetName))
                    {
                        viewNotifier.Show(L["Please enter a dataset name first!"], ViewNotifierType.Error, L["Operation Failed"]);
                        return;
                    }
                    if (string.IsNullOrEmpty(fileUploader.UploadDatasetRequest.DatasetType))
                    {
                        viewNotifier.Show(L["Please select a dataset type first!"], ViewNotifierType.Error, L["Operation Failed"]);
                        return;
                    }
                    if (string.IsNullOrEmpty(fileUploader.UploadDatasetRequest.FileNameOrURL))
                    {
                        viewNotifier.Show(L["Please select a file first!"], ViewNotifierType.Error, L["Operation Failed"]);
                        return;
                    }
                }
            } else if (!_fileUpload)
            {
                if (string.IsNullOrEmpty(fileUploader.UploadDatasetRequest.DatasetName))
                    {
                        viewNotifier.Show(L["Please enter a dataset name first!"], ViewNotifierType.Error, L["Operation Failed"]);
                        return;
                    }
            }

            _isLoaderClosed = false;
            _uploadReady = false;
            UploadText = L["Preparing upload..."];
            StateHasChanged();

            if (!_fileUpload)
            {
                fileUploader.UploadDatasetFromURL(Url, AcceptedFileType);
            }
            else
            {
                fileUploader.UploadDatasetFromLocal();
            }

            _isLoaderClosed = true;
            StateHasChanged();
            Close();
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    // Method currently not in use (anymore), but keeping it for eventual reuse. But feel free to delete it completely if you want. 
    private string[] SplitComment(string comment) {
        string[] subcomments = comment.Split(new[] { "?=?" }, StringSplitOptions.None);
        return subcomments;
    }

}
