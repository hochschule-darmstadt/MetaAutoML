syntax = "proto3";
option csharp_namespace = "BlazorBoilerplate.Server";

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "Enumerations.proto";
import "ModelRelatedMessages.proto";
import "DatasetRelatedMessages.proto";

message DeleteTrainingRequest {
  /*
    Unique user id generated by the controller on the create new user request from the frontend. Linked to a AspNetUser saved within the MS Sql database of the frontend
    example: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
  */
  string userId = 1;
  /*
    Unique training id generated when inserting a new training document into MongoDB
    example: "63525870394eff35ee175bc2"
  */
  string trainingId = 2;
}

message DeleteTrainingResponse {

}

message GetTrainingsMetadataRequest {
  /*
    Unique user id generated by the controller on the create new user request from the frontend. Linked to a AspNetUser saved within the MS Sql database of the frontend
    example: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
  */
  string userId = 1;
  /*
    Should only the most recent trainings be retrived
    example: True //retrieve last 24 hours training
  */
  bool onlyLastDay = 2;
  /*
    Should results be paginated, combined with page parameter
    example: True //return results by pagination
  */
  bool pagination = 3;
  /*
    The page to retrieve
    example: 2 //return trainings from pagination page 2
  */
  int32 pageNumber = 4;
  /*
    The number of items per page
    example: 10 //10 items per page
  */
  int32 pageSize = 5;
  /*
    The searchString to filter the data
    example: 'ended' //Only entities containing 'ended' are returned
  */
  string searchString = 6;
  /*
    The column name to sort the results by
    example: tasks //Sort by the column tasks
  */
  string sortLabel = 7;
  /*
    The direction to sort by
    example: ascending //Sorting ascending
  */
  string sortDirection = 8;
}

message GetTrainingsMetadataResponse {
  /*
    List of TrainingMetadata records from MongoDB (see TrainingMetadata for more detals)
    example: [TrainingMetadata, TrainingMetadata]
  */
  repeated TrainingMetadata trainings = 1;
  /*
    Pagination metadata
    example: PaginationMetadata
  */
  PaginationMetadata paginationMetadata = 2;
}

message GetTrainingMetadataRequest {
  /*
    Unique user id generated by the controller on the create new user request from the frontend. Linked to a AspNetUser saved within the MS Sql database of the frontend
    example: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
  */
  string userId = 1;
  /*
    Unique training id generated when inserting a new training document into MongoDB
    example: '63515c86b10d04d230dc1482'
  */
  string trainingId = 2;
}

message GetTrainingMetadataResponse {
  /*
    TrainingMetadata record from MongoDB (see TrainingMetadata for more detals)
    example: TrainingMetadata
  */
  TrainingMetadata training = 1;
}

message GetTrainingRequest {
  /*
    Unique user id generated by the controller on the create new user request from the frontend. Linked to a AspNetUser saved within the MS Sql database of the frontend
    example: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
  */
  string userId = 1;
  /*
    Unique training id generated when inserting a new training document into MongoDB
    example: '63515c86b10d04d230dc1482'
  */
  string trainingId = 2;
}

message GetTrainingResponse {
  /*
    Training record from MongoDB (see Training for more detals)
    example: Training
  */
  Training training = 1;
}

message Training {
  /*
    Unique training id generated when inserting a new training document into MongoDB
    example: '63515c86b10d04d230dc1482'
  */
  string id = 1;
  /*
    Unique dataset id generated when inserting a new dataset document into MongoDB
    example: '63515c86b10d04d230dc1482'
  */
  string datasetId = 2;
  /*
    Dataset name used for this training
    example: 'Titanic'
  */
  string datasetName = 3;
  /*
    List of model records from MongoDB (see Model for more detals)
    example: [Model, Model]
  */
  repeated Model models = 4;
  /*
    Current training activity status (busy, ended)
    example: "busy"
  */
  string status = 5;
  /*
    Training Configuration object (see Configuration for more detals)
    example: Configuration
  */
  Configuration configuration = 6;
  /*
    The current dataset configuration used to open the dataset as a JSON string
    example: '{
    "use_header": true,
    "start_row": 1,
    "delimiter": "comma",
    "escape_character": "\\",
    "decimal_character": "."
  }'
  */
  string datasetConfiguration = 7;
  /*
    The Training runtime profile object (see TrainingRuntimeProfile for more details)
    example: TrainingRuntimeProfile
  */
  TrainingRuntimeProfile RuntimeProfile = 8;
}

message TrainingMetadata {
  /*
    Unique training id generated when inserting a new training document into MongoDB
    example: '63515c86b10d04d230dc1482'
  */
  string id = 1;
  /*
    Unique dataset id generated when inserting a new dataset document into MongoDB
    example: '63515c86b10d04d230dc1482'
  */
  string datasetId = 2;
  /*
    Dataset name used for this training
    example: 'Titanic'
  */
  string datasetName = 3;
  /*
    Type of the training task (e.g. tabular_classification)
  */
  string task = 4;
  /*
    Current training activity status (busy, ended)
    example: "busy"
  */
  string status = 5;
  /*
    The timestamp when the training process started
    example: 1666283732325
  */
  google.protobuf.Timestamp startTime = 6;
}

message Configuration {
  /*
    The selected ML task set during the wizard configuration
    example: ":tabular_classification"
  */
  string task = 1;
  /*
    The dataset target, if required by ML task set during the wizard configuration
    example: "Survived"
  */
  string target = 2;
  /*
    List of enabled strategies ids the blackboard will try during the training selected during the wizard configuration
    example: ['data_preparation.ignore_redundant_features']
  */
  repeated string enabledStrategies = 3;
  /*
    The maximum amount of time in minute the training can run before cancelation set during the wizard configuration
    example: 5
  */
  int32 runtimeLimit = 4;
  /*
    The ML metric selected during the wizard configuration
    example: ":accuracy"
  */
  string metric = 5;
  /*
    List of AutoML solutions selected during the wizard configuration
    example: [":autokeras", ":mljar"]
  */
  repeated string selectedAutoMlSolutions = 6;
  /*
    List of ML libraries selected during the wizard configuration
    example: [":keras_lib", ":sklearn_lib"]
  */
  repeated string selectedMlLibraries = 7;
  /*
    Map of additional parameters
    examples:
    {
      ":use_approach": { "values": [":adaboost", ":decision_tree"]},
      ":metric": { "values": [":accuracy"]},
      ":some_int": { "values": ["17"]}
    }
  */
  map<string, DynamicParameterValue> parameters = 8;
}

message TrainingRuntimeProfile {
  /*
    The timestamp when the training process started
    example: 1666283732325
  */
  google.protobuf.Timestamp startTime = 1;
  /*
    The timestamp when the training process ended
    example: 1666283732325
  */
  google.protobuf.Timestamp endTime = 2;
  /*
    List of StrategyControllerEvent objects (see StrategyControllerEvent for more detals)
    example: [StrategyControllerEvent, StrategyControllerEvent]
  */
  repeated StrategyControllerEvent events = 3;
}


message StrategyControllerEvent {
  /*
    The event type name set by the blackboard
    example: "phase_update"
  */
  string type = 1;
  /*
    JSON string of meta information related to the type
    example:
    {
      "old_phase": null,
      "new_phase": "started"
    }
  */
  string meta = 2;
  /*
    The timestamp when the event happened
    example: 1666283732325
  */
  google.protobuf.Timestamp timestamp = 3;
}


message CreateTrainingRequest {
  /*
    Unique user id generated by the controller on the create new user request from the frontend. Linked to a AspNetUser saved within the MS Sql database of the frontend
    example: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
  */
  string userId = 1;
  /*
    Unique dataset id generated when inserting a new dataset document into MongoDB
    example: '63515c86b10d04d230dc1482'
  */
  string datasetId = 2;
  /*
    Training Configuration object (see Configuration for more detals)
    example: Configuration
  */
  Configuration configuration = 3;
  /*
    The configuration of all columns. See SetDatasetColumnSchemaConfigurationRequest for more details.
    example: '{
    "PassengerId": {
      "RoleSelected": ":index",
      "DatatypeSelected": ":integer",
      },
    }'
    If "" (empty string) is provided, the currently saved schema is used.
  */
  string datasetConfiguration = 4;

  /*
    If the new dataset schema should be persisted within the dataset document
  */
  bool SaveSchema = 5;


  /*
    If the model should be analysied after the training
  */
  bool PerformModelAnalysis = 6;
}


message CreateTrainingResponse {
  /*
    Unique training id generated when inserting a new training document into MongoDB
    example: '63515c86b10d04d230dc1482'
  */
  string trainingId = 1;
}

/*
  Value type for dynamic training parameters for the auto ml solutions.
  This type is needed, because map<> does not supported "repeated" in the value.
*/
message DynamicParameterValue {
  /*
    List of values for a parameter
    examples:
    - int: ["17"]
    - single_value: [":accuracy"]
    - list: [":adaboost", ":decision_tree"]
  */
  repeated string values = 1;
}


message GetSuggestedTrainingRuntimeRequest {
  /*
    Unique user id generated by the controller on the create new user request from the frontend. Linked to a AspNetUser saved within the MS Sql database of the frontend
    example: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
  */
  string userId = 1;
  /*
    Unique dataset id generated when inserting a new dataset document into MongoDB
    example: '63515c86b10d04d230dc1482'
  */
  string datasetId = 2;

  /*
      choosen task from the wizard
      example: ':tabular_classification'
  */
  string task = 3;
}

message GetSuggestedTrainingRuntimeResponse {
  /*
    The suggested runtime for this da
  */
  int32 suggested_runtime = 1;
}

message PaginationMetadata {
  /*
    The total number of items available
    example: 50 //total 50 items available
  */
  int32 totalItems = 1;
  /*
    The current page number
    example: 2 //current page number is 2
  */
  int32 pageNumber = 2;
  /*
    The number of items per page
    example: 10 //10 items per page
  */
  int32 pageSize = 3;
  /*
    The total number of pages available
    example: 5 //total 5 pages available
  */
  int32 totalPages = 4;
}
