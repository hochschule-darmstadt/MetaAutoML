version: "3.8"
services:
  # sometimes when building the controller it does not copy the contents of the datasets folder.
  # This is probably a caching docker caching issue, which can be fixed with:
  # 'make clean-hard'
  controller:
    build: 
      context: ./
      dockerfile: ./controller/Dockerfile
    container_name: controller
    depends_on:
      - mongo
    # we map the port of the controller to the host.
    # This way we can either connect locally with localhost:5001
    # or from a docker container that accesses host.docker.internal:5001
    ports:
      - "5001:5001"
    environment:
      # The environment variables are set manually here in docker-compose.
      # But in kubernetes the environment variables are set as <SERVICE_NAME>_SERVICE_HOST and <SERVICE_NAME>_SERVICE_PORT
      # Therefore the services must be named accordingly in the kubernetes files.
      - AUTOKERAS_SERVICE_HOST=autokeras
      - AUTOKERAS_SERVICE_PORT=50052
      - MLJAR_SERVICE_HOST=mljar
      - MLJAR_SERVICE_PORT=50053
      - SKLEARN_SERVICE_HOST=sklearn
      - SKLEARN_SERVICE_PORT=50055
      - FLAML_SERVICE_HOST=flaml
      - FLAML_SERVICE_PORT=50056
      - AUTOGLUON_SERVICE_HOST=gluon
      - AUTOGLUON_SERVICE_PORT=50057
      - AUTOCVE_SERVICE_HOST=autocve
      - AUTOCVE_SERVICE_PORT=50058
      - PYTORCH_SERVICE_HOST=pytorch
      - PYTORCH_SERVICE_PORT=50059
      - ALPHAD3M_SERVICE_HOST=alphad3m
      - ALPHAD3M_SERVICE_PORT=50060
    volumes:
      - datasets:/app/app-data/datasets
      - output:/app/app-data/output
      - output-autokeras:/app/app-data/output/autokeras
      - output-mljar:/app/app-data/output/mljar
      - output-sklearn:/app/app-data/output/sklearn
      - output-flaml:/app/app-data/output/flaml
      - output-gluon:/app/app-data/output/gluon
      - output-autocve:/app/app-data/output/autocve
      - output-pytorch:/app/app-data/output/pytorch

  mongo:
    image: mongo
    container_name: mongo
    ports:
      - "27017:27017"

    # limit log verbosity
    command: --quiet --logpath /dev/null 

    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongodata:/data/configdb
      - mongodata:/data/db

#     adapters do not need to be available from the host machine -> no port mappings

  autokeras:
    build: 
      context: ./adapters
      dockerfile: ./AutoKeras/Dockerfile
    container_name: autokeras
    environment:
      - GRPC_SERVER_PORT=50052
    volumes:
      - datasets:/app/app-data/datasets
      - output-autokeras:/app/app-data/output

  mljar:
    build: 
      context: ./adapters
      dockerfile: ./MLJAR/Dockerfile
    container_name: mljar
    environment:
      - GRPC_SERVER_PORT=50053
    volumes:
      - datasets:/app/app-data/datasets
      - output-mljar:/app/app-data/output

  sklearn:
    build: 
      context: ./adapters
      dockerfile: ./AutoSklearn/Dockerfile
    container_name: sklearn
    environment:
      - GRPC_SERVER_PORT=50055
    volumes:
      - datasets:/app/app-data/datasets
      - output-sklearn:/app/app-data/output

  flaml:
    build: 
      context: ./adapters
      dockerfile: ./FLAML/Dockerfile
    container_name: flaml
    environment:
      - GRPC_SERVER_PORT=50056
    volumes:
      - datasets:/app/app-data/datasets
      - output-flaml:/app/app-data/output

  gluon:
    build: 
      context: ./adapters
      dockerfile: ./AutoGluon/Dockerfile
    container_name: gluon
    environment:
      - GRPC_SERVER_PORT=50057
    volumes:
      - datasets:/app/app-data/datasets
      - output-gluon:/app/app-data/output

  autocve:
    build: 
      context: ./adapters
      dockerfile: ./AutoCVE/Dockerfile
    container_name: autocve
    environment:
      - GRPC_SERVER_PORT=50058
    volumes:
      - datasets:/app/app-data/datasets
      - output-autocve:/app/app-data/output

  pytorch:
    build: 
      context: ./adapters
      dockerfile: ./AutoPytorch/Dockerfile
    container_name: pytorch
    environment:
      - GRPC_SERVER_PORT=50059
    volumes:
      - datasets:/app/app-data/datasets
      - output-pytorch:/app/app-data/output

  alphad3m:
    build: 
      context: ./adapters
      dockerfile: ./AlphaD3M/Dockerfile
    container_name: alphad3m
    environment:
      - GRPC_SERVER_PORT=50060
    volumes:
      - datasets:/app/app-data/datasets
      - output-alphad3m:/app/app-data/output

volumes:
  datasets: # shared volume between controller, adapters and frontend/dummy to transfer datasets
   # shared volumes between controller and adapters to transfer output files e.g. *.zip file
  output-autokeras:
  output-sklearn:
  output-flaml:
  output-gluon:
  output-pytorch:
  output-autocve:
  output-mljar:
  output-alphad3m:

  # shared volume between controller and frontend / dummy to transfer output
  output:
  mongodata:
