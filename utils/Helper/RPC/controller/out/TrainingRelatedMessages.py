# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: TrainingRelatedMessages.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import Dict, List

import betterproto


@dataclass
class DeleteTrainingRequest(betterproto.Message):
    # Unique user id generated by the controller on the create new user request
    # from the frontend. Linked to a AspNetUser saved within the MS Sql database
    # of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    user_id: str = betterproto.string_field(1)
    # Unique training id generated when inserting a new training document into
    # MongoDBexample: "63525870394eff35ee175bc2"
    training_id: str = betterproto.string_field(2)


@dataclass
class DeleteTrainingResponse(betterproto.Message):
    pass


@dataclass
class GetTrainingsRequest(betterproto.Message):
    # Unique user id generated by the controller on the create new user request
    # from the frontend. Linked to a AspNetUser saved within the MS Sql database
    # of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    user_id: str = betterproto.string_field(1)
    # Should only the training objects without any dataset and model objects be
    # retrievedexample: True //Only returns list without dataset and model
    # objects
    short: bool = betterproto.bool_field(2)
    # Should only the most recent trainings be retrivedexample: True //retrieve
    # last 24 hours training
    only_last_day: bool = betterproto.bool_field(3)
    # Should results be paginated, combined with page parameterexample: True
    # //return results by pagination
    pagination: bool = betterproto.bool_field(4)
    # The page to retrieveexample: 2 //return trainings from pagination page 2
    page_number: int = betterproto.int32_field(5)


@dataclass
class GetTrainingsResponse(betterproto.Message):
    # List of training records from MongoDB (see Training for more
    # detals)example: [Training, Training]
    trainings: List["Training"] = betterproto.message_field(1)


@dataclass
class GetTrainingRequest(betterproto.Message):
    # Unique user id generated by the controller on the create new user request
    # from the frontend. Linked to a AspNetUser saved within the MS Sql database
    # of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    user_id: str = betterproto.string_field(1)
    # Unique training id generated when inserting a new training document into
    # MongoDBexample: '63515c86b10d04d230dc1482'
    training_id: str = betterproto.string_field(2)


@dataclass
class GetTrainingResponse(betterproto.Message):
    # Training record from MongoDB (see Training for more detals)example:
    # Training
    training: "Training" = betterproto.message_field(1)


@dataclass
class Training(betterproto.Message):
    # Unique training id generated when inserting a new training document into
    # MongoDBexample: '63515c86b10d04d230dc1482'
    id: str = betterproto.string_field(1)
    # Unique dataset id generated when inserting a new dataset document into
    # MongoDBexample: '63515c86b10d04d230dc1482'
    dataset_id: str = betterproto.string_field(2)
    # Dataset name used for this trainingexample: 'Titanic'
    dataset_name: str = betterproto.string_field(3)
    # List of model records from MongoDB (see Model for more detals)example:
    # [Model, Model]
    models: List["Model"] = betterproto.message_field(4)
    # Current training activity status (busy, ended)example: "busy"
    status: str = betterproto.string_field(5)
    # Training Configuration object (see Configuration for more detals)example:
    # Configuration
    configuration: "Configuration" = betterproto.message_field(6)
    # The current dataset configuration used to open the dataset as a JSON
    # stringexample: '{"use_header": true,"start_row": 1,"delimiter":
    # "comma","escape_character": "\\","decimal_character": "."}'
    dataset_configuration: str = betterproto.string_field(7)
    # The Training runtime profile object (see TrainingRuntimeProfile for more
    # details)example: TrainingRuntimeProfile
    runtime_profile: "TrainingRuntimeProfile" = betterproto.message_field(8)


@dataclass
class Configuration(betterproto.Message):
    # The selected ML task set during the wizard configurationexample:
    # ":tabular_classification"
    task: str = betterproto.string_field(1)
    # The dataset target, if required by ML task set during the wizard
    # configurationexample: "Survived"
    target: str = betterproto.string_field(2)
    # List of enabled strategies ids the blackboard will try during the training
    # selected during the wizard configurationexample:
    # ['data_preparation.ignore_redundant_features']
    enabled_strategies: List[str] = betterproto.string_field(3)
    # The maximum amount of time in minute the training can run before
    # cancelation set during the wizard configurationexample: 5
    runtime_limit: int = betterproto.int32_field(4)
    # The ML metric selected during the wizard configurationexample: ":accuracy"
    metric: str = betterproto.string_field(5)
    # List of AutoML solutions selected during the wizard configurationexample:
    # [":autokeras", ":mljar"]
    selected_auto_ml_solutions: List[str] = betterproto.string_field(6)
    # List of ML libraries selected during the wizard configurationexample:
    # [":keras_lib", ":sklearn_lib"]
    selected_ml_libraries: List[str] = betterproto.string_field(7)
    # Map of additional parametersexamples:{":use_approach": { "values":
    # [":adaboost", ":decision_tree"]},":metric": { "values":
    # [":accuracy"]},":some_int": { "values": ["17"]}}
    parameters: Dict[str, "DynamicParameterValue"] = betterproto.map_field(
        8, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass
class TrainingRuntimeProfile(betterproto.Message):
    # The timestamp when the training process startedexample: 1666283732325
    start_time: datetime = betterproto.message_field(1)
    # The timestamp when the training process endedexample: 1666283732325
    end_time: datetime = betterproto.message_field(2)
    # List of StrategyControllerEvent objects (see StrategyControllerEvent for
    # more detals)example: [StrategyControllerEvent, StrategyControllerEvent]
    events: List["StrategyControllerEvent"] = betterproto.message_field(3)


@dataclass
class StrategyControllerEvent(betterproto.Message):
    # The event type name set by the blackboardexample: "phase_update"
    type: str = betterproto.string_field(1)
    # JSON string of meta information related to the typeexample:{"old_phase":
    # null,"new_phase": "started"}
    meta: str = betterproto.string_field(2)
    # The timestamp when the event happenedexample: 1666283732325
    timestamp: datetime = betterproto.message_field(3)


@dataclass
class CreateTrainingRequest(betterproto.Message):
    # Unique user id generated by the controller on the create new user request
    # from the frontend. Linked to a AspNetUser saved within the MS Sql database
    # of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    user_id: str = betterproto.string_field(1)
    # Unique dataset id generated when inserting a new dataset document into
    # MongoDBexample: '63515c86b10d04d230dc1482'
    dataset_id: str = betterproto.string_field(2)
    # Training Configuration object (see Configuration for more detals)example:
    # Configuration
    configuration: "Configuration" = betterproto.message_field(3)
    # The configuration of all columns. See
    # SetDatasetColumnSchemaConfigurationRequest for more details.example:
    # '{"PassengerId": {"RoleSelected": ":index","DatatypeSelected":
    # ":integer",},}'If "" (empty string) is provided, the currently saved schema
    # is used.
    dataset_configuration: str = betterproto.string_field(4)
    # If the new dataset schema should be persisted within the dataset document
    save_schema: bool = betterproto.bool_field(5)
    # If the model should be analysied after the training
    perform_model_analysis: bool = betterproto.bool_field(6)


@dataclass
class CreateTrainingResponse(betterproto.Message):
    # Unique training id generated when inserting a new training document into
    # MongoDBexample: '63515c86b10d04d230dc1482'
    training_id: str = betterproto.string_field(1)


@dataclass
class DynamicParameterValue(betterproto.Message):
    """
    Value type for dynamic training parameters for the auto ml solutions.This
    type is needed, because map<> does not supported "repeated" in the value.
    """

    # List of values for a parameterexamples:- int: ["17"]- single_value:
    # [":accuracy"]- list: [":adaboost", ":decision_tree"]
    values: List[str] = betterproto.string_field(1)
