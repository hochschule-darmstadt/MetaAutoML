# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: Common.proto, ControllerService.proto, DatasetRelatedMessages.proto, Enumerations.proto, ModelRelatedMessages.proto, TestingRelatedMessages.proto, TrainingRelatedMessages.proto, UserRelatedMessages.proto, WizzardMessages.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import Dict, List, Optional

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


class ResultCode(betterproto.Enum):
    RESULT_CODE_OKAY = 0
    RESULT_CODE_ERROR_CAN_NOT_CREATE_USER = 1


class DataType(betterproto.Enum):
    DATATYPE_UNKNOW = 0
    DATATYPE_STRING = 1
    DATATYPE_INT = 2
    DATATYPE_FLOAT = 3
    DATATYPE_CATEGORY = 4
    DATATYPE_BOOLEAN = 5
    DATATYPE_DATETIME = 6
    DATATYPE_IGNORE = 7


class DatasetType(betterproto.Enum):
    DATASET_TYPE_UNKNOWN = 0
    DATASET_TYPE_TABULAR_DATA = 1


class ControllerReturnCode(betterproto.Enum):
    CONTROLLER_RETURN_CODE_UNKNOWN = 0
    CONTROLLER_RETURN_CODE_SUCCESS = 1
    CONTROLLER_RETURN_CODE_STATUS_UPDATE = 2
    CONTROLLER_RETURN_CODE_ERROR = 100


class SessionStatus(betterproto.Enum):
    SESSION_STATUS_UNKNOWN = 0
    SESSION_STATUS_BUSY = 1
    SESSION_STATUS_COMPLETED = 2
    SESSION_STATUS_FAILED = 3


class SplitMethod(betterproto.Enum):
    SPLIT_METHOD_RANDOM = 0
    SPLIT_METHOD_END = 1


@dataclass(eq=False, repr=False)
class TestConfiguration(betterproto.Message):
    split_ratio: float = betterproto.float_field(1)
    method: "SplitMethod" = betterproto.enum_field(2)
    random_state: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class AutoMlTarget(betterproto.Message):
    target: str = betterproto.string_field(1)
    type: "DataType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class GetObjectsInformationRequest(betterproto.Message):
    ids: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetObjectsInformationResponse(betterproto.Message):
    object_informations: List["ObjectInformation"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ObjectInformation(betterproto.Message):
    id: str = betterproto.string_field(1)
    informations: Dict[str, str] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class GetHomeOverviewInformationRequest(betterproto.Message):
    user: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetHomeOverviewInformationResponse(betterproto.Message):
    dataset_amount: int = betterproto.int32_field(1)
    training_amount: int = betterproto.int32_field(2)
    model_amount: int = betterproto.int32_field(3)
    running_training_amount: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class GetDatasetTypesRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetDatasetTypesResponse(betterproto.Message):
    dataset_types: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetDatasetsRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    type: "DatasetType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class GetDatasetsResponse(betterproto.Message):
    dataset: List["Dataset"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Dataset(betterproto.Message):
    name: str = betterproto.string_field(1)
    type: str = betterproto.string_field(2)
    creation_date: datetime = betterproto.message_field(3)
    identifier: str = betterproto.string_field(4)
    size: int = betterproto.int64_field(5)
    analysis: str = betterproto.string_field(6)
    file_name: str = betterproto.string_field(7)
    file_configuration: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class SetDatasetConfigurationRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    identifier: str = betterproto.string_field(2)
    file_configuration: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class SetDatasetConfigurationResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetDatasetRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    identifier: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetDatasetResponse(betterproto.Message):
    dataset_infos: "Dataset" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TableColumn(betterproto.Message):
    name: str = betterproto.string_field(1)
    type: "DataType" = betterproto.enum_field(2)
    convertible_types: List["DataType"] = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class GetTabularDatasetColumnRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    dataset_identifier: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetTabularDatasetColumnResponse(betterproto.Message):
    columns: List["TableColumn"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UploadDatasetFileRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    file_name: str = betterproto.string_field(2)
    dataset_name: str = betterproto.string_field(3)
    type: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class UploadDatasetFileResponse(betterproto.Message):
    return_code: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class GetAutoMlModelRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    training_id: str = betterproto.string_field(2)
    auto_ml: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetAutoMlModelResponse(betterproto.Message):
    name: str = betterproto.string_field(1)
    file: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class GetModelsRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    dataset_id: str = betterproto.string_field(2)
    top3: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class GetModelsResponse(betterproto.Message):
    models: List["ModelInformation"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetModelRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    model_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetModelResponse(betterproto.Message):
    model: "ModelInformation" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ModelInformation(betterproto.Message):
    identifier: str = betterproto.string_field(1)
    training_id: str = betterproto.string_field(2)
    test_score: float = betterproto.float_field(3)
    validation_score: float = betterproto.float_field(4)
    runtime: int = betterproto.int32_field(5)
    model: str = betterproto.string_field(6)
    library: str = betterproto.string_field(7)
    status: str = betterproto.string_field(8)
    status_messages: List[str] = betterproto.string_field(9)
    prediction_time: float = betterproto.float_field(10)
    automl: str = betterproto.string_field(11)
    dataset_id: str = betterproto.string_field(12)
    explanation: str = betterproto.string_field(13)


@dataclass(eq=False, repr=False)
class GetAllTrainingsRequest(betterproto.Message):
    username: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetAllTrainingsResponse(betterproto.Message):
    trainings: List["GetTrainingResponse"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetTrainingsRequest(betterproto.Message):
    username: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetTrainingsResponse(betterproto.Message):
    training_ids: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetTrainingRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetTrainingResponse(betterproto.Message):
    status: str = betterproto.string_field(1)
    automls: List["AutoMlStatus"] = betterproto.message_field(2)
    dataset_id: str = betterproto.string_field(3)
    dataset_name: str = betterproto.string_field(4)
    task: str = betterproto.string_field(5)
    configuration: str = betterproto.string_field(6)
    required_ml_libraries: List[str] = betterproto.string_field(7)
    required_auto_mls: List[str] = betterproto.string_field(8)
    runtime_constraints: str = betterproto.string_field(9)
    dataset_configuration: str = betterproto.string_field(10)
    identifier: str = betterproto.string_field(11)
    start_time: datetime = betterproto.message_field(12)
    events: List["StrategyControllerEvent"] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class AutoMlStatus(betterproto.Message):
    name: str = betterproto.string_field(1)
    status: str = betterproto.string_field(2)
    messages: List[str] = betterproto.string_field(3)
    test_score: float = betterproto.float_field(4)
    validation_score: float = betterproto.float_field(5)
    runtime: int = betterproto.int32_field(6)
    predictiontime: float = betterproto.float_field(7)
    library: str = betterproto.string_field(8)
    model: str = betterproto.string_field(9)
    identifier: str = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class StrategyControllerEvent(betterproto.Message):
    type: str = betterproto.string_field(1)
    meta: str = betterproto.string_field(2)
    timestamp: datetime = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TestAutoMlRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    test_data: bytes = betterproto.bytes_field(2)
    model_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class TestAutoMlResponse(betterproto.Message):
    predictions: List[str] = betterproto.string_field(1)
    score: float = betterproto.float_field(2)
    predictiontime: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class CreateNewUserRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CreateNewUserResponse(betterproto.Message):
    result: "ResultCode" = betterproto.enum_field(1)
    oma_ml_user_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetCompatibleAutoMlSolutionsRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    configuration: Dict[str, str] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class GetCompatibleAutoMlSolutionsResponse(betterproto.Message):
    auto_ml_solutions: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetDatasetCompatibleTasksRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    dataset_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetDatasetCompatibleTasksResponse(betterproto.Message):
    tasks: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetSupportedMlLibrariesRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    task: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetSupportedMlLibrariesResponse(betterproto.Message):
    ml_libraries: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetAvailableStrategiesRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    configuration: Dict[str, str] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class GetAvailableStrategiesResponse(betterproto.Message):
    strategies: List["StrategyControllerStrategy"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class StrategyControllerStrategy(betterproto.Message):
    id: str = betterproto.string_field(1)
    title: str = betterproto.string_field(2)
    description: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class StartAutoMlProcessRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    dataset: str = betterproto.string_field(2)
    task: str = betterproto.string_field(3)
    configuration: str = betterproto.string_field(4)
    required_auto_mls: List[str] = betterproto.string_field(5)
    runtime_constraints: str = betterproto.string_field(6)
    dataset_configuration: str = betterproto.string_field(7)
    test_configuration: str = betterproto.string_field(8)
    file_configuration: str = betterproto.string_field(9)
    metric: str = betterproto.string_field(10)
    required_libraries: List[str] = betterproto.string_field(11)


@dataclass(eq=False, repr=False)
class StartAutoMlProcessResponse(betterproto.Message):
    result: "ControllerReturnCode" = betterproto.enum_field(1)
    training_id: str = betterproto.string_field(2)


class ControllerServiceStub(betterproto.ServiceStub):
    async def create_new_user(self) -> "CreateNewUserResponse":

        request = CreateNewUserRequest()

        return await self._unary_unary(
            "/ControllerService/CreateNewUser", request, CreateNewUserResponse
        )

    async def get_auto_ml_model(
        self, *, username: str = "", training_id: str = "", auto_ml: str = ""
    ) -> "GetAutoMlModelResponse":

        request = GetAutoMlModelRequest()
        request.username = username
        request.training_id = training_id
        request.auto_ml = auto_ml

        return await self._unary_unary(
            "/ControllerService/GetAutoMlModel", request, GetAutoMlModelResponse
        )

    async def get_compatible_auto_ml_solutions(
        self, *, username: str = "", configuration: Dict[str, str] = None
    ) -> "GetCompatibleAutoMlSolutionsResponse":

        request = GetCompatibleAutoMlSolutionsRequest()
        request.username = username
        request.configuration = configuration

        return await self._unary_unary(
            "/ControllerService/GetCompatibleAutoMlSolutions",
            request,
            GetCompatibleAutoMlSolutionsResponse,
        )

    async def get_available_strategies(
        self, *, username: str = "", configuration: Dict[str, str] = None
    ) -> "GetAvailableStrategiesResponse":

        request = GetAvailableStrategiesRequest()
        request.username = username
        request.configuration = configuration

        return await self._unary_unary(
            "/ControllerService/GetAvailableStrategies",
            request,
            GetAvailableStrategiesResponse,
        )

    async def get_dataset_types(self) -> "GetDatasetTypesResponse":

        request = GetDatasetTypesRequest()

        return await self._unary_unary(
            "/ControllerService/GetDatasetTypes", request, GetDatasetTypesResponse
        )

    async def get_datasets(
        self, *, username: str = "", type: "DatasetType" = 0
    ) -> "GetDatasetsResponse":

        request = GetDatasetsRequest()
        request.username = username
        request.type = type

        return await self._unary_unary(
            "/ControllerService/GetDatasets", request, GetDatasetsResponse
        )

    async def get_dataset(
        self, *, username: str = "", identifier: str = ""
    ) -> "GetDatasetResponse":

        request = GetDatasetRequest()
        request.username = username
        request.identifier = identifier

        return await self._unary_unary(
            "/ControllerService/GetDataset", request, GetDatasetResponse
        )

    async def get_trainings(self, *, username: str = "") -> "GetTrainingsResponse":

        request = GetTrainingsRequest()
        request.username = username

        return await self._unary_unary(
            "/ControllerService/GetTrainings", request, GetTrainingsResponse
        )

    async def get_training(
        self, *, username: str = "", id: str = ""
    ) -> "GetTrainingResponse":

        request = GetTrainingRequest()
        request.username = username
        request.id = id

        return await self._unary_unary(
            "/ControllerService/GetTraining", request, GetTrainingResponse
        )

    async def get_all_trainings(
        self, *, username: str = ""
    ) -> "GetAllTrainingsResponse":

        request = GetAllTrainingsRequest()
        request.username = username

        return await self._unary_unary(
            "/ControllerService/GetAllTrainings", request, GetAllTrainingsResponse
        )

    async def get_supported_ml_libraries(
        self, *, username: str = "", task: str = ""
    ) -> "GetSupportedMlLibrariesResponse":

        request = GetSupportedMlLibrariesRequest()
        request.username = username
        request.task = task

        return await self._unary_unary(
            "/ControllerService/GetSupportedMlLibraries",
            request,
            GetSupportedMlLibrariesResponse,
        )

    async def get_tabular_dataset_column(
        self, *, username: str = "", dataset_identifier: str = ""
    ) -> "GetTabularDatasetColumnResponse":

        request = GetTabularDatasetColumnRequest()
        request.username = username
        request.dataset_identifier = dataset_identifier

        return await self._unary_unary(
            "/ControllerService/GetTabularDatasetColumn",
            request,
            GetTabularDatasetColumnResponse,
        )

    async def get_dataset_compatible_tasks(
        self, *, username: str = "", dataset_name: str = ""
    ) -> "GetDatasetCompatibleTasksResponse":

        request = GetDatasetCompatibleTasksRequest()
        request.username = username
        request.dataset_name = dataset_name

        return await self._unary_unary(
            "/ControllerService/GetDatasetCompatibleTasks",
            request,
            GetDatasetCompatibleTasksResponse,
        )

    async def get_models(
        self, *, username: str = "", dataset_id: str = "", top3: bool = False
    ) -> "GetModelsResponse":

        request = GetModelsRequest()
        request.username = username
        request.dataset_id = dataset_id
        request.top3 = top3

        return await self._unary_unary(
            "/ControllerService/GetModels", request, GetModelsResponse
        )

    async def get_model(
        self, *, username: str = "", model_id: str = ""
    ) -> "GetModelResponse":

        request = GetModelRequest()
        request.username = username
        request.model_id = model_id

        return await self._unary_unary(
            "/ControllerService/GetModel", request, GetModelResponse
        )

    async def get_objects_information(
        self, *, ids: Optional[List[str]] = None
    ) -> "GetObjectsInformationResponse":
        ids = ids or []

        request = GetObjectsInformationRequest()
        request.ids = ids

        return await self._unary_unary(
            "/ControllerService/GetObjectsInformation",
            request,
            GetObjectsInformationResponse,
        )

    async def get_home_overview_information(
        self, *, user: str = ""
    ) -> "GetHomeOverviewInformationResponse":

        request = GetHomeOverviewInformationRequest()
        request.user = user

        return await self._unary_unary(
            "/ControllerService/GetHomeOverviewInformation",
            request,
            GetHomeOverviewInformationResponse,
        )

    async def upload_dataset_file(
        self,
        *,
        username: str = "",
        file_name: str = "",
        dataset_name: str = "",
        type: str = ""
    ) -> "UploadDatasetFileResponse":

        request = UploadDatasetFileRequest()
        request.username = username
        request.file_name = file_name
        request.dataset_name = dataset_name
        request.type = type

        return await self._unary_unary(
            "/ControllerService/UploadDatasetFile", request, UploadDatasetFileResponse
        )

    async def start_auto_ml_process(
        self,
        *,
        username: str = "",
        dataset: str = "",
        task: str = "",
        configuration: str = "",
        required_auto_mls: Optional[List[str]] = None,
        runtime_constraints: str = "",
        dataset_configuration: str = "",
        test_configuration: str = "",
        file_configuration: str = "",
        metric: str = "",
        required_libraries: Optional[List[str]] = None
    ) -> "StartAutoMlProcessResponse":
        required_auto_mls = required_auto_mls or []
        required_libraries = required_libraries or []

        request = StartAutoMlProcessRequest()
        request.username = username
        request.dataset = dataset
        request.task = task
        request.configuration = configuration
        request.required_auto_mls = required_auto_mls
        request.runtime_constraints = runtime_constraints
        request.dataset_configuration = dataset_configuration
        request.test_configuration = test_configuration
        request.file_configuration = file_configuration
        request.metric = metric
        request.required_libraries = required_libraries

        return await self._unary_unary(
            "/ControllerService/StartAutoMlProcess", request, StartAutoMlProcessResponse
        )

    async def set_dataset_configuration(
        self, *, username: str = "", identifier: str = "", file_configuration: str = ""
    ) -> "SetDatasetConfigurationResponse":

        request = SetDatasetConfigurationRequest()
        request.username = username
        request.identifier = identifier
        request.file_configuration = file_configuration

        return await self._unary_unary(
            "/ControllerService/SetDatasetConfiguration",
            request,
            SetDatasetConfigurationResponse,
        )

    async def test_auto_ml(
        self, *, username: str = "", test_data: bytes = b"", model_id: str = ""
    ) -> "TestAutoMlResponse":

        request = TestAutoMlRequest()
        request.username = username
        request.test_data = test_data
        request.model_id = model_id

        return await self._unary_unary(
            "/ControllerService/TestAutoML", request, TestAutoMlResponse
        )


class ControllerServiceBase(ServiceBase):
    async def create_new_user(self) -> "CreateNewUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_auto_ml_model(
        self, username: str, training_id: str, auto_ml: str
    ) -> "GetAutoMlModelResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_compatible_auto_ml_solutions(
        self, username: str, configuration: Dict[str, str]
    ) -> "GetCompatibleAutoMlSolutionsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_available_strategies(
        self, username: str, configuration: Dict[str, str]
    ) -> "GetAvailableStrategiesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_dataset_types(self) -> "GetDatasetTypesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_datasets(
        self, username: str, type: "DatasetType"
    ) -> "GetDatasetsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_dataset(self, username: str, identifier: str) -> "GetDatasetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_trainings(self, username: str) -> "GetTrainingsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_training(self, username: str, id: str) -> "GetTrainingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_all_trainings(self, username: str) -> "GetAllTrainingsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_supported_ml_libraries(
        self, username: str, task: str
    ) -> "GetSupportedMlLibrariesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_tabular_dataset_column(
        self, username: str, dataset_identifier: str
    ) -> "GetTabularDatasetColumnResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_dataset_compatible_tasks(
        self, username: str, dataset_name: str
    ) -> "GetDatasetCompatibleTasksResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_models(
        self, username: str, dataset_id: str, top3: bool
    ) -> "GetModelsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_model(self, username: str, model_id: str) -> "GetModelResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_objects_information(
        self, ids: Optional[List[str]]
    ) -> "GetObjectsInformationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_home_overview_information(
        self, user: str
    ) -> "GetHomeOverviewInformationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def upload_dataset_file(
        self, username: str, file_name: str, dataset_name: str, type: str
    ) -> "UploadDatasetFileResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def start_auto_ml_process(
        self,
        username: str,
        dataset: str,
        task: str,
        configuration: str,
        required_auto_mls: Optional[List[str]],
        runtime_constraints: str,
        dataset_configuration: str,
        test_configuration: str,
        file_configuration: str,
        metric: str,
        required_libraries: Optional[List[str]],
    ) -> "StartAutoMlProcessResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_dataset_configuration(
        self, username: str, identifier: str, file_configuration: str
    ) -> "SetDatasetConfigurationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def test_auto_ml(
        self, username: str, test_data: bytes, model_id: str
    ) -> "TestAutoMlResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_new_user(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.create_new_user(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_auto_ml_model(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "username": request.username,
            "training_id": request.training_id,
            "auto_ml": request.auto_ml,
        }

        response = await self.get_auto_ml_model(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_compatible_auto_ml_solutions(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "username": request.username,
            "configuration": request.configuration,
        }

        response = await self.get_compatible_auto_ml_solutions(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_available_strategies(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "username": request.username,
            "configuration": request.configuration,
        }

        response = await self.get_available_strategies(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_dataset_types(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.get_dataset_types(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_datasets(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "username": request.username,
            "type": request.type,
        }

        response = await self.get_datasets(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_dataset(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "username": request.username,
            "identifier": request.identifier,
        }

        response = await self.get_dataset(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_trainings(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "username": request.username,
        }

        response = await self.get_trainings(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_training(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "username": request.username,
            "id": request.id,
        }

        response = await self.get_training(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_all_trainings(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "username": request.username,
        }

        response = await self.get_all_trainings(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_supported_ml_libraries(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "username": request.username,
            "task": request.task,
        }

        response = await self.get_supported_ml_libraries(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_tabular_dataset_column(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "username": request.username,
            "dataset_identifier": request.dataset_identifier,
        }

        response = await self.get_tabular_dataset_column(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_dataset_compatible_tasks(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "username": request.username,
            "dataset_name": request.dataset_name,
        }

        response = await self.get_dataset_compatible_tasks(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_models(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "username": request.username,
            "dataset_id": request.dataset_id,
            "top3": request.top3,
        }

        response = await self.get_models(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_model(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "username": request.username,
            "model_id": request.model_id,
        }

        response = await self.get_model(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_objects_information(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "ids": request.ids,
        }

        response = await self.get_objects_information(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_home_overview_information(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "user": request.user,
        }

        response = await self.get_home_overview_information(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_upload_dataset_file(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "username": request.username,
            "file_name": request.file_name,
            "dataset_name": request.dataset_name,
            "type": request.type,
        }

        response = await self.upload_dataset_file(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_start_auto_ml_process(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "username": request.username,
            "dataset": request.dataset,
            "task": request.task,
            "configuration": request.configuration,
            "required_auto_mls": request.required_auto_mls,
            "runtime_constraints": request.runtime_constraints,
            "dataset_configuration": request.dataset_configuration,
            "test_configuration": request.test_configuration,
            "file_configuration": request.file_configuration,
            "metric": request.metric,
            "required_libraries": request.required_libraries,
        }

        response = await self.start_auto_ml_process(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_set_dataset_configuration(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "username": request.username,
            "identifier": request.identifier,
            "file_configuration": request.file_configuration,
        }

        response = await self.set_dataset_configuration(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_test_auto_ml(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "username": request.username,
            "test_data": request.test_data,
            "model_id": request.model_id,
        }

        response = await self.test_auto_ml(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/ControllerService/CreateNewUser": grpclib.const.Handler(
                self.__rpc_create_new_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateNewUserRequest,
                CreateNewUserResponse,
            ),
            "/ControllerService/GetAutoMlModel": grpclib.const.Handler(
                self.__rpc_get_auto_ml_model,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAutoMlModelRequest,
                GetAutoMlModelResponse,
            ),
            "/ControllerService/GetCompatibleAutoMlSolutions": grpclib.const.Handler(
                self.__rpc_get_compatible_auto_ml_solutions,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetCompatibleAutoMlSolutionsRequest,
                GetCompatibleAutoMlSolutionsResponse,
            ),
            "/ControllerService/GetAvailableStrategies": grpclib.const.Handler(
                self.__rpc_get_available_strategies,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAvailableStrategiesRequest,
                GetAvailableStrategiesResponse,
            ),
            "/ControllerService/GetDatasetTypes": grpclib.const.Handler(
                self.__rpc_get_dataset_types,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDatasetTypesRequest,
                GetDatasetTypesResponse,
            ),
            "/ControllerService/GetDatasets": grpclib.const.Handler(
                self.__rpc_get_datasets,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDatasetsRequest,
                GetDatasetsResponse,
            ),
            "/ControllerService/GetDataset": grpclib.const.Handler(
                self.__rpc_get_dataset,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDatasetRequest,
                GetDatasetResponse,
            ),
            "/ControllerService/GetTrainings": grpclib.const.Handler(
                self.__rpc_get_trainings,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTrainingsRequest,
                GetTrainingsResponse,
            ),
            "/ControllerService/GetTraining": grpclib.const.Handler(
                self.__rpc_get_training,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTrainingRequest,
                GetTrainingResponse,
            ),
            "/ControllerService/GetAllTrainings": grpclib.const.Handler(
                self.__rpc_get_all_trainings,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAllTrainingsRequest,
                GetAllTrainingsResponse,
            ),
            "/ControllerService/GetSupportedMlLibraries": grpclib.const.Handler(
                self.__rpc_get_supported_ml_libraries,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetSupportedMlLibrariesRequest,
                GetSupportedMlLibrariesResponse,
            ),
            "/ControllerService/GetTabularDatasetColumn": grpclib.const.Handler(
                self.__rpc_get_tabular_dataset_column,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTabularDatasetColumnRequest,
                GetTabularDatasetColumnResponse,
            ),
            "/ControllerService/GetDatasetCompatibleTasks": grpclib.const.Handler(
                self.__rpc_get_dataset_compatible_tasks,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDatasetCompatibleTasksRequest,
                GetDatasetCompatibleTasksResponse,
            ),
            "/ControllerService/GetModels": grpclib.const.Handler(
                self.__rpc_get_models,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetModelsRequest,
                GetModelsResponse,
            ),
            "/ControllerService/GetModel": grpclib.const.Handler(
                self.__rpc_get_model,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetModelRequest,
                GetModelResponse,
            ),
            "/ControllerService/GetObjectsInformation": grpclib.const.Handler(
                self.__rpc_get_objects_information,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetObjectsInformationRequest,
                GetObjectsInformationResponse,
            ),
            "/ControllerService/GetHomeOverviewInformation": grpclib.const.Handler(
                self.__rpc_get_home_overview_information,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetHomeOverviewInformationRequest,
                GetHomeOverviewInformationResponse,
            ),
            "/ControllerService/UploadDatasetFile": grpclib.const.Handler(
                self.__rpc_upload_dataset_file,
                grpclib.const.Cardinality.UNARY_UNARY,
                UploadDatasetFileRequest,
                UploadDatasetFileResponse,
            ),
            "/ControllerService/StartAutoMlProcess": grpclib.const.Handler(
                self.__rpc_start_auto_ml_process,
                grpclib.const.Cardinality.UNARY_UNARY,
                StartAutoMlProcessRequest,
                StartAutoMlProcessResponse,
            ),
            "/ControllerService/SetDatasetConfiguration": grpclib.const.Handler(
                self.__rpc_set_dataset_configuration,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetDatasetConfigurationRequest,
                SetDatasetConfigurationResponse,
            ),
            "/ControllerService/TestAutoML": grpclib.const.Handler(
                self.__rpc_test_auto_ml,
                grpclib.const.Cardinality.UNARY_UNARY,
                TestAutoMlRequest,
                TestAutoMlResponse,
            ),
        }
