# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: OntologyRelatedMessages.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List

import betterproto


@dataclass
class GetAutoMlSolutionsForConfigurationRequest(betterproto.Message):
    # Dictonary holding the current user configuration of the training
    # wizardexample:{"task": ":tabular_classification","library": [":keras_lib",
    # ":tensorflow_lib"],}
    configuration: Dict[str, str] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass
class GetAutoMlSolutionsForConfigurationResponse(betterproto.Message):
    # List of AutoML solution IRIs from the ontology compatible with the current
    # wizard configurationexample: [":autokeras", ":mljar"]
    auto_ml_solutions: List[str] = betterproto.string_field(1)


@dataclass
class GetTasksForDatasetTypeRequest(betterproto.Message):
    # The dataset type IRI from the dataset selected for the training
    # wizardexample: ":tabular"
    dataset_type: str = betterproto.string_field(1)


@dataclass
class GetTasksForDatasetTypeResponse(betterproto.Message):
    # List of ML task IRIs from the ontology compatible with the request dataset
    # typeexample: [":tabular_classification", ":tabular_regression"]
    tasks: List[str] = betterproto.string_field(1)


@dataclass
class GetMlLibrariesForTaskRequest(betterproto.Message):
    # The task IRI selected by the user in the training wizardexample:
    # ":tabular_classification"
    task: str = betterproto.string_field(1)


@dataclass
class GetMlLibrariesForTaskResponse(betterproto.Message):
    # List of ML library IRIs from the ontology supporting the requested ML
    # taskexample: [":keras_lib", ":tensorflow_lib"]
    ml_libraries: List[str] = betterproto.string_field(1)


@dataclass
class GetAvailableStrategiesRequest(betterproto.Message):
    # Unique user id generated by the controller on the create new user request
    # from the frontend. Linked to a AspNetUser saved within the MS Sql database
    # of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    user_id: str = betterproto.string_field(1)
    # Unique dataset id generated when inserting a new dataset document into
    # MongoDBexample: '63515c86b10d04d230dc1482'
    dataset_id: str = betterproto.string_field(2)
    # Dictonary holding the current user configuration of the training
    # wizardexample:{"task": ":tabular_classification","library": [":keras_lib",
    # ":tensorflow_lib"],}
    configuration: Dict[str, str] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass
class GetAvailableStrategiesResponse(betterproto.Message):
    # List of Strategy objects (see Strategy for more detals)example: [Strategy,
    # Strategy]
    strategies: List["Strategy"] = betterproto.message_field(1)


@dataclass
class Strategy(betterproto.Message):
    # Unique strategy id to identify a blackboard strategyexample:
    # 'data_preparation.ignore_redundant_features'
    id: str = betterproto.string_field(1)
    # The strategy titleexample: 'Ignore redundant features'
    title: str = betterproto.string_field(2)
    # The strategy descriptionexample: 'This strategy ignores certain dataset
    # columns if they have been flagged as duplicate in the dataset analysis.'
    description: str = betterproto.string_field(3)


@dataclass
class GetObjectsInformationRequest(betterproto.Message):
    # List of ontology IRI to retrieve the complete information from.example:
    # [":tabular_classification",”:autokeras”]
    ids: List[str] = betterproto.string_field(1)


@dataclass
class GetObjectsInformationResponse(betterproto.Message):
    # List of object informations (see ObjectInformation for more detals)example:
    # [ObjectInformation, ObjectInformation]
    object_informations: List["ObjectInformation"] = betterproto.message_field(1)


@dataclass
class ObjectInformation(betterproto.Message):
    # RDF subject IRIexample: “:tabular_classification"
    id: str = betterproto.string_field(1)
    # dictionary of RDF pairs for predicates and
    # objectsexample:{"skos:prefLabel": "tabular classification","skos:broader":
    # ":classification",":belongs_to":
    # ":supervised_learning",":has_dataset_type": ":tabular"}
    informations: Dict[str, str] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass
class GetDatasetTypesRequest(betterproto.Message):
    pass


@dataclass
class GetDatasetTypesResponse(betterproto.Message):
    # List of supported dataset type IRIs by OMA-MLexample: [":tabular",
    # ":image"]
    dataset_types: List[str] = betterproto.string_field(1)


@dataclass
class GetAutoMlParametersRequest(betterproto.Message):
    # Iri of the auto ml task. Example: :tabular_classification
    task_iri: str = betterproto.string_field(1)
    # List of auto ml iris. Example: [":autokeras", ":mljar"]
    auto_mls: List[str] = betterproto.string_field(2)


@dataclass
class GetAutoMlParametersResponse(betterproto.Message):
    # List of available auto ml parameters
    auto_ml_parameters: List["AutoMlParameter"] = betterproto.message_field(1)


@dataclass
class AutoMlParameter(betterproto.Message):
    """
    Parameter for an auto ml solutionexample:{autoMlIri: ":autokeras",paramIri:
    ":metric_autokeras_regression",paramType: ":list",broaderIri:
    ":metric",valueIri: ":median_absolute_error",}
    """

    auto_ml_iri: str = betterproto.string_field(1)
    param_iri: str = betterproto.string_field(2)
    param_type: str = betterproto.string_field(3)
    broader_iri: str = betterproto.string_field(4)
    value_iri: str = betterproto.string_field(5, group="_valueIri")


@dataclass
class GetSearchRelevantDataRequest(betterproto.Message):
    pass


@dataclass
class GetSearchRelevantDataResponse(betterproto.Message):
    # List of search relevant data
    search_entities: List["SearchRelevantData"] = betterproto.message_field(1)


@dataclass
class SearchRelevantData(betterproto.Message):
    entity: str = betterproto.string_field(1)
    class_: str = betterproto.string_field(2)
    label: str = betterproto.string_field(3)
    comment: str = betterproto.string_field(4)
    alt_labels: str = betterproto.string_field(5, group="_altLabels")
    link: str = betterproto.string_field(6, group="_link")
