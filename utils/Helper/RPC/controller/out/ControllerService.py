# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: ControllerService.proto
# plugin: python-betterproto
from dataclasses import dataclass

import betterproto
import grpclib


class ControllerServiceStub(betterproto.ServiceStub):
    """includes all gRPC functions available for the client frontend"""

    async def create_new_user(self) -> CreateNewUserResponse:
        """
        create a new unique user id that must be persisted inside the frontend
        database
        """

        request = CreateNewUserRequest()

        return await self._unary_unary(
            "/.ControllerService/CreateNewUser",
            request,
            CreateNewUserResponse,
        )

    async def get_home_overview_information(self) -> GetHomeOverviewInformationResponse:
        """
        returns the information displayed on the home page overview component
        """

        request = GetHomeOverviewInformationRequest()

        return await self._unary_unary(
            "/.ControllerService/GetHomeOverviewInformation",
            request,
            GetHomeOverviewInformationResponse,
        )

    async def create_dataset(self) -> CreateDatasetResponse:
        """
        create a new Dataset record in MongoDB and start the dataset analysis
        """

        request = CreateDatasetRequest()

        return await self._unary_unary(
            "/.ControllerService/CreateDataset",
            request,
            CreateDatasetResponse,
        )

    async def get_datasets(self) -> GetDatasetsResponse:
        """return a list of all Datasets records for a user id"""

        request = GetDatasetsRequest()

        return await self._unary_unary(
            "/.ControllerService/GetDatasets",
            request,
            GetDatasetsResponse,
        )

    async def get_dataset(self) -> GetDatasetResponse:
        """return a Dataset record by user id and dataset id"""

        request = GetDatasetRequest()

        return await self._unary_unary(
            "/.ControllerService/GetDataset",
            request,
            GetDatasetResponse,
        )

    async def delete_dataset(self) -> DeleteDatasetResponse:
        """
        delete a Dataset record and every related object inside MongoDB and
        files on disc (Trainings, Models, Predictions)
        """

        request = DeleteDatasetRequest()

        return await self._unary_unary(
            "/.ControllerService/DeleteDataset",
            request,
            DeleteDatasetResponse,
        )

    async def set_dataset_configuration(self) -> SetDatasetConfigurationResponse:
        """
        update the dataset file configuration and execute the dataset analysis
        again
        """

        request = SetDatasetConfigurationRequest()

        return await self._unary_unary(
            "/.ControllerService/SetDatasetConfiguration",
            request,
            SetDatasetConfigurationResponse,
        )

    async def set_dataset_column_schema_configuration(
        self,
    ) -> SetDatasetColumnSchemaConfigurationResponse:
        """update a dataset column schema configuration"""

        request = SetDatasetColumnSchemaConfigurationRequest()

        return await self._unary_unary(
            "/.ControllerService/SetDatasetColumnSchemaConfiguration",
            request,
            SetDatasetColumnSchemaConfigurationResponse,
        )

    async def create_training(self) -> CreateTrainingResponse:
        """
        create a new Training record in MongoDB and start the a new training
        session
        """

        request = CreateTrainingRequest()

        return await self._unary_unary(
            "/.ControllerService/CreateTraining",
            request,
            CreateTrainingResponse,
        )

    async def get_trainings(self) -> GetTrainingsResponse:
        """return a list of all Trainings records for a user id"""

        request = GetTrainingsRequest()

        return await self._unary_unary(
            "/.ControllerService/GetTrainings",
            request,
            GetTrainingsResponse,
        )

    async def get_training(self) -> GetTrainingResponse:
        """return a Training record by user id and training id"""

        request = GetTrainingRequest()

        return await self._unary_unary(
            "/.ControllerService/GetTraining",
            request,
            GetTrainingResponse,
        )

    async def delete_training(self) -> DeleteTrainingResponse:
        """
        delete a Training record and every related object inside MongoDB and
        files on disc (Models, Predictions)
        """

        request = DeleteTrainingRequest()

        return await self._unary_unary(
            "/.ControllerService/DeleteTraining",
            request,
            DeleteTrainingResponse,
        )

    async def get_models(self) -> GetModelsResponse:
        """
        return a list of all Models records for a training id or dataset id and
        user id
        """

        request = GetModelsRequest()

        return await self._unary_unary(
            "/.ControllerService/GetModels",
            request,
            GetModelsResponse,
        )

    async def get_model(self) -> GetModelResponse:
        """return a Model record by user id and training id"""

        request = GetModelRequest()

        return await self._unary_unary(
            "/.ControllerService/GetModel",
            request,
            GetModelResponse,
        )

    async def delete_model(self) -> DeleteModelResponse:
        """
        delete a Model record and every related object inside MongoDB and files
        on disc (Predictions)
        """

        request = DeleteModelRequest()

        return await self._unary_unary(
            "/.ControllerService/DeleteModel",
            request,
            DeleteModelResponse,
        )

    async def start_explainer_dashboard(self) -> StartDashboardResponse:
        """starts an ExplainerDashboard of a given model"""

        request = StartDashboardRequest()

        return await self._unary_unary(
            "/.ControllerService/StartExplainerDashboard",
            request,
            StartDashboardResponse,
        )

    async def stop_explainer_dashboard(self) -> StopDashboardResponse:
        """stops an ExplainerDashboard of a given model"""

        request = StopDashboardRequest()

        return await self._unary_unary(
            "/.ControllerService/StopExplainerDashboard",
            request,
            StopDashboardResponse,
        )

    async def get_auto_ml_solutions_for_configuration(
        self,
    ) -> GetAutoMlSolutionsForConfigurationResponse:
        """
        return a list of AutoML solutions compatible with the current
        configuration
        """

        request = GetAutoMlSolutionsForConfigurationRequest()

        return await self._unary_unary(
            "/.ControllerService/GetAutoMlSolutionsForConfiguration",
            request,
            GetAutoMlSolutionsForConfigurationResponse,
        )

    async def get_available_strategies(self) -> GetAvailableStrategiesResponse:
        """
        return a list of controller strategies available for the current
        configuration
        """

        request = GetAvailableStrategiesRequest()

        return await self._unary_unary(
            "/.ControllerService/GetAvailableStrategies",
            request,
            GetAvailableStrategiesResponse,
        )

    async def get_dataset_types(self) -> GetDatasetTypesResponse:
        """return dataset types"""

        request = GetDatasetTypesRequest()

        return await self._unary_unary(
            "/.ControllerService/GetDatasetTypes",
            request,
            GetDatasetTypesResponse,
        )

    async def get_ml_libraries_for_task(self) -> GetMlLibrariesForTaskResponse:
        """
        return all supported machine learning libraries for a specific task (by
        searching supported AutoML)
        """

        request = GetMlLibrariesForTaskRequest()

        return await self._unary_unary(
            "/.ControllerService/GetMlLibrariesForTask",
            request,
            GetMlLibrariesForTaskResponse,
        )

    async def get_objects_information(self) -> GetObjectsInformationResponse:
        """return all information fields of an object"""

        request = GetObjectsInformationRequest()

        return await self._unary_unary(
            "/.ControllerService/GetObjectsInformation",
            request,
            GetObjectsInformationResponse,
        )

    async def get_tasks_for_dataset_type(self) -> GetTasksForDatasetTypeResponse:
        """return all supported AutoML tasks"""

        request = GetTasksForDatasetTypeRequest()

        return await self._unary_unary(
            "/.ControllerService/GetTasksForDatasetType",
            request,
            GetTasksForDatasetTypeResponse,
        )

    async def get_auto_ml_parameters(self) -> GetAutoMlParametersResponse:
        """return all parameters available for the current configuration"""

        request = GetAutoMlParametersRequest()

        return await self._unary_unary(
            "/.ControllerService/GetAutoMlParameters",
            request,
            GetAutoMlParametersResponse,
        )

    async def create_prediction(self) -> CreatePredictionResponse:
        """
        create a new Prediction record in MongoDB and start the a new
        prediction session
        """

        request = CreatePredictionRequest()

        return await self._unary_unary(
            "/.ControllerService/CreatePrediction",
            request,
            CreatePredictionResponse,
        )

    async def get_predictions(self) -> GetPredictionsResponse:
        """return a list of all Predictions record by model id and user id"""

        request = GetPredictionsRequest()

        return await self._unary_unary(
            "/.ControllerService/GetPredictions",
            request,
            GetPredictionsResponse,
        )

    async def get_prediction(self) -> GetPredictionResponse:
        """return a Prediction by prediction id and user id"""

        request = GetPredictionRequest()

        return await self._unary_unary(
            "/.ControllerService/GetPrediction",
            request,
            GetPredictionResponse,
        )

    async def delete_prediction(self) -> DeletePredictionResponse:
        """
        delete a Prediction and every related object inside MongoDB and files
        on disc
        """

        request = DeletePredictionRequest()

        return await self._unary_unary(
            "/.ControllerService/DeletePrediction",
            request,
            DeletePredictionResponse,
        )

    async def get_search_relevant_data(self) -> GetSearchRelevantDataResponse:
        """
        return a list of search relevant data available within the ML Ontology
        """

        request = GetSearchRelevantDataRequest()

        return await self._unary_unary(
            "/.ControllerService/GetSearchRelevantData",
            request,
            GetSearchRelevantDataResponse,
        )
