# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: DatasetRelatedMessages.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List

import betterproto


@dataclass
class GetDatasetRequest(betterproto.Message):
    # Unique user id generated by the controller on the create new user request
    # from the frontend. Linked to a AspNetUser saved within the MS Sql database
    # of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    user_id: str = betterproto.string_field(1)
    # Unique dataset id generated when inserting a new dataset document into
    # MongoDBexample: '63515c86b10d04d230dc1482'
    dataset_id: str = betterproto.string_field(2)


@dataclass
class GetDatasetResponse(betterproto.Message):
    # Dataset record from MongoDB (see Dataset for more detals)example: Dataset
    dataset: "Dataset" = betterproto.message_field(1)


@dataclass
class GetDatasetsRequest(betterproto.Message):
    # Unique user id generated by the controller on the create new user request
    # from the frontend. Linked to a AspNetUser saved within the MS Sql database
    # of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    user_id: str = betterproto.string_field(1)
    # Filter to only return datasets of a specific dataset typeexample:
    # ":tabular"
    type: str = betterproto.string_field(2)
    # return only most recent datasetsexample: True // returns only up to 5 most
    # recent datasets
    only_five_recent: bool = betterproto.bool_field(3)
    # Should results be paginated, combined with page parameterexample: True
    # //return results by pagination
    pagination: bool = betterproto.bool_field(4)
    # The page to retrieveexample: 2 //return trainings from pagination page 2
    page_number: int = betterproto.int32_field(5)


@dataclass
class GetDatasetsResponse(betterproto.Message):
    # List of dataset records from MongoDB (see Dataset for more detals)example:
    # [Dataset, Dataset]
    datasets: List["Dataset"] = betterproto.message_field(1)


@dataclass
class DeleteDatasetRequest(betterproto.Message):
    # Unique user id generated by the controller on the create new user request
    # from the frontend. Linked to a AspNetUser saved within the MS Sql database
    # of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    user_id: str = betterproto.string_field(1)
    # Unique dataset id generated when inserting a new dataset document into
    # MongoDBexample: '63515c86b10d04d230dc1482'
    dataset_id: str = betterproto.string_field(2)


@dataclass
class DeleteDatasetResponse(betterproto.Message):
    pass


@dataclass
class Dataset(betterproto.Message):
    # Unique dataset id generated when inserting a new dataset document into
    # MongoDBexample: '63515c86b10d04d230dc1482'
    id: str = betterproto.string_field(1)
    # Display name for a dataset, set by the user on dataset uploadexample:
    # "Titanic"
    name: str = betterproto.string_field(2)
    # Dataset type Ontology URI, selected by the user on dataset uploadexample:
    # ":tabular"
    type: str = betterproto.string_field(3)
    # Absolute system path where the dataset is saved (single file dataset use
    # the file name as ending of the path while multi file dataset will only have
    # is root folder of the dataset)example: "app/app-
    # data/datasets/....../titanic_train.csv"
    path: str = betterproto.string_field(4)
    # The current file configuration used to open the dataset as a JSON
    # stringexample: '{"use_header": true,"start_row": 1,"delimiter":
    # "comma","escape_character": "\\","decimal_character": "."}'
    file_configuration: str = betterproto.string_field(5)
    # List of unique training id that use this dataset for training ML
    # modelsexample: ["63515cb4b10d04d230dc1484", "635255f5394eff35ee175bb5"]
    training_ids: List[str] = betterproto.string_field(6)
    # The result of the dataset analysis saved as JSON stringexample: See Dataset
    # data schema inside wiki https://github.com/hochschule-
    # darmstadt/MetaAutoML/wiki/2.-System-Architecture#dataset-record
    analysis: str = betterproto.string_field(7)
    # Dictonary of the dataset schema{"PassengerId": {"datatype_detected":
    # ":integer","datatypes_compatible":
    # [":integer",":categorical"],"datatype_selected":
    # ":string","roles_compatible":
    # [":target",":ignore",":index"],"role_selected": ":index"},}
    schema: Dict[str, "ColumnSchema"] = betterproto.map_field(
        8, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass
class CreateDatasetRequest(betterproto.Message):
    # Unique user id generated by the controller on the create new user request
    # from the frontend. Linked to a AspNetUser saved within the MS Sql database
    # of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    user_id: str = betterproto.string_field(1)
    # The uploaded file nameexample: "titanic_train.csv"
    file_name: str = betterproto.string_field(2)
    # The user set dataset display nameexample: "Titanic"
    dataset_name: str = betterproto.string_field(3)
    # The user set dataset type ontology URIexample: ":tabular"
    dataset_type: str = betterproto.string_field(4)
    # The detected encodingexample: "windows-1052"
    encoding: str = betterproto.string_field(5)


@dataclass
class CreateDatasetResponse(betterproto.Message):
    pass


@dataclass
class SetDatasetConfigurationRequest(betterproto.Message):
    # Unique user id generated by the controller on the create new user request
    # from the frontend. Linked to a AspNetUser saved within the MS Sql database
    # of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    user_id: str = betterproto.string_field(1)
    # Unique dataset id generated when inserting a new dataset document into
    # MongoDBexample: '63515c86b10d04d230dc1482'
    dataset_id: str = betterproto.string_field(2)
    # The new file configuration to use to read the dataset file as a JSON
    # stringexample: '{"use_header": true,"start_row": 1,"delimiter":
    # "comma","escape_character": "\\","decimal_character": ".","encoding":
    # "utf-8"}'
    file_configuration: str = betterproto.string_field(3)


@dataclass
class SetDatasetConfigurationResponse(betterproto.Message):
    pass


@dataclass
class SetDatasetColumnSchemaConfigurationRequest(betterproto.Message):
    # Unique user id generated by the controller on the create new user request
    # from the frontend. Linked to a AspNetUser saved within the MS Sql database
    # of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    user_id: str = betterproto.string_field(1)
    # Unique dataset id generated when inserting a new dataset document into
    # MongoDBexample: '63515c86b10d04d230dc1482'
    dataset_id: str = betterproto.string_field(2)
    # Column key which is to be updated"PassengerId"}
    column: str = betterproto.string_field(3)
    # The dataset type IRI selected by the user":categorical"
    datatype_selected: str = betterproto.string_field(4)
    # The selected role IRI by the user. Valid options besides the ones defined
    # in the ontology are ":none" and "" (empty string)":index"
    role_selected: str = betterproto.string_field(5)


@dataclass
class SetDatasetColumnSchemaConfigurationResponse(betterproto.Message):
    pass


@dataclass
class ColumnSchema(betterproto.Message):
    # Dataset type IRI automatically detected":integer"
    datatype_detected: str = betterproto.string_field(1)
    # Compatible dataset types IRIs which can be casted towards[":integer",
    # ":categorical"]
    datatypes_compatible: List[str] = betterproto.string_field(2)
    # The dataset type IRI selected by the user":categorical"
    datatype_selected: str = betterproto.string_field(3)
    # List of compatible roles IRIs[":index", ":ignore"]
    roles_compatible: List[str] = betterproto.string_field(4)
    # The selected role IRI by the user":index"
    role_selected: str = betterproto.string_field(5)
