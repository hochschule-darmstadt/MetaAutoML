syntax = "proto3";
option csharp_namespace = "BlazorBoilerplate.Server";

import "Enumerations.proto";
import "PredictionRelatedMessages.proto";
import "google/protobuf/timestamp.proto";

message StartDashboardRequest{
   /*
    Unique user id generated by the controller on the create new user request from the frontend. Linked to a AspNetUser saved within the MS Sql database of the frontend
    example: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
  */
  string userId = 1;

  /*
    Unique model ids generated when inserting a new model document into MongoDB
    example: '63525870394eff35ee175bc2'
  */
  string modelId = 2;
}

message StartDashboardResponse {
  string url = 1;
  string sessionId = 2;
}

message StopDashboardRequest{
   /*
    Unique user id generated by the controller on the create new user request from the frontend. Linked to a AspNetUser saved within the MS Sql database of the frontend
    example: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
  */
  string sessionId = 1;
}

message StopDashboardResponse {

}

message DeleteModelRequest {
  /*
    Unique user id generated by the controller on the create new user request from the frontend. Linked to a AspNetUser saved within the MS Sql database of the frontend
    example: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
  */
  string userId = 1;
  /*
    Unique model ids generated when inserting a new model document into MongoDB
    example: '63525870394eff35ee175bc2'
  */
  string modelId = 2;
}

message DeleteModelResponse {

}

message GetModelsRequest {
  /*
    Unique user id generated by the controller on the create new user request from the frontend. Linked to a AspNetUser saved within the MS Sql database of the frontend
    example: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
  */
  string userId = 1;
  /*
    Unique dataset id generated when inserting a new dataset document into MongoDB
    example: '63515c86b10d04d230dc1482'
  */
  string datasetId = 2;
}

message GetModelsResponse {
  /*
    List of model records from MongoDB (see Model for more detals)
    example: [Model, Model]
  */
  repeated Model models = 1;
}

message GetModelRequest {
  /*
    Unique user id generated by the controller on the create new user request from the frontend. Linked to a AspNetUser saved within the MS Sql database of the frontend
    example: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
  */
  string userId = 1;
  /*
    Unique model ids generated when inserting a new model document into MongoDB
    example: '63525870394eff35ee175bc2'
  */
  string modelId = 2;
}

message GetModelResponse {
  /*
    Model record from MongoDB (see Model for more detals)
    example: Model
  */
  Model model = 1;
}

message Model {
  /*
    Unique model ids generated when inserting a new model document into MongoDB
    example: '63525870394eff35ee175bc2'
  */
  string id = 1;
  /*
    Unique training id generated when inserting a new training document into MongoDB
    example: "63525870394eff35ee175bc2"
  */
  string trainingId = 2;
  /*
    List of prediction objects representing Prediction records in MongoDB made with this model (see Prediction for more detals)
    example: [Prediction, Prediction]
  */
  repeated Prediction predictions = 3;
  /*
    Current activity status of the AutoML adapter training this model (busy, completed, failed)
    example: "busy"
  */
  string status = 4;
  /*
    Ontology URI of the used AutoML Solution
    example: ":autokeras"
  */
  string autoMlSolution = 5;
  /*
    list of Ontology URI of the used ML model type
    example: ":artificial_neural_network"
  */
  repeated string mlModelType = 6;
  /*
   List of Ontology URI of the used ML library
    example: [":Keras_lib"]
  */
  repeated string mlLibrary = 7;
  /*
    Absolute system path where the final model pipeline zip is located
    example: app/app-data/....../result/keras_model.zip
  */
  string path = 8;
  /*
      Json string of the test scores computed by testing the model with the test dataset.
      example: {
          ":precision": 0.222,
          ":f_measure": 0.9.....
      }
  */
  string testScore = 9;
  /*
    Time in ms it takes on average to make on prediction with this model
    example: 23.9999
  */
  float predictionTime = 10;
  /*
    The Model runtime profile object (see ModelruntimeProfile for more details)
    example: ModelruntimeProfile
  */
  ModelruntimeProfile runtimeProfile = 11;
  /*
    List of status messages produced by the AutoML solution
    example: ["starting search..", "epoch 1...."]
  */
  repeated string statusMessages = 12;
  /*
    JSON string of the explanation AI module result with paths to the generated plots and explanations
    example: {
    "status": "finished",
    "detail": "5 plots created",
    "content": [
      {
        "title": "SHAP Explanation",
        "items": [
          {
            "type": "summary_plot",
            "title": "Summary plot",
            "description": "The summary plot aggregates the importance of all features towards all classes. The higher the x-axis value is for a feature the more significance this feature has for the model. The color split within the bars indicates for which class this feature is important. If the bar coloring is split evenly the values of this feature are equally important for all classes. If it is skewed towards one color the values of this feature are only important when deciding for the one corresponding class.",
            "path": "\\app-data\\training\\flaml\\.....\\result\\plots\\summary_bar.svg"
          },.....
        ]
      }
    ]
  }
  */
  string explanation = 13;
  /*
    Amount of kg of CO2-eq produced during the model training
    example: ["starting search..", "epoch 1...."]
  */
  double emission = 14;
  /*
    If this model is explainer dashboard compatible
    example: True
  */
  bool dashboardCompatible = 15;

  string dashboardStatus = 16;
}

message ModelruntimeProfile {
  /*
    The timestamp when the adapter search process started
    example: 1666283732325
  */
  google.protobuf.Timestamp startTime = 1;
  /*
    The timestamp when the adapter search process ended
    example: 1666283732325
  */
  google.protobuf.Timestamp endTime = 2;
}
