syntax = "proto3";
option csharp_namespace = "BlazorBoilerplate.Server";

import "google/protobuf/any.proto";
import "Enumerations.proto";

message GetAutoMlSolutionsForConfigurationRequest {
  /*
    Dictonary holding the current user configuration of the training wizard
    example:
    {
      "task": ":tabular_classification",
      "library": [":keras_lib", ":tensorflow_lib"],
    }
  */
    map<string, string> configuration = 1;
  }

message GetAutoMlSolutionsForConfigurationResponse {
  /*
    List of AutoML solution IRIs from the ontology compatible with the current wizard configuration
    example: [":autokeras", ":mljar"]
  */
    repeated string AutoMlSolutions = 1;
  }

message GetTasksForDatasetTypeRequest {
  /*
    The dataset type IRI from the dataset selected for the training wizard
    example: ":tabular"
  */
    string datasetType = 1;
  }

message GetTasksForDatasetTypeResponse {
  /*
    List of ML task IRIs from the ontology compatible with the request dataset type
    example: [":tabular_classification", ":tabular_regression"]
  */
    repeated string tasks = 1;
  }

message GetMlLibrariesForTaskRequest {
  /*
    The task IRI selected by the user in the training wizard
    example: ":tabular_classification"
  */
    string task = 1;
  }

message GetMlLibrariesForTaskResponse {
    /*
      List of ML library IRIs from the ontology supporting the requested ML task
      example: [":keras_lib", ":tensorflow_lib"]
    */
    repeated string MlLibraries = 1;
  }

message GetAvailableStrategiesRequest {
  /*
    Unique user id generated by the controller on the create new user request from the frontend. Linked to a AspNetUser saved within the MS Sql database of the frontend
    example: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
  */
  string userId = 1;
  /*
    Unique dataset id generated when inserting a new dataset document into MongoDB
    example: '63515c86b10d04d230dc1482'
  */
  string datasetId = 2;
  /*
    Dictonary holding the current user configuration of the training wizard
    example:
    {
      "task": ":tabular_classification",
      "library": [":keras_lib", ":tensorflow_lib"],
    }
  */
  map<string, string> configuration = 3;
  }

message GetAvailableStrategiesResponse {
  /*
    List of Strategy objects (see Strategy for more detals)
    example: [Strategy, Strategy]
  */
    repeated Strategy Strategies = 1;
  }

message Strategy {
  /*
    Unique strategy id to identify a blackboard strategy
    example: 'data_preparation.ignore_redundant_features'
  */
    string id = 1;
    /*
      The strategy title
      example: 'Ignore redundant features'
    */
    string title = 2;
    /*
      The strategy description
      example: 'This strategy ignores certain dataset columns if they have been flagged as duplicate in the dataset analysis.'
    */
    string description = 3;
  }


message GetObjectsInformationRequest {
  /*
    List of ontology IRI to retrieve the complete information from.
    example: [":tabular_classification",”:autokeras”]
  */
  repeated string Ids = 1;
}

message GetObjectsInformationResponse {
  /*
    List of object informations (see ObjectInformation for more detals)
    example: [ObjectInformation, ObjectInformation]
  */
  repeated ObjectInformation objectInformations = 1;
}

message ObjectInformation {
  /*
    RDF subject IRI
    example: “:tabular_classification"
  */
  string id = 1;

  /*
    dictionary of RDF pairs for predicates and objects
    example:
    {
      "skos:prefLabel": "tabular classification",
      "skos:broader": ":classification",
      ":belongs_to": ":supervised_learning",
      ":has_dataset_type": ":tabular"
    }
  */
  map<string, string> informations = 2;
}


message GetDatasetTypesRequest {
}

message GetDatasetTypesResponse {
  /*
    List of supported dataset type IRIs by OMA-ML
    example: [":tabular", ":image"]
  */
  repeated string datasetTypes = 1;
}

message GetAutoMlParametersRequest {
  /*Iri of the auto ml task. Example: :tabular_classification*/
  string taskIri = 1;
  /*List of auto ml iris. Example: [":autokeras", ":mljar"]*/
  repeated string autoMls = 2;
}

message GetAutoMlParametersResponse {
  /*
    List of available auto ml parameters
  */
  repeated AutoMlParameter autoMlParameters = 1;
}

/*
  Parameter for an auto ml solution
  example:
  {
    autoMlIri: ":autokeras",
    paramIri: ":metric_autokeras_regression",
    paramLabel: "metric autokeras regression",
    paramType: ":list",
    broaderIri: ":metric",
    broaderLabel: "metric",
    valueIri: ":median_absolute_error",
    valueLabel: "median absolute error",
    seeAlso_para: "url",
    comment_para: "comment",
    seeAlso_value: "url",
    comment_value: "comment",

  }
*/
message AutoMlParameter {
  string autoMlIri =1;
  string paramIri = 2;
  string paramLabel = 3;
  string paramType = 4;
  string broaderIri = 5;
  string broaderLabel = 6;
  optional string valueIri = 7;
  optional string valueLabel = 8;
  optional string seeAlso_para = 9;
  optional string comment_para = 10;
  optional string seeAlso_value = 11;
  optional string comment_value = 12;
}
