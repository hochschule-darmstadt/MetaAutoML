syntax = "proto3";
option csharp_namespace = "BlazorBoilerplate.Server";

import "google/protobuf/timestamp.proto";

import "Enumerations.proto";

import "DatasetRelatedMessages.proto";
import "ModelRelatedMessages.proto";
import "SessionRelatedMessages.proto";
import "TestingRelatedMessages.proto";
import "UserRelatedMessages.proto";
import "WizzardMessages.proto";
import "Common.proto";

/*includes all gRPC functions available for the client frontend*/
service ControllerService {
  /*return the OMA-ML user name for a newly created frontend user, the result ID needs to be linked to the new user in the frontend user storage*/
  rpc CreateNewUser(CreateNewUserRequest) returns (CreateNewUserResponse) {}

  /*return the generated model as a .zip for one AutoML by its session id*/
  rpc GetAutoMlModel(GetAutoMlModelRequest) returns (GetAutoMlModelResponse) {}
  /*return a list of AutoML solutions compatible with the current configuration*/
  rpc GetCompatibleAutoMlSolutions(GetCompatibleAutoMlSolutionsRequest) returns (GetCompatibleAutoMlSolutionsResponse) {}
  /*return all dataset types*/
  rpc GetDatasetTypes(GetDatasetTypesRequest) returns (GetDatasetTypesResponse) {}

  /*return selected dataset type*/
  rpc GetDatasetType(GetDatasetTypeRequest) returns (GetDatasetTypeResponse) {}  
  /*return all datasets of a specific type*/
  rpc GetDatasets(GetDatasetsRequest) returns (GetDatasetsResponse) {}
  /*
    returns details of a specified dataset.

    The result is a list of TableColumns containing:
    name: the name of the dataset
    datatype: the datatype of the column
    firstEntries: the first couple of rows of the dataset
   */
  rpc GetDataset(GetDatasetRequest) returns (GetDatasetResponse) {}
  /*return a list of all sessions the controller has knowledge of*/
  rpc GetSessions(GetSessionsRequest) returns (GetSessionsResponse) {}
  /*return the status of a specific session. The result is a session status and a list of the automl output and its status*/
  rpc GetSessionStatus(GetSessionStatusRequest) returns (GetSessionStatusResponse) {}
  /*return all supported machine learning libraries for a specific task (by searching supported AutoML)*/
  rpc GetSupportedMlLibraries(GetSupportedMlLibrariesRequest) returns (GetSupportedMlLibrariesResponse) {}
  /*return all the column names of a tabular dataset*/
  rpc GetTabularDatasetColumnNames(GetTabularDatasetColumnNamesRequest) returns (GetTabularDatasetColumnNamesResponse) {}
  /*return all supported AutoML tasks*/
  rpc GetDatasetCompatibleTasks(GetDatasetCompatibleTasksRequest) returns (GetDatasetCompatibleTasksResponse) {}
  /*upload a new dataset file as bytes to the controller repository*/
  rpc UploadDatasetFile(UploadDatasetFileRequest) returns (UploadDatasetFileResponse) {}
  /*start a new AutoML run, using the provided configuration*/
  rpc StartAutoMlProcess(StartAutoMlProcessRequest) returns (StartAutoMlProcessResponse) {}
  /*test an existing AutoML*/
  rpc TestAutoML(TestAutoMlRequest) returns (TestAutoMlResponse) {}
}













