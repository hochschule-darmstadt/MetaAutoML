syntax = "proto3";

/*
AutoML Adapter Service implementation. Service provide functionality to interact with an AutoML adapter.
*/
service AdapterService {

    /* Request for the adapter to start a new training session */
    rpc StartAutoMl(StartAutoMlRequest) returns (StartAutoMlResponse) {}

    /* Retrieve an available status messages about a specific training session */
    rpc GetAutoMlStatus(GetAutoMlStatusRequest) returns (GetAutoMlStatusResponse) {}

    /* Request the adapter to perform a probability prediction on a previously ended training session, using the waiting AdapterManager from the training session */
    rpc ExplainModel(ExplainModelRequest) returns (ExplainModelResponse) {}

    /* Request the adapter to perform a model prediction using a new uploaded live dataset */
    rpc PredictModel(PredictModelRequest) returns (PredictModelResponse) {}
}


message StartAutoMlRequest {
    /*
        Unique training id generated when inserting a new training document into MongoDB
        example: "63525870394eff35ee175bc2"
    */
    string trainingId = 1;
    /*
        Unique dataset id generated when inserting a new dataset document into MongoDB
        example: '63515c86b10d04d230dc1482'
    */
    string datasetId = 2;
    /*
        Unique user id generated by the controller on the create new user request from the frontend. Linked to a AspNetUser saved within the MS Sql database of the frontend
        example: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    */
    string userId = 3;
    /*
        Absolute system path where the dataset is saved (single file dataset use the file name as ending of the path while multi file dataset will only have is root folder of the dataset)
        example: "app/app-data/datasets/....../titanic_train.csv"
    */
    string DatasetPath = 4;
    /*
        StartAutoMlConfiguration object, the specific configuration for the training session (see StartAutoMlConfiguration for more detals)
        example: StartAutoMlConfiguration
    */
    StartAutoMlConfiguration configuration = 5;
    /*
      The current dataset configuration used to open the dataset and column schema for tabular datasets as a JSON string
      example: '{
		"file_configuration": {
			"use_header": true,
			"start_row": 1,
			"delimiter": "semicolon",
			"escape_character": "\\",
			"decimal_character": ".",
			"encoding": "ascii",
			"thousands_seperator": "",
			"datetime_format": "%d/%m/%Y %H.%M.%S"
		},
		"schema": {
			"DateTime": {
				"datatype_detected": ":string",
				"datatypes_compatible": [":string", ":categorical", ":datetime"],
				"roles_compatible": [":target", ":ignore", ":index"],
				"datatype_selected": ":datetime",
				"role_selected": ":index"
			}
    }'
    */
    string datasetConfiguration = 6;
}

message StartAutoMlConfiguration {
    /*
      The selected ML task set during the wizard configuration
      example: ":tabular_classification"
    */
    string task = 1;
    /*
      The maximum amount of time in minute the training can run before cancelation set during the wizard configuration
      example: 5
    */
    int32 runtimeLimit = 2;
    /*
      The ML metric selected during the wizard configuration
      example: ":accuracy"
    */
    string metric = 3;
  /*
    Map of additional parameters
    examples:
    {
      ":use_approach": { "values": [":adaboost", ":decision_tree"]},
      ":metric": { "values": [":accuracy"]},
      ":some_int": { "values": ["17"]}
    }
  */
  map<string, DynamicParameterValue> parameters = 4;
}

message StartAutoMlResponse {
    /*
        Unique session id used to identify a running training session within the adapter, generated by the adapter before starting the AutoML solution search process
        example: "4a8af126-ac3d-4e3d-89fe-b70f7bfe0c3b"
    */
    string sessionId = 1;
}

message GetAutoMlStatusRequest {
    /*
        Unique session id used to identify a running training session within the adapter, generated by the adapter before starting the AutoML solution search process
        example: "4a8af126-ac3d-4e3d-89fe-b70f7bfe0c3b"
    */
    string sessionId = 1;
}

message GetAutoMlStatusResponse {
    /*
        The return code describes what type of status message was received
        example: ADAPTER_RETURN_CODE_SUCCESS
    */
	AdapterReturnCode returnCode = 1;
    /*
        The status message the AutoML solution wrote on the console
        example: "Starting trial #1"
    */
	string statusUpdate = 2;
    /*
        The absolute path to the model zip containing the model and executable python scipts
        example: "app/app-data/trainings/USER_ID/DATASET_ID/TRAINING_ID/export/autokeras.zip"
    */
	string path = 3;
    /*
        The test score computed by testing the model with the test dataset
        example: 0.89
    */
	float testScore = 4;
    /*
        The prediction time in milliseconds is the average time the model takes to make one prediction
        example: 12
    */
    float predictionTime = 5;
    /*
        The ML library used by the found model
        example: ":keras_lib"
    */
    string mlLibrary = 6;
    /*
        The ML model type that the found model is composed off
        example: ":artificial_neural_network"
    */
    string mlModelType = 7;
    /*
      The emission produced by the training of the model
      example: see message Carbon Emission
    */
    CarbonEmission emissionProfile = 8;
}

message CarbonEmission{
    /*
        The emissions produced by the training of this model as kg of CO2-eq
        example: 0.23232
    */
    double emissions = 1;
    /*
        The emissions rate measured in kg of CO2 emitted per MWh
        example: 0.23232
    */
    double emissionsRate = 2;
    /*
        Total of consumed energy by all hardware components
        example: 0.23232
    */
    double energyConsumed = 3;
    /*
        Duration during which emessions are tracked (in our case purely the training)
        example: 0.23232
    */
    double duration = 4;
    /*
        Count of CPUs used by the process
        example: 16
    */
    int32 cpuCount = 5;
    /*
        Total consumed energy by the CPUs
        example: 0.23232
    */
    double cpuEnergy = 6;
    /*
        CPU model name
        example: "AMD Ryzen 7 ......""
    */
    string cpuModel = 7;
    /*
        Power consumed by the CPUs
        example: 27.0
    */
    double cpuPower = 8;
    /*
        Count of GPUs used by the process
        example: 1
    */
    int32 gpuCount = 9;
    /*
        Total consumed energy by the GPUs
        example: 0.23232
    */
    double gpuEnergy = 10;
    /*
        GPU model name
        example: "1 x NVIDIA Geforce RTX 3070 .....""
    */
    string gpuModel = 11;
    /*
        Power consumed by the GPUs
        example: 27.0
    */
    double gpuPower = 12;
    /*
        Total consumed energy by the RAM
        example: 0.23232
    */
    double ramEnergy = 13;
    /*
        Power consumed by the RAM
        example: 27.0
    */
    double ramPower = 14;
    /*
        Total RAM size in GB
        example: 15.34
    */
    double ramTotalSize = 15;


}

message ExplainModelRequest {
    /*
        The JSON string of data used to perform predictions with the found model
        example:
        {
            "Cabin": "P3",
            "Sex": "male",....
        }
    */
    string data = 1;
    /*
        The process JSON describing the configuration the model will use
        example:
        {
            "training_id": "63525870394eff35ee175bc2",
            "dataset_id": "635255a4394eff35ee175bb4",
            "user_id": "b84eadcc-765c-43ea-8b7b-c0f8d2fbc6ed",
            "dataset_path": "app-data\\datasets\\b84eadcc-765c-43ea-8b7b-c0f8d2fbc6ed\\635255a4394eff35ee175bb4\\Train.csv",
            "configuration": {"task": ":tabular_regression", "target": "TARGET(PRICE_IN_LACS)", "runtime_limit": 3, "metric": ":accuracy"},
            "dataset_configuration": "SEE Training schema in WIKI for more information https://github.com/hochschule-darmstadt/MetaAutoML/wiki/2.-System-Architecture#training-record"
        }
    */
    string processJson = 2;
    /*
        Unique session id used to identify a running training session within the adapter, generated by the adapter before starting the AutoML solution search process
        example: "4a8af126-ac3d-4e3d-89fe-b70f7bfe0c3b"
    */
    string sessionId = 3;
}

message ExplainModelResponse {
    /*
        Json string The probabilies found, using the specific model
        example:
        {
            "probabilities": [23,32,13,...]
        }
    */
    string probabilities = 1;
}

message PredictModelRequest {
    /*
        The process JSON describing the configuration the model will use
        example:
        {
            "training_id": "63525870394eff35ee175bc2",
            "dataset_id": "635255a4394eff35ee175bb4",
            "user_id": "b84eadcc-765c-43ea-8b7b-c0f8d2fbc6ed",
            "dataset_path": "app-data\\datasets\\b84eadcc-765c-43ea-8b7b-c0f8d2fbc6ed\\635255a4394eff35ee175bb4\\Train.csv",
            "configuration": {"task": ":tabular_regression", "target": "TARGET(PRICE_IN_LACS)", "runtime_limit": 3, "metric": ":accuracy"},
            "dataset_configuration": "SEE Training schema in WIKI for more information https://github.com/hochschule-darmstadt/MetaAutoML/wiki/2.-System-Architecture#training-record"
        }
    */
    string processJson = 1;
}

message PredictModelResponse {
    /*
        The absolute path where the prediction results are persisted
        example: "app/app-data/datasets/..../predictions/..../autokeras_xxxx.csv"
    */
    string resultPath = 1;
}

enum AdapterReturnCode {
    /*
        Return code for unknown behavior, used whenever any unforseen behavior is recognized
    */
	ADAPTER_RETURN_CODE_UNKNOWN = 0;
    /*
        Return code used when the AutoML search process concludes to inform the controller this will be the final message
    */
	ADAPTER_RETURN_CODE_SUCCESS = 1;
    /*
        Return code used for messages during the AutoML search process is running but no status messages are available, informs the controller that more messages are coming
    */
	ADAPTER_RETURN_CODE_PENDING = 2;
    /*
        Return code used for messages during the AutoML search process is running, informs the controller that more messages are coming
    */
	ADAPTER_RETURN_CODE_STATUS_UPDATE = 3;
    /*
        Return code for error behaviors
    */
	ADAPTER_RETURN_CODE_ERROR = 100;
}

/*
  Value type for dynamic training parameters for the auto ml solutions.
  This type is needed, because map<> does not supported "repeated" in the value.
*/
message DynamicParameterValue {
  /*
    List of values for a parameter
    examples:
    - int: ["17"]
    - single_value: [":accuracy"]
    - list: [":adaboost", ":decision_tree"]
  */
  repeated string values = 1;
}
