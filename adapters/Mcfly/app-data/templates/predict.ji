import os
import sys
import json
import dill
import pandas as pd
import numpy as np
from sktime.datatypes import convert_to
from sktime.datasets import load_from_tsfile
from sklearn.model_selection import train_test_split
from tensorflow import keras

from enum import Enum, unique


class SplitMethod(Enum):
    SPLIT_METHOD_RANDOM = 0
    SPLIT_METHOD_END = 1


def split_data(X, y, json_configuration):
    """
    Split the given dataset into train and test subsets
    """
    if int(SplitMethod.SPLIT_METHOD_RANDOM.value) == json_configuration["test_configuration"]["method"]:
        return train_test_split(X,
                                y,
                                train_size=json_configuration["test_configuration"]["split_ratio"],
                                shuffle=True,
                                random_state=json_configuration["test_configuration"]["random_state"])
    elif int(json_configuration["test_configuration"]["split_ratio"]) == 0:
        return None, X, None, y
    else:
        return train_test_split(X,
                                y,
                                train_size=json_configuration["test_configuration"]["split_ratio"],
                                shuffle=False)


def convert_panel_to_numpy3D(X):
    """
    Convert the panel dataset to numpy3D
    """
    X_np = convert_to(X, to_type="numpy3D")
    # Change the shape of data to (samples, timesteps, features)
    X_np = np.swapaxes(X_np, 1, 2)
    return X_np


if __name__ == '__main__':
    filepath = sys.argv[1]
    config_path = sys.argv[2]
    sys_path_0 = sys.path[0]

    with open(config_path) as file:
        config_json = json.load(file)

    X, y = load_from_tsfile(filepath)

    # split training set
    X_train, X_test, y_train, y_test = split_data(X, y, config_json)

    print("Loading the label binarizer")
    with open(os.path.join(sys_path_0, 'label_binarizer_mcfly.p'), 'rb') as file:
        label_binarizer = dill.load(file)

    # Convert panel data to numpy3D
    X_test = convert_panel_to_numpy3D(X_test)
    y_test_binary = label_binarizer.transform(y_test)

    # Load the saved model
    model_path = os.path.join(sys_path_0, 'model_mcfly.p')
    print('model_path', model_path)

    print('Loading mcfly model')
    loaded_model = keras.models.load_model(model_path)

    # Predict values
    print('predicting ...')
    predicted_y = loaded_model.predict(X_test)
    predicted_y = label_binarizer.inverse_transform(predicted_y)
    print('predicted_y_inversed:', predicted_y)
    print('y_true:', y_test)

    # Save the predictions
    print('saving predictions ...')
    df_predictions = pd.DataFrame(data=predicted_y, columns=["predicted"])
    df_predictions.to_csv(sys_path_0 + "/predictions.csv", index=False)
    print('Saved predictions.csv')