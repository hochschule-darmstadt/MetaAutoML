import sys
import dill
import json
import pandas as pd
import numpy as np
import os
from AdapterTabularUtils import *

{% if configuration.configuration["task"] in [":tabular_classification", ":tabular_regression"] %}
from preprocessing import dataset_preparation
from postprocessing import post_process_result_dataframe
{% endif %}

if __name__ == '__main__':
    filepath = sys.argv[1]
    save_path = sys.argv[2]
    X = None


    with open(sys.path[0] + '/model_LAMA.p', 'rb') as file:
        loaded_model = dill.load(file)

    #Load live dataset
    X, y = dataset_preparation(filepath)
    X_index_df = pd.DataFrame(X.index)        #Some AutoML manipulate the index, so we extract it before hands
    predicted_y = loaded_model.predict(X)
    {% if configuration.configuration["task"] in [":tabular_classification"] %}
    if loaded_model.task.name == "multiclass":
        ind =  np.argmax(predicted_y.data, axis=1)
        inverse_class_mapping = {y: x for x,y in loaded_model.reader.class_mapping.items()}
        labels = [inverse_class_mapping[i] for i in range(len(inverse_class_mapping))]
        ind = list(map(inverse_class_mapping.get, ind))
        predicted_y = np.reshape(ind, (-1, 1))
    else:
        predicted_y = (np.array(predicted_y.data) >= 0.5).astype(int)
        predicted_y = np.concatenate(predicted_y)
    {% endif %}
    {% if configuration.configuration["task"] in [":tabular_regression"] %}
    predicted_y = np.reshape(predicted_y.data, (-1, 1))
    {% endif %}
    predict_df = pd.DataFrame(data=predicted_y, columns=["predicted"])
    post_process_result_dataframe(X_index_df, predict_df).to_csv(save_path)


