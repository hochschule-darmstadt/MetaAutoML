import os.path

import sys
import pickle
import json
from autogluon.tabular import TabularDataset, TabularPredictor
{% if configuration.configuration["task"] in [":tabular_classification", ":tabular_regression", ":text_classification", ":text_regression", ":time_series_forecasting"] %}
from dataset import read_csv_dataset
from preprocessing import rename_unnamed_columns, feature_preparation
{% endif %}

import pandas as pd
import numpy as np
import re

if __name__ == '__main__':
    filepath = sys.argv[1]
    save_path = sys.argv[2]
    X = None

    {% if configuration.configuration["task"] in [":tabular_classification", ":tabular_regression", ":text_classification", ":text_regression", ":time_series_forecasting"] %}
    X = read_csv_dataset(filepath)
    X = rename_unnamed_columns(X)
    X, y = feature_preparation(X, {{configuration.dataset_configuration["schema"]}}.items(), "{{configuration.dataset_configuration["file_configuration"]["datetime_format"]}}",  is_prediction=True)
    {% endif %}

    automl = TabularPredictor.load(os.path.join(sys.path[0], 'model_gluon.gluon'))

    predicted_y = automl.predict(X, as_pandas=False)
    predicted_y = np.reshape(predicted_y, (-1, 1))
    pd.DataFrame(data=predicted_y, columns=["predicted"]).to_csv(save_path)
