import sys
import dill
import json
from predict_time_sources import feature_preparation, DataType, SplitMethod

import pandas as pd
import numpy as np
import evalml
from evalml import AutoMLSearch


if __name__ == '__main__':
    filepath = sys.argv[1]
    config_path = sys.argv[2]
    save_path = sys.argv[3]
    X = None

    with open(config_path) as file:
        config_json = json.load(file)

    config_json["dataset_configuration"] = json.loads(config_json["dataset_configuration"])
    target = config_json["configuration"]["target"]
    features = config_json["dataset_configuration"]["column_datatypes"]
    features.pop(target, None)
    features = features.items()
    delimiters = {
            "comma":        ",",
            "semicolon":    ";",
            "space":        " ",
            "tab":          "\t",
        }

    X = pd.read_csv(filepath, delimiter=delimiters[config_json["dataset_configuration"]['file_configuration']['delimiter']], escapechar=config_json["dataset_configuration"]['file_configuration']['escape_character'], decimal=config_json["dataset_configuration"]['file_configuration']['decimal_character']).drop(target, axis=1, errors='ignore')
    X[X.select_dtypes(['object']).columns] = X.select_dtypes(['object']).apply(lambda x: x.astype('category'))
    # split training set
    X = X.iloc[:]

    X = feature_preparation(X, features)

    with open(sys.path[0] + '/evalml.p', 'rb') as file:
        loaded_model = dill.load(file)
        
    print(type(X))
    predicted_y = loaded_model.predict((X))


    df = (predicted_y.to_frame())
    df.columns = [ 'predicted']
    df.to_csv(save_path)
