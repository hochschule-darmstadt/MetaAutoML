import sys
import dill
import json
import pandas as pd
import numpy as np
import evalml
from evalml import AutoMLSearch
{% if configuration.configuration["task"] in [":tabular_classification", ":tabular_regression", ":text_classification", ":text_regression", ":time_series_forecasting"] %}
from dataset import read_csv_dataset
from preprocessing import rename_unnamed_columns, feature_preparation
{% endif %}


if __name__ == '__main__':
    filepath = sys.argv[1]
    save_path = sys.argv[2]
    X = None

    with open(config_path) as file:
        config_json = json.load(file)

    config_json["dataset_configuration"] = json.loads(config_json["dataset_configuration"])

    delimiters = {
            "comma":        ",",
            "semicolon":    ";",
            "space":        " ",
            "tab":          "\t",
        }
    
    #dirty quick fix for time_series_forecasting
    if (config_json['configuration']['task'] == ":time_series_forecasting"):
        filepath = config_json['dataset_path'][:-4] + "timeseries\\test.csv"
    configuration = {
        "filepath_or_buffer": filepath,
        "delimiter": delimiters[config_json['dataset_configuration']['file_configuration']['delimiter']],
        "skiprows": (config_json['dataset_configuration']['file_configuration']['start_row']-1),
        "decimal": config_json['dataset_configuration']['file_configuration']['decimal_character'],
        "escapechar": config_json['dataset_configuration']['file_configuration']['escape_character'],
        "encoding": config_json['dataset_configuration']['file_configuration']['encoding'],
    }
    if config_json['dataset_configuration']['file_configuration']['thousands_seperator'] != "":
        configuration["thousands"] = config_json['dataset_configuration']['file_configuration']['thousands_seperator']

    X = pd.read_csv(**configuration)
    print(X)
    #Rename untitled columns to correct name
    for column in X:
        if re.match(r"Unnamed: [0-9]+", column):
            X.rename(columns={column: f"Column{X.columns.get_loc(column)}"}, inplace=True)

    # split training set
    # X = X.iloc[:]



    with open(sys.path[0] + '/evalml.p', 'rb') as file:
        loaded_model = dill.load(file)

    print(type(X))
    if (config_json['configuration']['task'] == ":time_series_forecasting"):
        X, y = feature_preparation(X, config_json["dataset_configuration"]["schema"].items(), config_json["dataset_configuration"]["file_configuration"]["datetime_format"])
        # currently its just dummy value
        # TODO: change parameters
        predicted_y = loaded_model.predict_in_sample(X, y,X_train=X,y_train=y)

        df = (predicted_y.to_frame())
        df.columns = [ 'predicted']
        df.to_csv(save_path)
    else:
        X, y = feature_preparation(X, config_json["dataset_configuration"]["schema"].items(), config_json["dataset_configuration"]["file_configuration"]["datetime_format"], is_prediction=True)

        predicted_y = loaded_model.predict((X))

        df = (predicted_y.to_frame())
        df.columns = [ 'predicted']
        df.to_csv(save_path)
