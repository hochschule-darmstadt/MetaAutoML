import sys
import dill
import json
from predict_time_sources import feature_preparation, SplitMethod

import pandas as pd
import numpy as np
import evalml
from evalml import AutoMLSearch


if __name__ == '__main__':
    filepath = sys.argv[1]
    config_path = sys.argv[2]
    save_path = sys.argv[3]
    X = None

    with open(config_path) as file:
        config_json = json.load(file)

    config_json["dataset_configuration"] = json.loads(config_json["dataset_configuration"])
    targets = []
    for key in config_json["dataset_configuration"]["schema"]:
        #Get target columns list
        if config_json["dataset_configuration"]["schema"][key].get("role_selected", "") == ":target":
            targets.append(key)
    target = targets[0]

    delimiters = {
            "comma":        ",",
            "semicolon":    ";",
            "space":        " ",
            "tab":          "\t",
        }
    configuration = {
        "filepath_or_buffer": filepath,
        "delimiter": delimiters[config_json['dataset_configuration']['file_configuration']['delimiter']],
        "skiprows": (config_json['dataset_configuration']['file_configuration']['start_row']-1),
        "decimal": config_json['dataset_configuration']['file_configuration']['decimal_character'],
        "escapechar": config_json['dataset_configuration']['file_configuration']['escape_character'],
        "encoding": config_json['dataset_configuration']['file_configuration']['encoding'],
    }
    if config_json['dataset_configuration']['file_configuration']['thousands_seperator'] != "":
        configuration["thousands"] = config_json['dataset_configuration']['file_configuration']['thousands_seperator']

    X = pd.read_csv(**configuration)

    # split training set
    X = X.iloc[:]

    X, y = feature_preparation(X, config_json["dataset_configuration"]["schema"].items(), config_json["dataset_configuration"]["file_configuration"]["datetime_format"], is_prediction=True)

    with open(sys.path[0] + '/evalml.p', 'rb') as file:
        loaded_model = dill.load(file)

    print(type(X))
    predicted_y = loaded_model.predict((X))

    df = (predicted_y.to_frame())
    df.columns = [ 'predicted']
    df.to_csv(save_path)
