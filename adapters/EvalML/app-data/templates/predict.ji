import sys
import dill
import json
import pandas as pd
import numpy as np
import evalml
import os
from evalml import AutoMLSearch
{% if configuration.configuration["task"] in [":tabular_classification", ":tabular_regression", ":text_classification", ":text_regression"] %}
from preprocessing import dataset_preparation
{% endif %}
{% if configuration.configuration["task"] in [":time_series_forecasting"] %}
from preprocessing import dataset_preparation, seperate_time_series_dataframe
{% endif %}

if __name__ == '__main__':
    filepath = sys.argv[1]
    save_path = sys.argv[2]
    X = None
    {% if configuration.configuration["task"] in [":time_series_forecasting"] %}
    #Load dataset used for training
    train_set_path = os.path.join(os.path.dirname(__file__), "train.csv")
    train_X, train_y = dataset_preparation(train_set_path, is_prediction=False)
    {% endif %}


    with open(sys.path[0] + '/evalml.p', 'rb') as file:
        loaded_model = dill.load(file)

    {% if configuration.configuration["task"] in [":tabular_classification", ":tabular_regression", ":text_classification", ":text_regression"] %}
    #Load live dataset
    X, y = dataset_preparation(filepath)
    predicted_y = loaded_model.predict(X)
    {% else %}
    #We need current observations
    X, y = dataset_preparation(filepath, is_prediction=False)
    X[y.name] = y.values
    previous_ts, X = seperate_time_series_dataframe(X)
    predicted_y = loaded_model.predict(X, X_train=train_X,y_train=train_y)
    {% endif %}

    df = (predicted_y.to_frame())
    df.columns = [ 'predicted']
    df.to_csv(save_path)


