# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: Common.proto, ControllerService.proto, DatasetRelatedMessages.proto, Enumerations.proto, ModelRelatedMessages.proto, SessionRelatedMessages.proto, TestingRelatedMessages.proto, UserRelatedMessages.proto, WizzardMessages.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class ResultCode(betterproto.Enum):
    RESULT_CODE_OKAY = 0
    RESULT_CODE_ERROR_CAN_NOT_CREATE_USER = 1


class DataType(betterproto.Enum):
    DATATYPE_UNKNOW = 0
    DATATYPE_STRING = 1
    DATATYPE_INT = 2
    DATATYPE_FLOAT = 3
    DATATYPE_CATEGORY = 4
    DATATYPE_BOOLEAN = 5
    DATATYPE_DATETIME = 6
    DATATYPE_IGNORE = 7


class DatasetType(betterproto.Enum):
    DATASET_TYPE_UNKNOWN = 0
    DATASET_TYPE_TABULAR_DATA = 1


class ControllerReturnCode(betterproto.Enum):
    CONTROLLER_RETURN_CODE_UNKNOWN = 0
    CONTROLLER_RETURN_CODE_SUCCESS = 1
    CONTROLLER_RETURN_CODE_STATUS_UPDATE = 2
    CONTROLLER_RETURN_CODE_ERROR = 100


class MachineLearningTask(betterproto.Enum):
    MACHINE_LEARNING_TASK_UNKNOWN = 0
    MACHINE_LEARNING_TASK_TABULAR_CLASSIFICATION = 1
    MACHINE_LEARNING_TASK_TABULAR_REGRESSION = 2


class SessionStatus(betterproto.Enum):
    SESSION_STATUS_UNKNOWN = 0
    SESSION_STATUS_BUSY = 1
    SESSION_STATUS_COMPLETED = 2
    SESSION_STATUS_FAILED = 3


class SplitMethod(betterproto.Enum):
    SPLIT_METHOD_RANDOM = 0
    SPLIT_METHOD_END = 1


@dataclass(eq=False, repr=False)
class TestConfiguration(betterproto.Message):
    split_ratio: float = betterproto.float_field(1)
    method: "SplitMethod" = betterproto.enum_field(2)
    random_state: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class AutoMlRuntimeConstraints(betterproto.Message):
    runtime_limit: int = betterproto.int32_field(1)
    max_iter: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class AutoMlConfigurationTabularData(betterproto.Message):
    target: "AutoMlTarget" = betterproto.message_field(1)
    features: Dict[str, "DataType"] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_ENUM
    )


@dataclass(eq=False, repr=False)
class AutoMlTarget(betterproto.Message):
    target: str = betterproto.string_field(1)
    type: "DataType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class GetDatasetTypesRequest(betterproto.Message):
    type_names: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetDatasetTypesResponse(betterproto.Message):
    dataset_types: List["DatasetType"] = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class GetDatasetTypeRequest(betterproto.Message):
    type_name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetDatasetTypeResponse(betterproto.Message):
    dataset_type: List["DatasetType"] = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class GetDatasetsRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    type: "DatasetType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class GetDatasetsResponse(betterproto.Message):
    dataset: List["Dataset"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Dataset(betterproto.Message):
    file_name: str = betterproto.string_field(1)
    type: str = betterproto.string_field(2)
    columns: int = betterproto.int32_field(3)
    rows: int = betterproto.int32_field(4)
    creation_date: datetime = betterproto.message_field(5)
    identifier: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class GetDatasetRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    identifier: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetDatasetResponse(betterproto.Message):
    columns: List["TableColumn"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TableColumn(betterproto.Message):
    name: str = betterproto.string_field(1)
    type: "DataType" = betterproto.enum_field(2)
    convertible_types: List["DataType"] = betterproto.enum_field(3)
    first_entries: List[str] = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class GetTabularDatasetColumnNamesRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    dataset_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetTabularDatasetColumnNamesResponse(betterproto.Message):
    column_names: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class UploadDatasetFileRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    content: bytes = betterproto.bytes_field(2)
    name: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class UploadDatasetFileResponse(betterproto.Message):
    return_code: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class GetAutoMlModelRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    session_id: str = betterproto.string_field(2)
    auto_ml: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetAutoMlModelResponse(betterproto.Message):
    name: str = betterproto.string_field(1)
    file: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class GetSessionsRequest(betterproto.Message):
    username: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetSessionsResponse(betterproto.Message):
    session_ids: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetSessionStatusRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetSessionStatusResponse(betterproto.Message):
    status: "SessionStatus" = betterproto.enum_field(1)
    automls: List["AutoMlStatus"] = betterproto.message_field(2)
    dataset: str = betterproto.string_field(3)
    task: "MachineLearningTask" = betterproto.enum_field(4)
    tabular_config: "AutoMlConfigurationTabularData" = betterproto.message_field(5)
    required_ml_libraries: List[str] = betterproto.string_field(6)
    required_auto_mls: List[str] = betterproto.string_field(7)
    runtime_constraints: "AutoMlRuntimeConstraints" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class AutoMlStatus(betterproto.Message):
    name: str = betterproto.string_field(1)
    status: "SessionStatus" = betterproto.enum_field(2)
    messages: List[str] = betterproto.string_field(3)
    test_score: float = betterproto.float_field(4)
    validation_score: float = betterproto.float_field(5)
    runtime: int = betterproto.int32_field(6)
    predictiontime: float = betterproto.float_field(7)
    library: str = betterproto.string_field(8)
    model: str = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class TestAutoMlRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    test_data: str = betterproto.string_field(2)
    session_id: str = betterproto.string_field(3)
    auto_ml_name: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class TestAutoMlResponse(betterproto.Message):
    predictions: List[str] = betterproto.string_field(1)
    score: float = betterproto.float_field(2)
    predictiontime: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class CreateNewUserRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CreateNewUserResponse(betterproto.Message):
    result: "ResultCode" = betterproto.enum_field(1)
    oma_ml_user_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetCompatibleAutoMlSolutionsRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    configuration: Dict[str, str] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class GetCompatibleAutoMlSolutionsResponse(betterproto.Message):
    auto_ml_solutions: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetDatasetCompatibleTasksRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    dataset_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetDatasetCompatibleTasksResponse(betterproto.Message):
    tasks: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetSupportedMlLibrariesRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    task: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetSupportedMlLibrariesResponse(betterproto.Message):
    ml_libraries: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class StartAutoMlProcessRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    dataset: str = betterproto.string_field(2)
    task: "MachineLearningTask" = betterproto.enum_field(3)
    tabular_config: "AutoMlConfigurationTabularData" = betterproto.message_field(4)
    required_auto_mls: List[str] = betterproto.string_field(5)
    runtime_constraints: "AutoMlRuntimeConstraints" = betterproto.message_field(6)
    file_configuration: Dict[str, str] = betterproto.map_field(
        7, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    test_config: "TestConfiguration" = betterproto.message_field(8)
    metric: str = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class StartAutoMlProcessResponse(betterproto.Message):
    result: "ControllerReturnCode" = betterproto.enum_field(1)
    session_id: str = betterproto.string_field(2)


class ControllerServiceStub(betterproto.ServiceStub):
    async def create_new_user(
        self,
        create_new_user_request: "CreateNewUserRequest",
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["_MetadataLike"] = None,
    ) -> "CreateNewUserResponse":
        return await self._unary_unary(
            "/ControllerService/CreateNewUser",
            create_new_user_request,
            CreateNewUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_auto_ml_model(
        self,
        get_auto_ml_model_request: "GetAutoMlModelRequest",
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["_MetadataLike"] = None,
    ) -> "GetAutoMlModelResponse":
        return await self._unary_unary(
            "/ControllerService/GetAutoMlModel",
            get_auto_ml_model_request,
            GetAutoMlModelResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_compatible_auto_ml_solutions(
        self,
        get_compatible_auto_ml_solutions_request: "GetCompatibleAutoMlSolutionsRequest",
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["_MetadataLike"] = None,
    ) -> "GetCompatibleAutoMlSolutionsResponse":
        return await self._unary_unary(
            "/ControllerService/GetCompatibleAutoMlSolutions",
            get_compatible_auto_ml_solutions_request,
            GetCompatibleAutoMlSolutionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_dataset_types(
        self,
        get_dataset_types_request: "GetDatasetTypesRequest",
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["_MetadataLike"] = None,
    ) -> "GetDatasetTypesResponse":
        return await self._unary_unary(
            "/ControllerService/GetDatasetTypes",
            get_dataset_types_request,
            GetDatasetTypesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_dataset_type(
        self,
        get_dataset_type_request: "GetDatasetTypeRequest",
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["_MetadataLike"] = None,
    ) -> "GetDatasetTypeResponse":
        return await self._unary_unary(
            "/ControllerService/GetDatasetType",
            get_dataset_type_request,
            GetDatasetTypeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_datasets(
        self,
        get_datasets_request: "GetDatasetsRequest",
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["_MetadataLike"] = None,
    ) -> "GetDatasetsResponse":
        return await self._unary_unary(
            "/ControllerService/GetDatasets",
            get_datasets_request,
            GetDatasetsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_dataset(
        self,
        get_dataset_request: "GetDatasetRequest",
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["_MetadataLike"] = None,
    ) -> "GetDatasetResponse":
        return await self._unary_unary(
            "/ControllerService/GetDataset",
            get_dataset_request,
            GetDatasetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_sessions(
        self,
        get_sessions_request: "GetSessionsRequest",
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["_MetadataLike"] = None,
    ) -> "GetSessionsResponse":
        return await self._unary_unary(
            "/ControllerService/GetSessions",
            get_sessions_request,
            GetSessionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_session_status(
        self,
        get_session_status_request: "GetSessionStatusRequest",
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["_MetadataLike"] = None,
    ) -> "GetSessionStatusResponse":
        return await self._unary_unary(
            "/ControllerService/GetSessionStatus",
            get_session_status_request,
            GetSessionStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_supported_ml_libraries(
        self,
        get_supported_ml_libraries_request: "GetSupportedMlLibrariesRequest",
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["_MetadataLike"] = None,
    ) -> "GetSupportedMlLibrariesResponse":
        return await self._unary_unary(
            "/ControllerService/GetSupportedMlLibraries",
            get_supported_ml_libraries_request,
            GetSupportedMlLibrariesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_tabular_dataset_column_names(
        self,
        get_tabular_dataset_column_names_request: "GetTabularDatasetColumnNamesRequest",
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["_MetadataLike"] = None,
    ) -> "GetTabularDatasetColumnNamesResponse":
        return await self._unary_unary(
            "/ControllerService/GetTabularDatasetColumnNames",
            get_tabular_dataset_column_names_request,
            GetTabularDatasetColumnNamesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_dataset_compatible_tasks(
        self,
        get_dataset_compatible_tasks_request: "GetDatasetCompatibleTasksRequest",
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["_MetadataLike"] = None,
    ) -> "GetDatasetCompatibleTasksResponse":
        return await self._unary_unary(
            "/ControllerService/GetDatasetCompatibleTasks",
            get_dataset_compatible_tasks_request,
            GetDatasetCompatibleTasksResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def upload_dataset_file(
        self,
        upload_dataset_file_request: "UploadDatasetFileRequest",
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["_MetadataLike"] = None,
    ) -> "UploadDatasetFileResponse":
        return await self._unary_unary(
            "/ControllerService/UploadDatasetFile",
            upload_dataset_file_request,
            UploadDatasetFileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def start_auto_ml_process(
        self,
        start_auto_ml_process_request: "StartAutoMlProcessRequest",
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["_MetadataLike"] = None,
    ) -> "StartAutoMlProcessResponse":
        return await self._unary_unary(
            "/ControllerService/StartAutoMlProcess",
            start_auto_ml_process_request,
            StartAutoMlProcessResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def test_auto_ml(
        self,
        test_auto_ml_request: "TestAutoMlRequest",
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["_MetadataLike"] = None,
    ) -> "TestAutoMlResponse":
        return await self._unary_unary(
            "/ControllerService/TestAutoML",
            test_auto_ml_request,
            TestAutoMlResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ControllerServiceBase(ServiceBase):
    async def create_new_user(
        self, create_new_user_request: "CreateNewUserRequest"
    ) -> "CreateNewUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_auto_ml_model(
        self, get_auto_ml_model_request: "GetAutoMlModelRequest"
    ) -> "GetAutoMlModelResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_compatible_auto_ml_solutions(
        self,
        get_compatible_auto_ml_solutions_request: "GetCompatibleAutoMlSolutionsRequest",
    ) -> "GetCompatibleAutoMlSolutionsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_dataset_types(
        self, get_dataset_types_request: "GetDatasetTypesRequest"
    ) -> "GetDatasetTypesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_dataset_type(
        self, get_dataset_type_request: "GetDatasetTypeRequest"
    ) -> "GetDatasetTypeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_datasets(
        self, get_datasets_request: "GetDatasetsRequest"
    ) -> "GetDatasetsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_dataset(
        self, get_dataset_request: "GetDatasetRequest"
    ) -> "GetDatasetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_sessions(
        self, get_sessions_request: "GetSessionsRequest"
    ) -> "GetSessionsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_session_status(
        self, get_session_status_request: "GetSessionStatusRequest"
    ) -> "GetSessionStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_supported_ml_libraries(
        self, get_supported_ml_libraries_request: "GetSupportedMlLibrariesRequest"
    ) -> "GetSupportedMlLibrariesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_tabular_dataset_column_names(
        self,
        get_tabular_dataset_column_names_request: "GetTabularDatasetColumnNamesRequest",
    ) -> "GetTabularDatasetColumnNamesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_dataset_compatible_tasks(
        self, get_dataset_compatible_tasks_request: "GetDatasetCompatibleTasksRequest"
    ) -> "GetDatasetCompatibleTasksResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def upload_dataset_file(
        self, upload_dataset_file_request: "UploadDatasetFileRequest"
    ) -> "UploadDatasetFileResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def start_auto_ml_process(
        self, start_auto_ml_process_request: "StartAutoMlProcessRequest"
    ) -> "StartAutoMlProcessResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def test_auto_ml(
        self, test_auto_ml_request: "TestAutoMlRequest"
    ) -> "TestAutoMlResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_new_user(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()
        response = await self.create_new_user(request)
        await stream.send_message(response)

    async def __rpc_get_auto_ml_model(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()
        response = await self.get_auto_ml_model(request)
        await stream.send_message(response)

    async def __rpc_get_compatible_auto_ml_solutions(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_compatible_auto_ml_solutions(request)
        await stream.send_message(response)

    async def __rpc_get_dataset_types(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()
        response = await self.get_dataset_types(request)
        await stream.send_message(response)

    async def __rpc_get_dataset_type(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()
        response = await self.get_dataset_type(request)
        await stream.send_message(response)

    async def __rpc_get_datasets(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()
        response = await self.get_datasets(request)
        await stream.send_message(response)

    async def __rpc_get_dataset(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()
        response = await self.get_dataset(request)
        await stream.send_message(response)

    async def __rpc_get_sessions(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()
        response = await self.get_sessions(request)
        await stream.send_message(response)

    async def __rpc_get_session_status(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()
        response = await self.get_session_status(request)
        await stream.send_message(response)

    async def __rpc_get_supported_ml_libraries(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_supported_ml_libraries(request)
        await stream.send_message(response)

    async def __rpc_get_tabular_dataset_column_names(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_tabular_dataset_column_names(request)
        await stream.send_message(response)

    async def __rpc_get_dataset_compatible_tasks(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_dataset_compatible_tasks(request)
        await stream.send_message(response)

    async def __rpc_upload_dataset_file(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()
        response = await self.upload_dataset_file(request)
        await stream.send_message(response)

    async def __rpc_start_auto_ml_process(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()
        response = await self.start_auto_ml_process(request)
        await stream.send_message(response)

    async def __rpc_test_auto_ml(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()
        response = await self.test_auto_ml(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/ControllerService/CreateNewUser": grpclib.const.Handler(
                self.__rpc_create_new_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateNewUserRequest,
                CreateNewUserResponse,
            ),
            "/ControllerService/GetAutoMlModel": grpclib.const.Handler(
                self.__rpc_get_auto_ml_model,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAutoMlModelRequest,
                GetAutoMlModelResponse,
            ),
            "/ControllerService/GetCompatibleAutoMlSolutions": grpclib.const.Handler(
                self.__rpc_get_compatible_auto_ml_solutions,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetCompatibleAutoMlSolutionsRequest,
                GetCompatibleAutoMlSolutionsResponse,
            ),
            "/ControllerService/GetDatasetTypes": grpclib.const.Handler(
                self.__rpc_get_dataset_types,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDatasetTypesRequest,
                GetDatasetTypesResponse,
            ),
            "/ControllerService/GetDatasetType": grpclib.const.Handler(
                self.__rpc_get_dataset_type,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDatasetTypeRequest,
                GetDatasetTypeResponse,
            ),
            "/ControllerService/GetDatasets": grpclib.const.Handler(
                self.__rpc_get_datasets,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDatasetsRequest,
                GetDatasetsResponse,
            ),
            "/ControllerService/GetDataset": grpclib.const.Handler(
                self.__rpc_get_dataset,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDatasetRequest,
                GetDatasetResponse,
            ),
            "/ControllerService/GetSessions": grpclib.const.Handler(
                self.__rpc_get_sessions,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetSessionsRequest,
                GetSessionsResponse,
            ),
            "/ControllerService/GetSessionStatus": grpclib.const.Handler(
                self.__rpc_get_session_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetSessionStatusRequest,
                GetSessionStatusResponse,
            ),
            "/ControllerService/GetSupportedMlLibraries": grpclib.const.Handler(
                self.__rpc_get_supported_ml_libraries,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetSupportedMlLibrariesRequest,
                GetSupportedMlLibrariesResponse,
            ),
            "/ControllerService/GetTabularDatasetColumnNames": grpclib.const.Handler(
                self.__rpc_get_tabular_dataset_column_names,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTabularDatasetColumnNamesRequest,
                GetTabularDatasetColumnNamesResponse,
            ),
            "/ControllerService/GetDatasetCompatibleTasks": grpclib.const.Handler(
                self.__rpc_get_dataset_compatible_tasks,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDatasetCompatibleTasksRequest,
                GetDatasetCompatibleTasksResponse,
            ),
            "/ControllerService/UploadDatasetFile": grpclib.const.Handler(
                self.__rpc_upload_dataset_file,
                grpclib.const.Cardinality.UNARY_UNARY,
                UploadDatasetFileRequest,
                UploadDatasetFileResponse,
            ),
            "/ControllerService/StartAutoMlProcess": grpclib.const.Handler(
                self.__rpc_start_auto_ml_process,
                grpclib.const.Cardinality.UNARY_UNARY,
                StartAutoMlProcessRequest,
                StartAutoMlProcessResponse,
            ),
            "/ControllerService/TestAutoML": grpclib.const.Handler(
                self.__rpc_test_auto_ml,
                grpclib.const.Cardinality.UNARY_UNARY,
                TestAutoMlRequest,
                TestAutoMlResponse,
            ),
        }
