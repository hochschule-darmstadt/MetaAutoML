# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: ControllerService.proto, DatasetRelatedMessages.proto, Enumerations.proto, ModelRelatedMessages.proto, OntologyRelatedMessages.proto, PredictionRelatedMessages.proto, TrainingRelatedMessages.proto, UserRelatedMessages.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class DataType(betterproto.Enum):
    """enum describing data types"""

    DATATYPE_UNKNOW = 0
    DATATYPE_STRING = 1
    DATATYPE_INT = 2
    DATATYPE_FLOAT = 3
    DATATYPE_CATEGORY = 4
    DATATYPE_BOOLEAN = 5
    DATATYPE_DATETIME = 6
    DATATYPE_IGNORE = 7


@dataclass(eq=False, repr=False)
class GetDatasetRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    """
    Unique user id generated by the controller on the create new user request
    from the frontend. Linked to a AspNetUser saved within the MS Sql database
    of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    """

    dataset_id: str = betterproto.string_field(2)
    """
    Unique dataset id generated when inserting a new dataset document into
    MongoDBexample: '63515c86b10d04d230dc1482'
    """


@dataclass(eq=False, repr=False)
class GetDatasetResponse(betterproto.Message):
    dataset: "Dataset" = betterproto.message_field(1)
    """
    Dataset record from MongoDB (see Dataset for more detals)example: Dataset
    """


@dataclass(eq=False, repr=False)
class GetDatasetsRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    """
    Unique user id generated by the controller on the create new user request
    from the frontend. Linked to a AspNetUser saved within the MS Sql database
    of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    """

    type: str = betterproto.string_field(2)
    """
    Filter to only return datasets of a specific dataset typeexample:
    ":tabular"
    """


@dataclass(eq=False, repr=False)
class GetDatasetsResponse(betterproto.Message):
    datasets: List["Dataset"] = betterproto.message_field(1)
    """
    List of dataset records from MongoDB (see Dataset for more detals)example:
    [Dataset, Dataset]
    """


@dataclass(eq=False, repr=False)
class DeleteDatasetRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    """
    Unique user id generated by the controller on the create new user request
    from the frontend. Linked to a AspNetUser saved within the MS Sql database
    of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    """

    dataset_id: str = betterproto.string_field(2)
    """
    Unique dataset id generated when inserting a new dataset document into
    MongoDBexample: '63515c86b10d04d230dc1482'
    """


@dataclass(eq=False, repr=False)
class DeleteDatasetResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Dataset(betterproto.Message):
    id: str = betterproto.string_field(1)
    """
    Unique dataset id generated when inserting a new dataset document into
    MongoDBexample: '63515c86b10d04d230dc1482'
    """

    name: str = betterproto.string_field(2)
    """
    Display name for a dataset, set by the user on dataset uploadexample:
    "Titanic"
    """

    type: str = betterproto.string_field(3)
    """
    Dataset type Ontology URI, selected by the user on dataset uploadexample:
    ":tabular"
    """

    path: str = betterproto.string_field(4)
    """
    Absolute system path where the dataset is saved (single file dataset use
    the file name as ending of the path while multi file dataset will only have
    is root folder of the dataset)example: "app/app-
    data/datasets/....../titanic_train.csv"
    """

    file_configuration: str = betterproto.string_field(5)
    """
    The current file configuration used to open the dataset as a JSON
    stringexample: '{"use_header": true,"start_row": 1,"delimiter":
    "comma","escape_character": "\\","decimal_character": "."}'
    """

    training_ids: List[str] = betterproto.string_field(6)
    """
    List of unique training id that use this dataset for training ML
    modelsexample: ["63515cb4b10d04d230dc1484", "635255f5394eff35ee175bb5"]
    """

    analysis: str = betterproto.string_field(7)
    """
    The result of the dataset analysis saved as JSON stringexample: See Dataset
    data schema inside wiki https://github.com/hochschule-
    darmstadt/MetaAutoML/wiki/2.-System-Architecture#dataset-record
    """

    schema: Dict[str, "ColumnSchema"] = betterproto.map_field(
        8, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    """
    Dictonary of the dataset schema{"PassengerId": {"datatype_detected":
    ":integer","datatypes_compatible":
    [":integer",":categorical"],"datatype_selected":
    ":string","roles_compatible":
    [":target",":ignore",":index"],"role_selected": ":index"},}
    """


@dataclass(eq=False, repr=False)
class CreateDatasetRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    """
    Unique user id generated by the controller on the create new user request
    from the frontend. Linked to a AspNetUser saved within the MS Sql database
    of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    """

    file_name: str = betterproto.string_field(2)
    """The uploaded file nameexample: "titanic_train.csv"""

    dataset_name: str = betterproto.string_field(3)
    """The user set dataset display nameexample: "Titanic"""

    dataset_type: str = betterproto.string_field(4)
    """The user set dataset type ontology URIexample: ":tabular"""

    encoding: str = betterproto.string_field(5)
    """The detected encodingexample: "windows-1052"""


@dataclass(eq=False, repr=False)
class CreateDatasetResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SetDatasetConfigurationRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    """
    Unique user id generated by the controller on the create new user request
    from the frontend. Linked to a AspNetUser saved within the MS Sql database
    of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    """

    dataset_id: str = betterproto.string_field(2)
    """
    Unique dataset id generated when inserting a new dataset document into
    MongoDBexample: '63515c86b10d04d230dc1482'
    """

    file_configuration: str = betterproto.string_field(3)
    """
    The new file configuration to use to read the dataset file as a JSON
    stringexample: '{"use_header": true,"start_row": 1,"delimiter":
    "comma","escape_character": "\\","decimal_character": ".","encoding":
    "utf-8"}'
    """


@dataclass(eq=False, repr=False)
class SetDatasetConfigurationResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SetDatasetColumnSchemaConfigurationRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    """
    Unique user id generated by the controller on the create new user request
    from the frontend. Linked to a AspNetUser saved within the MS Sql database
    of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    """

    dataset_id: str = betterproto.string_field(2)
    """
    Unique dataset id generated when inserting a new dataset document into
    MongoDBexample: '63515c86b10d04d230dc1482'
    """

    column: str = betterproto.string_field(3)
    """Column key which is to be updated"PassengerId"}"""

    datatype_selected: str = betterproto.string_field(4)
    """The dataset type IRI selected by the user":categorical"""

    role_selected: str = betterproto.string_field(5)
    """The selected role IRI by the user":index"""


@dataclass(eq=False, repr=False)
class SetDatasetColumnSchemaConfigurationResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ColumnSchema(betterproto.Message):
    datatype_detected: str = betterproto.string_field(1)
    """Dataset type IRI automatically detected":integer"""

    datatypes_compatible: List[str] = betterproto.string_field(2)
    """
    Compatible dataset types IRIs which can be casted towards[":integer",
    ":categorical"]
    """

    datatype_selected: str = betterproto.string_field(3)
    """The dataset type IRI selected by the user":categorical"""

    roles_compatible: List[str] = betterproto.string_field(4)
    """List of compatible roles IRIs[":index", ":ignore"]"""

    role_selected: str = betterproto.string_field(5)
    """The selected role IRI by the user":index"""


@dataclass(eq=False, repr=False)
class CreatePredictionRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    """
    Unique user id generated by the controller on the create new user request
    from the frontend. Linked to a AspNetUser saved within the MS Sql database
    of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    """

    model_id: str = betterproto.string_field(2)
    """
    Unique model ids generated when inserting a new model document into
    MongoDBexample: '63525870394eff35ee175bc2'
    """

    live_dataset_file_name: str = betterproto.string_field(3)
    """
    The file name of the uploaded live dataset located inside the upload
    folderexample: "titanic_test.csv"
    """


@dataclass(eq=False, repr=False)
class CreatePredictionResponse(betterproto.Message):
    prediction_id: str = betterproto.string_field(1)
    """
    Unique prediction id generated when inserting a new prediction document
    into MongoDBexample: '63515c86b10d04d230dc1482'
    """


@dataclass(eq=False, repr=False)
class GetPredictionRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    """
    Unique user id generated by the controller on the create new user request
    from the frontend. Linked to a AspNetUser saved within the MS Sql database
    of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    """

    prediction_id: str = betterproto.string_field(2)
    """
    Unique prediction id generated when inserting a new prediction document
    into MongoDBexample: '63515c86b10d04d230dc1482'
    """


@dataclass(eq=False, repr=False)
class GetPredictionResponse(betterproto.Message):
    prediction: "Prediction" = betterproto.message_field(1)
    """
    Prediction records from MongoDB (see Prediction for more detals)example:
    Prediction
    """


@dataclass(eq=False, repr=False)
class GetPredictionsRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    """
    Unique user id generated by the controller on the create new user request
    from the frontend. Linked to a AspNetUser saved within the MS Sql database
    of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    """

    model_id: str = betterproto.string_field(2)
    """
    Unique model ids generated when inserting a new model document into
    MongoDBexample: '63525870394eff35ee175bc2'
    """


@dataclass(eq=False, repr=False)
class GetPredictionsResponse(betterproto.Message):
    predictions: List["Prediction"] = betterproto.message_field(1)
    """
    List of prediction records from MongoDB (see Prediction for more
    detals)example: [Prediction, Prediction]
    """


@dataclass(eq=False, repr=False)
class DeletePredictionRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    """
    Unique user id generated by the controller on the create new user request
    from the frontend. Linked to a AspNetUser saved within the MS Sql database
    of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    """

    prediction_id: str = betterproto.string_field(2)
    """
    Unique prediction id generated when inserting a new prediction document
    into MongoDBexample: '63515c86b10d04d230dc1482'
    """


@dataclass(eq=False, repr=False)
class DeletePredictionResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Prediction(betterproto.Message):
    id: str = betterproto.string_field(1)
    """
    Unique prediction id generated when inserting a new prediction document
    into MongoDBexample: '63515c86b10d04d230dc1482'
    """

    model_id: str = betterproto.string_field(2)
    """
    Unique model ids generated when inserting a new model document into
    MongoDBexample: '63525870394eff35ee175bc2'
    """

    live_dataset_path: str = betterproto.string_field(3)
    """
    The path where the live dataset store is stored on discexample: "app/app-
    data/datasets/....../titanic_test.csv"
    """

    prediction_path: str = betterproto.string_field(4)
    """
    The path where the prediction result is storedon discexample: "app/app-
    data/datasets/../predictions/.../autokeras_xxxxx.csv"
    """

    status: str = betterproto.string_field(5)
    """
    The prediction process status (busy, completed, failed)example: "busy"
    """

    runtime_profile: "PredictionRuntimeProfile" = betterproto.message_field(6)
    """
    The prediction runtime profile object (see ModelruntimeProfile for more
    details)example: ModelruntimeProfile
    """


@dataclass(eq=False, repr=False)
class PredictionRuntimeProfile(betterproto.Message):
    start_time: datetime = betterproto.message_field(1)
    """
    The timestamp when the prediction process startedexample: 1666283732325
    """

    end_time: datetime = betterproto.message_field(2)
    """
    The timestamp when the prediction process endedexample: 1666283732325
    """


@dataclass(eq=False, repr=False)
class DeleteModelRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    """
    Unique user id generated by the controller on the create new user request
    from the frontend. Linked to a AspNetUser saved within the MS Sql database
    of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    """

    model_id: str = betterproto.string_field(2)
    """
    Unique model ids generated when inserting a new model document into
    MongoDBexample: '63525870394eff35ee175bc2'
    """


@dataclass(eq=False, repr=False)
class DeleteModelResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetModelsRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    """
    Unique user id generated by the controller on the create new user request
    from the frontend. Linked to a AspNetUser saved within the MS Sql database
    of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    """

    dataset_id: str = betterproto.string_field(2)
    """
    Unique dataset id generated when inserting a new dataset document into
    MongoDBexample: '63515c86b10d04d230dc1482'
    """


@dataclass(eq=False, repr=False)
class GetModelsResponse(betterproto.Message):
    models: List["Model"] = betterproto.message_field(1)
    """
    List of model records from MongoDB (see Model for more detals)example:
    [Model, Model]
    """


@dataclass(eq=False, repr=False)
class GetModelRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    """
    Unique user id generated by the controller on the create new user request
    from the frontend. Linked to a AspNetUser saved within the MS Sql database
    of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    """

    model_id: str = betterproto.string_field(2)
    """
    Unique model ids generated when inserting a new model document into
    MongoDBexample: '63525870394eff35ee175bc2'
    """


@dataclass(eq=False, repr=False)
class GetModelResponse(betterproto.Message):
    model: "Model" = betterproto.message_field(1)
    """Model record from MongoDB (see Model for more detals)example: Model"""


@dataclass(eq=False, repr=False)
class Model(betterproto.Message):
    id: str = betterproto.string_field(1)
    """
    Unique model ids generated when inserting a new model document into
    MongoDBexample: '63525870394eff35ee175bc2'
    """

    training_id: str = betterproto.string_field(2)
    """
    Unique training id generated when inserting a new training document into
    MongoDBexample: "63525870394eff35ee175bc2"
    """

    predictions: List["Prediction"] = betterproto.message_field(3)
    """
    List of prediction objects representing Prediction records in MongoDB made
    with this model (see Prediction for more detals)example: [Prediction,
    Prediction]
    """

    status: str = betterproto.string_field(4)
    """
    Current activity status of the AutoML adapter training this model (busy,
    completed, failed)example: "busy"
    """

    auto_ml_solution: str = betterproto.string_field(5)
    """Ontology URI of the used AutoML Solutionexample: ":autokeras"""

    ml_model_type: str = betterproto.string_field(6)
    """
    Ontology URI of the used ML model typeexample: ":artificial_neural_network"
    """

    ml_library: str = betterproto.string_field(7)
    """Ontology URI of the used ML libraryexample: ":Keras_lib"""

    path: str = betterproto.string_field(8)
    """
    Absolute system path where the final model pipeline zip is locatedexample:
    app/app-data/....../result/keras_model.zip
    """

    test_score: float = betterproto.float_field(9)
    """
    The computed test score using the metric defined in the training
    recordexample: 0.99
    """

    prediction_time: float = betterproto.float_field(10)
    """
    Time in ms it takes on average to make on prediction with this
    modelexample: 23.9999
    """

    runtime_profile: "ModelruntimeProfile" = betterproto.message_field(11)
    """
    The Model runtime profile object (see ModelruntimeProfile for more
    details)example: ModelruntimeProfile
    """

    status_messages: List[str] = betterproto.string_field(12)
    """
    List of status messages produced by the AutoML solutionexample: ["starting
    search..", "epoch 1...."]
    """

    explanation: str = betterproto.string_field(13)
    """
    JSON string of the explanation AI module result with paths to the generated
    plots and explanationsexample: {"status": "finished","detail": "5 plots
    created","content": [{"title": "SHAP Explanation","items": [{"type":
    "summary_plot","title": "Summary plot","description": "The summary plot
    aggregates the importance of all features towards all classes. The higher
    the x-axis value is for a feature the more significance this feature has
    for the model. The color split within the bars indicates for which class
    this feature is important. If the bar coloring is split evenly the values
    of this feature are equally important for all classes. If it is skewed
    towards one color the values of this feature are only important when
    deciding for the one corresponding class.","path": "\\app-
    data\\training\\flaml\\.....\\result\\plots\\summary_bar.svg"},.....]}]}
    """

    emission: float = betterproto.double_field(14)
    """
    Amount of kg of CO2-eq produced during the model trainingexample:
    ["starting search..", "epoch 1...."]
    """


@dataclass(eq=False, repr=False)
class ModelruntimeProfile(betterproto.Message):
    start_time: datetime = betterproto.message_field(1)
    """
    The timestamp when the adapter search process startedexample: 1666283732325
    """

    end_time: datetime = betterproto.message_field(2)
    """
    The timestamp when the adapter search process endedexample: 1666283732325
    """


@dataclass(eq=False, repr=False)
class DeleteTrainingRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    """
    Unique user id generated by the controller on the create new user request
    from the frontend. Linked to a AspNetUser saved within the MS Sql database
    of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    """

    training_id: str = betterproto.string_field(2)
    """
    Unique training id generated when inserting a new training document into
    MongoDBexample: "63525870394eff35ee175bc2"
    """


@dataclass(eq=False, repr=False)
class DeleteTrainingResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetTrainingsRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    """
    Unique user id generated by the controller on the create new user request
    from the frontend. Linked to a AspNetUser saved within the MS Sql database
    of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    """


@dataclass(eq=False, repr=False)
class GetTrainingsResponse(betterproto.Message):
    trainings: List["Training"] = betterproto.message_field(1)
    """
    List of training records from MongoDB (see Training for more
    detals)example: [Training, Training]
    """


@dataclass(eq=False, repr=False)
class GetTrainingRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    """
    Unique user id generated by the controller on the create new user request
    from the frontend. Linked to a AspNetUser saved within the MS Sql database
    of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    """

    training_id: str = betterproto.string_field(2)
    """
    Unique training id generated when inserting a new training document into
    MongoDBexample: '63515c86b10d04d230dc1482'
    """


@dataclass(eq=False, repr=False)
class GetTrainingResponse(betterproto.Message):
    training: "Training" = betterproto.message_field(1)
    """
    Training record from MongoDB (see Training for more detals)example:
    Training
    """


@dataclass(eq=False, repr=False)
class Training(betterproto.Message):
    id: str = betterproto.string_field(1)
    """
    Unique training id generated when inserting a new training document into
    MongoDBexample: '63515c86b10d04d230dc1482'
    """

    dataset_id: str = betterproto.string_field(2)
    """
    Unique dataset id generated when inserting a new dataset document into
    MongoDBexample: '63515c86b10d04d230dc1482'
    """

    models: List["Model"] = betterproto.message_field(3)
    """
    List of model records from MongoDB (see Model for more detals)example:
    [Model, Model]
    """

    status: str = betterproto.string_field(4)
    """
    Current training activity status (busy, completed, failed)example: "busy"
    """

    configuration: "Configuration" = betterproto.message_field(5)
    """
    Training Configuration object (see Configuration for more detals)example:
    Configuration
    """

    dataset_configuration: str = betterproto.string_field(6)
    """
    The current dataset configuration used to open the dataset as a JSON
    stringexample: '{"use_header": true,"start_row": 1,"delimiter":
    "comma","escape_character": "\\","decimal_character": "."}'
    """

    runtime_profile: "TrainingRuntimeProfile" = betterproto.message_field(7)
    """
    The Training runtime profile object (see TrainingRuntimeProfile for more
    details)example: TrainingRuntimeProfile
    """


@dataclass(eq=False, repr=False)
class Configuration(betterproto.Message):
    task: str = betterproto.string_field(1)
    """
    The selected ML task set during the wizard configurationexample:
    ":tabular_classification"
    """

    target: str = betterproto.string_field(2)
    """
    The dataset target, if required by ML task set during the wizard
    configurationexample: "Survived"
    """

    enabled_strategies: List[str] = betterproto.string_field(3)
    """
    List of enabled strategies ids the blackboard will try during the training
    selected during the wizard configurationexample:
    ['data_preparation.ignore_redundant_features']
    """

    runtime_limit: int = betterproto.int32_field(4)
    """
    The maximum amount of time in minute the training can run before
    cancelation set during the wizard configurationexample: 5
    """

    metric: str = betterproto.string_field(5)
    """
    The ML metric selected during the wizard configurationexample: ":accuracy"
    """

    selected_auto_ml_solutions: List[str] = betterproto.string_field(6)
    """
    List of AutoML solutions selected during the wizard configurationexample:
    [":autokeras", ":mljar"]
    """

    selected_ml_libraries: List[str] = betterproto.string_field(7)
    """
    List of ML libraries selected during the wizard configurationexample:
    [":keras_lib", ":sklearn_lib"]
    """


@dataclass(eq=False, repr=False)
class TrainingRuntimeProfile(betterproto.Message):
    start_time: datetime = betterproto.message_field(1)
    """
    The timestamp when the training process startedexample: 1666283732325
    """

    end_time: datetime = betterproto.message_field(2)
    """The timestamp when the training process endedexample: 1666283732325"""

    events: List["StrategyControllerEvent"] = betterproto.message_field(3)
    """
    List of StrategyControllerEvent objects (see StrategyControllerEvent for
    more detals)example: [StrategyControllerEvent, StrategyControllerEvent]
    """


@dataclass(eq=False, repr=False)
class StrategyControllerEvent(betterproto.Message):
    type: str = betterproto.string_field(1)
    """The event type name set by the blackboardexample: "phase_update"""

    meta: str = betterproto.string_field(2)
    """
    JSON string of meta information related to the typeexample:{"old_phase":
    null,"new_phase": "started"}
    """

    timestamp: datetime = betterproto.message_field(3)
    """The timestamp when the event happenedexample: 1666283732325"""


@dataclass(eq=False, repr=False)
class CreateTrainingRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    """
    Unique user id generated by the controller on the create new user request
    from the frontend. Linked to a AspNetUser saved within the MS Sql database
    of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    """

    dataset_id: str = betterproto.string_field(2)
    """
    Unique dataset id generated when inserting a new dataset document into
    MongoDBexample: '63515c86b10d04d230dc1482'
    """

    configuration: "Configuration" = betterproto.message_field(3)
    """
    Training Configuration object (see Configuration for more detals)example:
    Configuration
    """

    dataset_configuration: str = betterproto.string_field(4)
    """
    The current dataset configuration used to open the dataset as a JSON
    stringexample: '{"use_header": true,"start_row": 1,"delimiter":
    "comma","escape_character": "\\","decimal_character": "."}'
    """

    save_schema: bool = betterproto.bool_field(5)
    """
    If the new dataset schema should be persisted within the dataset document
    """


@dataclass(eq=False, repr=False)
class CreateTrainingResponse(betterproto.Message):
    training_id: str = betterproto.string_field(1)
    """
    Unique training id generated when inserting a new training document into
    MongoDBexample: '63515c86b10d04d230dc1482'
    """


@dataclass(eq=False, repr=False)
class GetAutoMlSolutionsForConfigurationRequest(betterproto.Message):
    configuration: Dict[str, str] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    """
    Dictonary holding the current user configuration of the training
    wizardexample: {"task": ":tabular_classification","library": [":keras_lib",
    ":tensorflow_lib"],}
    """


@dataclass(eq=False, repr=False)
class GetAutoMlSolutionsForConfigurationResponse(betterproto.Message):
    auto_ml_solutions: List[str] = betterproto.string_field(1)
    """
    List of AutoML solution IRIs from the ontology compatible with the current
    wizard configurationexample: [":autokeras", ":mljar"]
    """


@dataclass(eq=False, repr=False)
class GetTasksForDatasetTypeRequest(betterproto.Message):
    dataset_type: str = betterproto.string_field(1)
    """
    The dataset type IRI from the dataset selected for the training
    wizardexample: ":tabular"
    """


@dataclass(eq=False, repr=False)
class GetTasksForDatasetTypeResponse(betterproto.Message):
    tasks: List[str] = betterproto.string_field(1)
    """
    List of ML task IRIs from the ontology compatible with the request dataset
    typeexample: [":tabular_classification", ":tabular_regression"]
    """


@dataclass(eq=False, repr=False)
class GetMlLibrariesForTaskRequest(betterproto.Message):
    task: str = betterproto.string_field(1)
    """
    The task IRI selected by the user in the training wizardexample:
    ":tabular_classification"
    """


@dataclass(eq=False, repr=False)
class GetMlLibrariesForTaskResponse(betterproto.Message):
    ml_libraries: List[str] = betterproto.string_field(1)
    """
    List of ML library IRIs from the ontology supporting the requested ML
    taskexample: [":keras_lib", ":tensorflow_lib"]
    """


@dataclass(eq=False, repr=False)
class GetAvailableStrategiesRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    """
    Unique user id generated by the controller on the create new user request
    from the frontend. Linked to a AspNetUser saved within the MS Sql database
    of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    """

    dataset_id: str = betterproto.string_field(2)
    """
    Unique dataset id generated when inserting a new dataset document into
    MongoDBexample: '63515c86b10d04d230dc1482'
    """

    configuration: Dict[str, str] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    """
    Dictonary holding the current user configuration of the training
    wizardexample: {"task": ":tabular_classification","library": [":keras_lib",
    ":tensorflow_lib"],}
    """


@dataclass(eq=False, repr=False)
class GetAvailableStrategiesResponse(betterproto.Message):
    strategies: List["Strategy"] = betterproto.message_field(1)
    """
    List of Strategy objects (see Strategy for more detals)example: [Strategy,
    Strategy]
    """


@dataclass(eq=False, repr=False)
class Strategy(betterproto.Message):
    id: str = betterproto.string_field(1)
    """
    Unique strategy id to identify a blackboard strategyexample:
    'data_preparation.ignore_redundant_features'
    """

    title: str = betterproto.string_field(2)
    """The strategy titleexample: 'Ignore redundant features'"""

    description: str = betterproto.string_field(3)
    """
    The strategy descriptionexample: 'This strategy ignores certain dataset
    columns if they have been flagged as duplicate in the dataset analysis.'
    """


@dataclass(eq=False, repr=False)
class GetObjectsInformationRequest(betterproto.Message):
    ids: List[str] = betterproto.string_field(1)
    """
    List of ontology IRI to retrieve the complete information from. example:
    [":tabular_classification",”:autokeras”]
    """


@dataclass(eq=False, repr=False)
class GetObjectsInformationResponse(betterproto.Message):
    object_informations: List["ObjectInformation"] = betterproto.message_field(1)
    """
    List of object informations (see ObjectInformation for more detals)example:
    [ObjectInformation, ObjectInformation]
    """


@dataclass(eq=False, repr=False)
class ObjectInformation(betterproto.Message):
    id: str = betterproto.string_field(1)
    """RDF subject IRIexample: “:tabular_classification"""

    informations: Dict[str, str] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    """
    dictionary of RDF pairs for predicates and
    objectsexample:{"skos:prefLabel": "tabular classification","skos:broader":
    ":classification",":belongs_to":
    ":supervised_learning",":has_dataset_type": ":tabular"}
    """


@dataclass(eq=False, repr=False)
class GetDatasetTypesRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetDatasetTypesResponse(betterproto.Message):
    dataset_types: List[str] = betterproto.string_field(1)
    """
    List of supported dataset type IRIs by OMA-MLexample: [":tabular",
    ":image"]
    """


@dataclass(eq=False, repr=False)
class GetHomeOverviewInformationRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    """
    Unique user id generated by the controller on the create new user request
    from the frontend. Linked to a AspNetUser saved within the MS Sql database
    of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    """


@dataclass(eq=False, repr=False)
class GetHomeOverviewInformationResponse(betterproto.Message):
    dataset_amount: int = betterproto.int32_field(1)
    """The total amount of datasetexample: 4"""

    training_amount: int = betterproto.int32_field(2)
    """The total amount of training instance existingexample: 4"""

    model_amount: int = betterproto.int32_field(3)
    """The total amount of generated modelsexample: 4"""

    running_training_amount: int = betterproto.int32_field(4)
    """The total amount of currently active training sessionexample: 4"""


@dataclass(eq=False, repr=False)
class CreateNewUserRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CreateNewUserResponse(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    """
    Unique user id generated by the controller on the create new user request
    from the frontend. Linked to a AspNetUser saved within the MS Sql database
    of the frontendexample: '4a7af128-ac3d-4e3d-89fe-b70f7bfe0c3b'
    """


class ControllerServiceStub(betterproto.ServiceStub):
    async def create_new_user(
        self,
        create_new_user_request: "CreateNewUserRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateNewUserResponse":
        return await self._unary_unary(
            "/ControllerService/CreateNewUser",
            create_new_user_request,
            CreateNewUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_home_overview_information(
        self,
        get_home_overview_information_request: "GetHomeOverviewInformationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetHomeOverviewInformationResponse":
        return await self._unary_unary(
            "/ControllerService/GetHomeOverviewInformation",
            get_home_overview_information_request,
            GetHomeOverviewInformationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_dataset(
        self,
        create_dataset_request: "CreateDatasetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateDatasetResponse":
        return await self._unary_unary(
            "/ControllerService/CreateDataset",
            create_dataset_request,
            CreateDatasetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_datasets(
        self,
        get_datasets_request: "GetDatasetsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDatasetsResponse":
        return await self._unary_unary(
            "/ControllerService/GetDatasets",
            get_datasets_request,
            GetDatasetsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_dataset(
        self,
        get_dataset_request: "GetDatasetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDatasetResponse":
        return await self._unary_unary(
            "/ControllerService/GetDataset",
            get_dataset_request,
            GetDatasetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_dataset(
        self,
        delete_dataset_request: "DeleteDatasetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DeleteDatasetResponse":
        return await self._unary_unary(
            "/ControllerService/DeleteDataset",
            delete_dataset_request,
            DeleteDatasetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_dataset_configuration(
        self,
        set_dataset_configuration_request: "SetDatasetConfigurationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SetDatasetConfigurationResponse":
        return await self._unary_unary(
            "/ControllerService/SetDatasetConfiguration",
            set_dataset_configuration_request,
            SetDatasetConfigurationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_dataset_column_schema_configuration(
        self,
        set_dataset_column_schema_configuration_request: "SetDatasetColumnSchemaConfigurationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SetDatasetColumnSchemaConfigurationResponse":
        return await self._unary_unary(
            "/ControllerService/SetDatasetColumnSchemaConfiguration",
            set_dataset_column_schema_configuration_request,
            SetDatasetColumnSchemaConfigurationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_training(
        self,
        create_training_request: "CreateTrainingRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateTrainingResponse":
        return await self._unary_unary(
            "/ControllerService/CreateTraining",
            create_training_request,
            CreateTrainingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_trainings(
        self,
        get_trainings_request: "GetTrainingsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTrainingsResponse":
        return await self._unary_unary(
            "/ControllerService/GetTrainings",
            get_trainings_request,
            GetTrainingsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_training(
        self,
        get_training_request: "GetTrainingRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTrainingResponse":
        return await self._unary_unary(
            "/ControllerService/GetTraining",
            get_training_request,
            GetTrainingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_training(
        self,
        delete_training_request: "DeleteTrainingRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DeleteTrainingResponse":
        return await self._unary_unary(
            "/ControllerService/DeleteTraining",
            delete_training_request,
            DeleteTrainingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_models(
        self,
        get_models_request: "GetModelsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetModelsResponse":
        return await self._unary_unary(
            "/ControllerService/GetModels",
            get_models_request,
            GetModelsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_model(
        self,
        get_model_request: "GetModelRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetModelResponse":
        return await self._unary_unary(
            "/ControllerService/GetModel",
            get_model_request,
            GetModelResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_model(
        self,
        delete_model_request: "DeleteModelRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DeleteModelResponse":
        return await self._unary_unary(
            "/ControllerService/DeleteModel",
            delete_model_request,
            DeleteModelResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_auto_ml_solutions_for_configuration(
        self,
        get_auto_ml_solutions_for_configuration_request: "GetAutoMlSolutionsForConfigurationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetAutoMlSolutionsForConfigurationResponse":
        return await self._unary_unary(
            "/ControllerService/GetAutoMlSolutionsForConfiguration",
            get_auto_ml_solutions_for_configuration_request,
            GetAutoMlSolutionsForConfigurationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_available_strategies(
        self,
        get_available_strategies_request: "GetAvailableStrategiesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetAvailableStrategiesResponse":
        return await self._unary_unary(
            "/ControllerService/GetAvailableStrategies",
            get_available_strategies_request,
            GetAvailableStrategiesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_dataset_types(
        self,
        get_dataset_types_request: "GetDatasetTypesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDatasetTypesResponse":
        return await self._unary_unary(
            "/ControllerService/GetDatasetTypes",
            get_dataset_types_request,
            GetDatasetTypesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_ml_libraries_for_task(
        self,
        get_ml_libraries_for_task_request: "GetMlLibrariesForTaskRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetMlLibrariesForTaskResponse":
        return await self._unary_unary(
            "/ControllerService/GetMlLibrariesForTask",
            get_ml_libraries_for_task_request,
            GetMlLibrariesForTaskResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_objects_information(
        self,
        get_objects_information_request: "GetObjectsInformationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetObjectsInformationResponse":
        return await self._unary_unary(
            "/ControllerService/GetObjectsInformation",
            get_objects_information_request,
            GetObjectsInformationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_tasks_for_dataset_type(
        self,
        get_tasks_for_dataset_type_request: "GetTasksForDatasetTypeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTasksForDatasetTypeResponse":
        return await self._unary_unary(
            "/ControllerService/GetTasksForDatasetType",
            get_tasks_for_dataset_type_request,
            GetTasksForDatasetTypeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_prediction(
        self,
        create_prediction_request: "CreatePredictionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreatePredictionResponse":
        return await self._unary_unary(
            "/ControllerService/CreatePrediction",
            create_prediction_request,
            CreatePredictionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_predictions(
        self,
        get_predictions_request: "GetPredictionsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetPredictionsResponse":
        return await self._unary_unary(
            "/ControllerService/GetPredictions",
            get_predictions_request,
            GetPredictionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_prediction(
        self,
        get_prediction_request: "GetPredictionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetPredictionResponse":
        return await self._unary_unary(
            "/ControllerService/GetPrediction",
            get_prediction_request,
            GetPredictionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_prediction(
        self,
        delete_prediction_request: "DeletePredictionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DeletePredictionResponse":
        return await self._unary_unary(
            "/ControllerService/DeletePrediction",
            delete_prediction_request,
            DeletePredictionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ControllerServiceBase(ServiceBase):
    async def create_new_user(
        self, create_new_user_request: "CreateNewUserRequest"
    ) -> "CreateNewUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_home_overview_information(
        self, get_home_overview_information_request: "GetHomeOverviewInformationRequest"
    ) -> "GetHomeOverviewInformationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_dataset(
        self, create_dataset_request: "CreateDatasetRequest"
    ) -> "CreateDatasetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_datasets(
        self, get_datasets_request: "GetDatasetsRequest"
    ) -> "GetDatasetsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_dataset(
        self, get_dataset_request: "GetDatasetRequest"
    ) -> "GetDatasetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_dataset(
        self, delete_dataset_request: "DeleteDatasetRequest"
    ) -> "DeleteDatasetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_dataset_configuration(
        self, set_dataset_configuration_request: "SetDatasetConfigurationRequest"
    ) -> "SetDatasetConfigurationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_dataset_column_schema_configuration(
        self,
        set_dataset_column_schema_configuration_request: "SetDatasetColumnSchemaConfigurationRequest",
    ) -> "SetDatasetColumnSchemaConfigurationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_training(
        self, create_training_request: "CreateTrainingRequest"
    ) -> "CreateTrainingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_trainings(
        self, get_trainings_request: "GetTrainingsRequest"
    ) -> "GetTrainingsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_training(
        self, get_training_request: "GetTrainingRequest"
    ) -> "GetTrainingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_training(
        self, delete_training_request: "DeleteTrainingRequest"
    ) -> "DeleteTrainingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_models(
        self, get_models_request: "GetModelsRequest"
    ) -> "GetModelsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_model(
        self, get_model_request: "GetModelRequest"
    ) -> "GetModelResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_model(
        self, delete_model_request: "DeleteModelRequest"
    ) -> "DeleteModelResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_auto_ml_solutions_for_configuration(
        self,
        get_auto_ml_solutions_for_configuration_request: "GetAutoMlSolutionsForConfigurationRequest",
    ) -> "GetAutoMlSolutionsForConfigurationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_available_strategies(
        self, get_available_strategies_request: "GetAvailableStrategiesRequest"
    ) -> "GetAvailableStrategiesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_dataset_types(
        self, get_dataset_types_request: "GetDatasetTypesRequest"
    ) -> "GetDatasetTypesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_ml_libraries_for_task(
        self, get_ml_libraries_for_task_request: "GetMlLibrariesForTaskRequest"
    ) -> "GetMlLibrariesForTaskResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_objects_information(
        self, get_objects_information_request: "GetObjectsInformationRequest"
    ) -> "GetObjectsInformationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_tasks_for_dataset_type(
        self, get_tasks_for_dataset_type_request: "GetTasksForDatasetTypeRequest"
    ) -> "GetTasksForDatasetTypeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_prediction(
        self, create_prediction_request: "CreatePredictionRequest"
    ) -> "CreatePredictionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_predictions(
        self, get_predictions_request: "GetPredictionsRequest"
    ) -> "GetPredictionsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_prediction(
        self, get_prediction_request: "GetPredictionRequest"
    ) -> "GetPredictionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_prediction(
        self, delete_prediction_request: "DeletePredictionRequest"
    ) -> "DeletePredictionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_new_user(
        self,
        stream: "grpclib.server.Stream[CreateNewUserRequest, CreateNewUserResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_new_user(request)
        await stream.send_message(response)

    async def __rpc_get_home_overview_information(
        self,
        stream: "grpclib.server.Stream[GetHomeOverviewInformationRequest, GetHomeOverviewInformationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_home_overview_information(request)
        await stream.send_message(response)

    async def __rpc_create_dataset(
        self,
        stream: "grpclib.server.Stream[CreateDatasetRequest, CreateDatasetResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_dataset(request)
        await stream.send_message(response)

    async def __rpc_get_datasets(
        self, stream: "grpclib.server.Stream[GetDatasetsRequest, GetDatasetsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_datasets(request)
        await stream.send_message(response)

    async def __rpc_get_dataset(
        self, stream: "grpclib.server.Stream[GetDatasetRequest, GetDatasetResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_dataset(request)
        await stream.send_message(response)

    async def __rpc_delete_dataset(
        self,
        stream: "grpclib.server.Stream[DeleteDatasetRequest, DeleteDatasetResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_dataset(request)
        await stream.send_message(response)

    async def __rpc_set_dataset_configuration(
        self,
        stream: "grpclib.server.Stream[SetDatasetConfigurationRequest, SetDatasetConfigurationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_dataset_configuration(request)
        await stream.send_message(response)

    async def __rpc_set_dataset_column_schema_configuration(
        self,
        stream: "grpclib.server.Stream[SetDatasetColumnSchemaConfigurationRequest, SetDatasetColumnSchemaConfigurationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_dataset_column_schema_configuration(request)
        await stream.send_message(response)

    async def __rpc_create_training(
        self,
        stream: "grpclib.server.Stream[CreateTrainingRequest, CreateTrainingResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_training(request)
        await stream.send_message(response)

    async def __rpc_get_trainings(
        self, stream: "grpclib.server.Stream[GetTrainingsRequest, GetTrainingsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_trainings(request)
        await stream.send_message(response)

    async def __rpc_get_training(
        self, stream: "grpclib.server.Stream[GetTrainingRequest, GetTrainingResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_training(request)
        await stream.send_message(response)

    async def __rpc_delete_training(
        self,
        stream: "grpclib.server.Stream[DeleteTrainingRequest, DeleteTrainingResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_training(request)
        await stream.send_message(response)

    async def __rpc_get_models(
        self, stream: "grpclib.server.Stream[GetModelsRequest, GetModelsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_models(request)
        await stream.send_message(response)

    async def __rpc_get_model(
        self, stream: "grpclib.server.Stream[GetModelRequest, GetModelResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_model(request)
        await stream.send_message(response)

    async def __rpc_delete_model(
        self, stream: "grpclib.server.Stream[DeleteModelRequest, DeleteModelResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_model(request)
        await stream.send_message(response)

    async def __rpc_get_auto_ml_solutions_for_configuration(
        self,
        stream: "grpclib.server.Stream[GetAutoMlSolutionsForConfigurationRequest, GetAutoMlSolutionsForConfigurationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_auto_ml_solutions_for_configuration(request)
        await stream.send_message(response)

    async def __rpc_get_available_strategies(
        self,
        stream: "grpclib.server.Stream[GetAvailableStrategiesRequest, GetAvailableStrategiesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_available_strategies(request)
        await stream.send_message(response)

    async def __rpc_get_dataset_types(
        self,
        stream: "grpclib.server.Stream[GetDatasetTypesRequest, GetDatasetTypesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_dataset_types(request)
        await stream.send_message(response)

    async def __rpc_get_ml_libraries_for_task(
        self,
        stream: "grpclib.server.Stream[GetMlLibrariesForTaskRequest, GetMlLibrariesForTaskResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_ml_libraries_for_task(request)
        await stream.send_message(response)

    async def __rpc_get_objects_information(
        self,
        stream: "grpclib.server.Stream[GetObjectsInformationRequest, GetObjectsInformationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_objects_information(request)
        await stream.send_message(response)

    async def __rpc_get_tasks_for_dataset_type(
        self,
        stream: "grpclib.server.Stream[GetTasksForDatasetTypeRequest, GetTasksForDatasetTypeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_tasks_for_dataset_type(request)
        await stream.send_message(response)

    async def __rpc_create_prediction(
        self,
        stream: "grpclib.server.Stream[CreatePredictionRequest, CreatePredictionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_prediction(request)
        await stream.send_message(response)

    async def __rpc_get_predictions(
        self,
        stream: "grpclib.server.Stream[GetPredictionsRequest, GetPredictionsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_predictions(request)
        await stream.send_message(response)

    async def __rpc_get_prediction(
        self,
        stream: "grpclib.server.Stream[GetPredictionRequest, GetPredictionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_prediction(request)
        await stream.send_message(response)

    async def __rpc_delete_prediction(
        self,
        stream: "grpclib.server.Stream[DeletePredictionRequest, DeletePredictionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_prediction(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/ControllerService/CreateNewUser": grpclib.const.Handler(
                self.__rpc_create_new_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateNewUserRequest,
                CreateNewUserResponse,
            ),
            "/ControllerService/GetHomeOverviewInformation": grpclib.const.Handler(
                self.__rpc_get_home_overview_information,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetHomeOverviewInformationRequest,
                GetHomeOverviewInformationResponse,
            ),
            "/ControllerService/CreateDataset": grpclib.const.Handler(
                self.__rpc_create_dataset,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateDatasetRequest,
                CreateDatasetResponse,
            ),
            "/ControllerService/GetDatasets": grpclib.const.Handler(
                self.__rpc_get_datasets,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDatasetsRequest,
                GetDatasetsResponse,
            ),
            "/ControllerService/GetDataset": grpclib.const.Handler(
                self.__rpc_get_dataset,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDatasetRequest,
                GetDatasetResponse,
            ),
            "/ControllerService/DeleteDataset": grpclib.const.Handler(
                self.__rpc_delete_dataset,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteDatasetRequest,
                DeleteDatasetResponse,
            ),
            "/ControllerService/SetDatasetConfiguration": grpclib.const.Handler(
                self.__rpc_set_dataset_configuration,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetDatasetConfigurationRequest,
                SetDatasetConfigurationResponse,
            ),
            "/ControllerService/SetDatasetColumnSchemaConfiguration": grpclib.const.Handler(
                self.__rpc_set_dataset_column_schema_configuration,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetDatasetColumnSchemaConfigurationRequest,
                SetDatasetColumnSchemaConfigurationResponse,
            ),
            "/ControllerService/CreateTraining": grpclib.const.Handler(
                self.__rpc_create_training,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateTrainingRequest,
                CreateTrainingResponse,
            ),
            "/ControllerService/GetTrainings": grpclib.const.Handler(
                self.__rpc_get_trainings,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTrainingsRequest,
                GetTrainingsResponse,
            ),
            "/ControllerService/GetTraining": grpclib.const.Handler(
                self.__rpc_get_training,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTrainingRequest,
                GetTrainingResponse,
            ),
            "/ControllerService/DeleteTraining": grpclib.const.Handler(
                self.__rpc_delete_training,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteTrainingRequest,
                DeleteTrainingResponse,
            ),
            "/ControllerService/GetModels": grpclib.const.Handler(
                self.__rpc_get_models,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetModelsRequest,
                GetModelsResponse,
            ),
            "/ControllerService/GetModel": grpclib.const.Handler(
                self.__rpc_get_model,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetModelRequest,
                GetModelResponse,
            ),
            "/ControllerService/DeleteModel": grpclib.const.Handler(
                self.__rpc_delete_model,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteModelRequest,
                DeleteModelResponse,
            ),
            "/ControllerService/GetAutoMlSolutionsForConfiguration": grpclib.const.Handler(
                self.__rpc_get_auto_ml_solutions_for_configuration,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAutoMlSolutionsForConfigurationRequest,
                GetAutoMlSolutionsForConfigurationResponse,
            ),
            "/ControllerService/GetAvailableStrategies": grpclib.const.Handler(
                self.__rpc_get_available_strategies,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAvailableStrategiesRequest,
                GetAvailableStrategiesResponse,
            ),
            "/ControllerService/GetDatasetTypes": grpclib.const.Handler(
                self.__rpc_get_dataset_types,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDatasetTypesRequest,
                GetDatasetTypesResponse,
            ),
            "/ControllerService/GetMlLibrariesForTask": grpclib.const.Handler(
                self.__rpc_get_ml_libraries_for_task,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetMlLibrariesForTaskRequest,
                GetMlLibrariesForTaskResponse,
            ),
            "/ControllerService/GetObjectsInformation": grpclib.const.Handler(
                self.__rpc_get_objects_information,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetObjectsInformationRequest,
                GetObjectsInformationResponse,
            ),
            "/ControllerService/GetTasksForDatasetType": grpclib.const.Handler(
                self.__rpc_get_tasks_for_dataset_type,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTasksForDatasetTypeRequest,
                GetTasksForDatasetTypeResponse,
            ),
            "/ControllerService/CreatePrediction": grpclib.const.Handler(
                self.__rpc_create_prediction,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreatePredictionRequest,
                CreatePredictionResponse,
            ),
            "/ControllerService/GetPredictions": grpclib.const.Handler(
                self.__rpc_get_predictions,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetPredictionsRequest,
                GetPredictionsResponse,
            ),
            "/ControllerService/GetPrediction": grpclib.const.Handler(
                self.__rpc_get_prediction,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetPredictionRequest,
                GetPredictionResponse,
            ),
            "/ControllerService/DeletePrediction": grpclib.const.Handler(
                self.__rpc_delete_prediction,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeletePredictionRequest,
                DeletePredictionResponse,
            ),
        }
